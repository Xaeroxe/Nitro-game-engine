initSidebarItems({"fn":[["binom","Computes the binomial coefficient C^k_n (\"k among n\")."],["center","Computes the center of a set of point."],["circumcircle","Computes the circumcircle of a triangle."],["cross3","A 3d cross product that do not require the `Cross<Self, Self>` trait impl."],["dcos","Computes the n-th derivative of the cosinus function."],["dsin","Computes the n-th derivative of the sinus function."],["is_affinely_dependent_triangle3","Tests if three 3D points are approximately aligned."],["is_point_in_triangle","Tests if a point is inside of a triangle."],["median","Computes the median of a set of values."],["point_cloud_support_point","Computes the support point of a cloud of points."],["remove_unused_points","Given an index buffer, remove from `points` every point that is not indexed."],["repeat","Creates a vector with all its components equal to `e`."],["sort3","Sorts a set of three values in increasing order."],["tetrahedron_center","Computes the center of a tetrahedron."],["tetrahedron_signed_volume","Computes the signed volume of a tetrahedron."],["tetrahedron_volume","Computes the volume of a tetrahedron."],["triangle_area","Computes the area of a triangle."],["triangle_center","Computes the center of a triangle."],["triangle_perimeter","Computes the perimeter of a triangle."]],"mod":[["data","Data structure utilities."]],"struct":[["HashablePartialEq","A structure that implements `Eq` and is hashable even if the wrapped data implements only `PartialEq`."]],"trait":[["AsBytes","Trait that transforms thing to a slice of u8."]]});