var searchIndex = {};
searchIndex["alga"] = {"doc":"Traits for algebra.","items":[[0,"general","alga","Fundamental algebraic structures.",null,null],[3,"Multiplicative","alga::general","The multiplication operator, commonly symbolized by `Ã—`.",null,null],[3,"Additive","","The addition operator, commonly symbolized by `+`.",null,null],[3,"Id","","The universal identity element wrt. a given operator, usually noted `Id` with a context-dependent subscript.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new identity element.",0,{"inputs":[],"output":{"name":"id"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"identity","","",0,{"inputs":[],"output":{"name":"id"}}],[11,"default_epsilon","","",0,null],[11,"default_max_relative","","",0,null],[11,"default_max_ulps","","",0,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",0,null],[11,"ulps_eq","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":null}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"id"}],"output":null}],[11,"operate","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"id"}}],[11,"inverse","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"one","","",0,{"inputs":[],"output":{"name":"id"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"id"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_superset","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_in_subset","","",0,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"meet","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"join","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"additive"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"multiplicative"}}],[11,"operator_token","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"operator_token","","",2,{"inputs":[],"output":{"name":"self"}}],[8,"Inverse","","Trait used to define the inverse element relative to the given operator.",null,null],[10,"inverse","","Returns the inverse of `self`, relative to the operator `O`.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","In-place inversin of `self`.",3,{"inputs":[{"name":"self"}],"output":null}],[8,"Operator","","Trait implemented by types representing abstract operators.",null,null],[10,"operator_token","","Returns the structure that identifies the operator.",4,{"inputs":[],"output":{"name":"self"}}],[8,"ClosedAdd","","[Alias] Trait alias for `Add` and `AddAsign` with result of type `Self`.",null,null],[8,"ClosedMul","","[Alias] Trait alias for `Mul` and `MulAsign` with result of type `Self`.",null,null],[8,"ClosedSub","","[Alias] Trait alias for `Sub` and `SubAsign` with result of type `Self`.",null,null],[8,"ClosedNeg","","[Alias] Trait alias for `Neg` with result of type `Self`.",null,null],[8,"ClosedDiv","","[Alias] Trait alias for `Div` and `DivAsign` with result of type `Self`.",null,null],[8,"Identity","","A type that is equipped with identity.",null,null],[10,"identity","","The identity element.",5,{"inputs":[],"output":{"name":"self"}}],[8,"SubsetOf","","Nested sets and conversions between them (using an injective mapping). Useful to work with substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever `SubsetOf` is).",null,null],[10,"to_superset","","The inclusion map: converts `self` to the equivalent element of its superset.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_superset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",6,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[10,"from_superset_unchecked","","Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"is_in_subset","","Checks if `element` is actually part of the subset `Self` (and can be converted to it).",6,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[8,"SupersetOf","","Nested sets and conversions between them. Useful to work with substructures. It is preferable to implement the `SupersetOf` trait instead of `SubsetOf` whenever possible (because `SupersetOf` is automatically implemented whenever `SubsetOf` is.",null,null],[11,"to_subset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_in_subset","","Checks if `self` is actually part of its subset `T` (and can be converted to it).",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_subset_unchecked","","Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"from_subset","","The inclusion map: converts `self` to the equivalent element of its superset.",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"AbstractMagma","","Types that are closed under a given operator.",null,null],[10,"operate","","Performs an operation.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"op","","Performs specific operation.",8,{"inputs":[{"name":"self"},{"name":"o"},{"name":"self"}],"output":{"name":"self"}}],[8,"AbstractQuasigroup","","A magma with the divisibility property.",null,null],[11,"prop_inv_is_latin_square_approx","","Returns `true` if latin squareness holds for the given arguments. Approximate equality is used for verifications.",9,null],[11,"prop_inv_is_latin_square","","Returns `true` if latin squareness holds for the given arguments.",9,null],[8,"AbstractLoop","","A quasigroup with an unique identity element.",null,null],[8,"AbstractSemigroup","","An associative magma.",null,null],[11,"prop_is_associative_approx","","Returns `true` if associativity holds for the given arguments. Approximate equality is used for verifications.",10,null],[11,"prop_is_associative","","Returns `true` if associativity holds for the given arguments.",10,null],[8,"AbstractMonoid","","A semigroup equipped with an identity element.",null,null],[11,"prop_operating_identity_element_is_noop_approx","","Checks whether operating with the identity element is a no-op for the given argument. Approximate equality is used for verifications.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_operating_identity_element_is_noop","","Checks whether operating with the identity element is a no-op for the given argument.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"AbstractGroup","","A group is a loop and a monoid at the same time.",null,null],[8,"AbstractGroupAbelian","","An commutative group.",null,null],[11,"prop_is_commutative_approx","","Returns `true` if the operator is commutative for the given argument tuple. Approximate equality is used for verifications.",12,null],[11,"prop_is_commutative","","Returns `true` if the operator is commutative for the given argument tuple.",12,null],[8,"AbstractRing","","A ring is the combination of an abelian group and a multiplicative monoid structure.",null,null],[11,"prop_mul_and_add_are_distributive_approx","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple. Approximate equality is used for verifications.",13,null],[11,"prop_mul_and_add_are_distributive","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple.",13,null],[8,"AbstractRingCommutative","","A ring with a commutative multiplication.",null,null],[11,"prop_mul_is_commutative_approx","","Returns `true` if the multiplication operator is commutative for the given argument tuple. Approximate equality is used for verifications.",14,null],[11,"prop_mul_is_commutative","","Returns `true` if the multiplication operator is commutative for the given argument tuple.",14,null],[8,"AbstractField","","A field is a commutative ring, and an abelian group under both operators.",null,null],[8,"AbstractModule","","A module combines two sets: one with an abelian group structure and another with a commutative ring structure.",null,null],[16,"AbstractRing","","The underlying scalar field.",15,null],[10,"multiply_by","","Multiplies an element of the ring with an element of the module.",15,null],[8,"MeetSemilattice","","A set where every two elements have an infimum (i.e. greatest lower bound).",null,null],[10,"meet","","Returns the meet (aka. infimum) of two values.",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"JoinSemilattice","","A set where every two elements have a suppremum (i.e. smallest upper bound).",null,null],[10,"join","","Returns the join (aka. supremum) of two values.",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Lattice","","Partially orderable sets where every two elements have a suppremum and infimum.",null,null],[11,"meet_join","","Returns the infimum and the supremum simultaneously.",18,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",18,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"AdditiveMagma","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveQuasigroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveLoop","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveSemigroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveMonoid","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveGroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"AdditiveGroupAbelian","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeMagma","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeQuasigroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeLoop","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeSemigroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeMonoid","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeGroup","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"MultiplicativeGroupAbelian","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"Ring","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"RingCommutative","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"Field","","[Alias] Algebraic structure specialized for one kind of operation.",null,null],[8,"Module","","A module which overloads the `*` and `+` operators.",null,null],[16,"Ring","","The underlying scalar field.",19,null],[8,"Real","","Trait shared by all reals.",null,null],[10,"floor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","",20,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","",20,null],[10,"exp_m1","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pi","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"two_pi","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_2","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_3","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_4","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_6","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_8","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_1_pi","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_pi","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"e","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"log2_e","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"log10_e","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"ln_2","","",20,{"inputs":[],"output":{"name":"self"}}],[10,"ln_10","","",20,{"inputs":[],"output":{"name":"self"}}],[0,"linear","alga","Traits dedicated to linear algebra.",null,null],[11,"transform_point","alga::general","",0,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"transform_vector","","",0,null],[11,"inverse_transform_point","","",0,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_transform_vector","","",0,null],[11,"decompose","","",0,null],[11,"append_translation","","",0,null],[11,"prepend_translation","","",0,null],[11,"append_rotation","","",0,null],[11,"prepend_rotation","","",0,null],[11,"append_scaling","","",0,null],[11,"prepend_scaling","","",0,null],[11,"translation","","",0,null],[11,"rotation","","",0,null],[11,"scaling","","",0,null],[11,"powf","","",0,null],[11,"rotation_between","","",0,null],[11,"scaled_rotation_between","","",0,null],[11,"to_vector","","",0,null],[11,"from_vector","","",0,null],[8,"VectorSpace","alga::linear","A vector space has a module structure over a field instead of a ring.",null,null],[16,"Field","","The underlying scalar field.",21,null],[8,"NormedSpace","","A normed vector space.",null,null],[10,"norm_squared","","The squared norm of this vector.",22,null],[10,"norm","","The norm of this vector.",22,null],[10,"normalize","","Returns a normalized version of this vector.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"normalize_mut","","Normalizes this vector in-place and returns its norm.",22,null],[10,"try_normalize","","Returns a normalized version of this vector unless its norm as smaller or equal to `eps`.",22,null],[10,"try_normalize_mut","","Normalizes this vector in-place or does nothing if its norm is smaller or equal to `eps`.",22,null],[8,"InnerSpace","","A vector space aquipped with an inner product.",null,null],[16,"Real","","The result of inner product (same as the field used by this vector space).",23,null],[10,"inner_product","","Computes the inner product of `self` with `other`.",23,null],[11,"angle","","Measures the angle between two vectors.",23,null],[8,"FiniteDimVectorSpace","","A finite-dimensional vector space.",null,null],[10,"dimension","","The vector space dimension.",24,{"inputs":[],"output":{"name":"usize"}}],[11,"canonical_basis","","Applies the given closule to each element of this vector space's canonical basis. Stops if `f` returns `false`.",24,{"inputs":[{"name":"f"}],"output":null}],[10,"canonical_basis_element","","The i-the canonical basis element.",24,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"dot","","The dot product between two vectors.",24,null],[10,"component_unchecked","","Same as `&self[i]` but without bound-checking.",24,null],[10,"component_unchecked_mut","","Same as `&mut self[i]` but without bound-checking.",24,null],[8,"FiniteDimInnerSpace","","A finite-dimensional vector space equipped with an inner product that must coincide with the dot product.",null,null],[10,"orthonormalize","","Orthonormalizes the given family of vectors. The largest free family of vectors is moved at the beginning of the array and its size is returned. Vectors at an indices larger or equal to this length can be modified to an arbitrary value.",25,null],[10,"orthonormal_subspace_basis","","Applies the given closure to each element of the orthonormal basis of the subspace orthogonal to free family of vectors `vs`. If `vs` is not a free family, the result is unspecified.",25,null],[8,"AffineSpace","","A set points associated with a vector space and a transitive and free additive group action (the translation).",null,null],[16,"Translation","","The associated vector space.",26,null],[11,"translate_by","","Same as `*self + *t`. Applies the additive group action of this affine space's associated vector space on `self`.",26,null],[11,"subtract","","Same as `*self - *other`. Returns the unique element `v` of the associated vector space such that `self = right + v`.",26,null],[8,"EuclideanSpace","","The finite-dimensional affine space based on the field of reals.",null,null],[16,"Coordinates","","The underlying finite vector space.",27,null],[16,"Real","","The underlying reals.",27,null],[10,"origin","","The preferred origin of this euclidean space.",27,{"inputs":[],"output":{"name":"self"}}],[11,"scale_by","","Multiplies the distance of this point to `Self::origin()` by `s`.",27,null],[11,"coordinates","","The coordinates of this point, i.e., the translation from the origin.",27,null],[11,"from_coordinates","","Builds a point from its coordinates relative to the origin.",27,null],[11,"distance_squared","","The distance between two points.",27,null],[11,"distance","","The distance between two points.",27,null],[8,"Transformation","","A general transformation acting on an euclidean space. It may not be inversible.",null,null],[10,"transform_point","","Applies this group's action on a point from the euclidean space.",28,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[10,"transform_vector","","Applies this group's action on a vector from the euclidean space.",28,null],[8,"AffineTransformation","","The group of affine transformations. They are decomposable into a rotation, a non-uniform scaling, a second rotation, and a translation (applied in that order).",null,null],[16,"Rotation","","Type of the first rotation to be applied.",29,null],[16,"NonUniformScaling","","Type of the non-uniform scaling to be applied.",29,null],[16,"Translation","","The type of the pure translation part of this affine transformation.",29,null],[10,"decompose","","Decomposes this affine transformation into a rotation followed by a non-uniform scaling, followed by a rotation, followed by a translation.",29,null],[10,"append_translation","","Appends a translation to this similarity.",29,null],[10,"prepend_translation","","Prepends a translation to this similarity.",29,null],[10,"append_rotation","","Appends a rotation to this similarity.",29,null],[10,"prepend_rotation","","Prepends a rotation to this similarity.",29,null],[10,"append_scaling","","Appends a scaling factor to this similarity.",29,null],[10,"prepend_scaling","","Prepends a scaling factor to this similarity.",29,null],[11,"append_rotation_wrt_point","","Appends to this similarity a rotation centered at the point `p`, i.e., this point is left invariant.",29,null],[8,"Scaling","","Subgroups of the (signed) uniform scaling group.",null,null],[11,"to_real","","Converts this scaling factor to a real. Same as `self.to_superset()`.",30,null],[11,"from_real","","Attempts to convert a real to an element of this scaling subgroup. Same as `Self::from_superset()`. Returns `None` if no such scaling is possible for this subgroup.",30,null],[11,"powf","","Raises the scaling to a power. The result must be equivalent to `self.to_superset().powf(n)`. Returns `None` if the result is not representable by `Self`.",30,null],[11,"scale_between","","The scaling required to make `a` have the same norm as `b`, i.e., `|b| = |a| * norm_ratio(a, b)`.",30,null],[8,"Similarity","","Subgroups of the similarity group `S(n)`, i.e., rotations, translations, and (signed) uniform scaling.",null,null],[16,"Scaling","","The type of the pure (uniform) scaling part of this similarity transformation.",31,null],[10,"translation","","The pure translational component of this similarity transformation.",31,null],[10,"rotation","","The pure rotational component of this similarity transformation.",31,null],[10,"scaling","","The pure scaling component of this similarity transformation.",31,null],[11,"translate_point","","Applies this transformation's pure translational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"rotate_point","","Applies this transformation's pure rotational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"scale_point","","Applies this transformation's pure scaling part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"rotate_vector","","Applies this transformation's pure rotational part to a vector.",31,null],[11,"scale_vector","","Applies this transformation's pure scaling part to a vector.",31,null],[11,"inverse_translate_point","","Applies this transformation inverse's pure translational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_rotate_point","","Applies this transformation inverse's pure rotational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_scale_point","","Applies this transformation inverse's pure scaling part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_rotate_vector","","Applies this transformation inverse's pure rotational part to a vector.",31,null],[11,"inverse_scale_vector","","Applies this transformation inverse's pure scaling part to a vector.",31,null],[8,"Isometry","","Subgroups of the isometry group `E(n)`, i.e., rotations, reflexions, and translations.",null,null],[8,"DirectIsometry","","Subgroups of the orientation-preserving isometry group `SE(n)`, i.e., rotations and translations.",null,null],[8,"Translation","","Subgroups of the n-dimensional translation group `T(n)`.",null,null],[10,"to_vector","","Converts this translation to a vector.",32,null],[10,"from_vector","","Attempts to convert a vector to this translation. Returns `None` if the translation represented by `v` is not part of the translation subgroup represented by `Self`.",32,null],[11,"powf","","Raises the translation to a power. The result must be equivalent to `self.to_superset() * n`.  Returns `None` if the result is not representable by `Self`.",32,null],[11,"translation_between","","The translation needed to make `a` coincide with `b`, i.e., `b = a * translation_to(a, b)`.",32,{"inputs":[{"name":"e"},{"name":"e"}],"output":{"name":"option"}}],[8,"OrthogonalTransformation","","Subgroups of the n-dimensional rotations and scaling `O(n)`.",null,null],[8,"Rotation","","Subgroups of the n-dimensional rotation group `SO(n)`.",null,null],[10,"powf","","Raises this rotation to a power. If this is a simple rotation, the result must be equivalent to multiplying the rotation angle by `n`.",33,null],[10,"rotation_between","","Computes a simple rotation that makes the angle between `a` and `b` equal to zero, i.e., `b.angle(a * delta_rotation(a, b)) = 0`. If `a` and `b` are collinear, the computed rotation may not be unique. Returns `None` if no such simple rotation exists in the subgroup represented by `Self`.",33,null],[10,"scaled_rotation_between","","Computes the rotation between `a` and `b` and raises it to the power `n`.",33,null],[8,"ProjectiveTransformation","","The most general form of inversible transformations on an euclidean space.",null,null],[10,"inverse_transform_point","","Applies this group's inverse action on a point from the euclidean space.",34,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[10,"inverse_transform_vector","","Applies this group's inverse action on a vector from the euclidean space.",34,null],[8,"Matrix","","The space of all matrices.",null,null],[16,"Field","","The underlying field.",35,null],[16,"Row","","The type of rows of this matrix.",35,null],[16,"Column","","The type of columns of this matrix.",35,null],[16,"Transpose","","The type of the transposed matrix.",35,null],[10,"nrows","","The number of rows of this matrix.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"ncolumns","","The number of columns of this matrix.",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"row","","The i-th row of this matrix.",35,null],[10,"column","","The i-th column of this matrix.",35,null],[10,"get_unchecked","","Gets the component at row `i` and column `j` of this matrix without bound checking.",35,null],[11,"get","","Gets the component at row `i` and column `j` of this matrix.",35,null],[10,"transpose","","Transposes this matrix.",35,null],[8,"MatrixMut","","The space of all matrices that are stable under modifications of its components, rows and columns.",null,null],[11,"set_row","","Sets the i-th row of this matrix.",36,null],[10,"set_row_mut","","In-place sets the i-th row of this matrix.",36,null],[11,"set_column","","Sets the i-th col of this matrix.",36,null],[10,"set_column_mut","","In-place sets the i-th col of this matrix.",36,null],[10,"set_unchecked","","Sets the component at row `i` and column `j` of this matrix without bound checking.",36,null],[11,"set","","Sets the component at row `i` and column `j` of this matrix.",36,null],[8,"SquareMatrix","","The monoid of all square matrices, including non-inversible ones.",null,null],[16,"Vector","","The type of rows, column, and diagonal of this matrix.",37,null],[10,"diagonal","","The diagonal of this matrix.",37,null],[10,"determinant","","The determinant of this matrix.",37,null],[10,"try_inverse","","Attempts to inverse `self`.",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"dimension","","The number of rows or column of this matrix.",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transpose_mut","","In-place transposition.",37,{"inputs":[{"name":"self"}],"output":null}],[8,"SquareMatrixMut","","The monoid of all mutable square matrices that are stable under modification of its diagonal.",null,null],[10,"from_diagonal","","Constructs a new diagonal matrix.",38,null],[11,"set_diagonal","","Sets the matrix diagonal.",38,null],[10,"set_diagonal_mut","","In-place sets the matrix diagonal.",38,null],[8,"InversibleSquareMatrix","","The group of inversible matrix. Commonly known as the General Linear group `GL(n)` by algebraists.",null,null],[14,"impl_marker","alga","Implements empty traits aka marker traits for types provided. # Examples",null,null],[14,"impl_quasigroup","","Implements the quasigroup trait for types provided. # Examples",null,null],[14,"impl_semigroup","","Implements the semigroup trait for types provded. # Examples",null,null],[14,"impl_loop","","Implements the loop trait for types provided. # Examples",null,null],[14,"impl_monoid","","Implements the monoid trait for types provided. # Examples",null,null],[14,"impl_group","","Implements the group trait for types provided. # Examples",null,null],[14,"impl_abelian","","Implements the abelian group trait for types provided. # Examples",null,null],[14,"impl_ring","","Implements the ring trait for types provided. # Examples",null,null],[14,"impl_ring_commutative","","Implements the commutative ring trait for types provided. # Examples",null,null],[14,"impl_field","","Implements the field trait for types provided. # Examples",null,null],[11,"op","alga::general","Performs specific operation.",8,{"inputs":[{"name":"self"},{"name":"o"},{"name":"self"}],"output":{"name":"self"}}],[11,"prop_inv_is_latin_square_approx","","Returns `true` if latin squareness holds for the given arguments. Approximate equality is used for verifications.",9,null],[11,"prop_inv_is_latin_square","","Returns `true` if latin squareness holds for the given arguments.",9,null],[11,"prop_is_associative_approx","","Returns `true` if associativity holds for the given arguments. Approximate equality is used for verifications.",10,null],[11,"prop_is_associative","","Returns `true` if associativity holds for the given arguments.",10,null],[11,"prop_operating_identity_element_is_noop_approx","","Checks whether operating with the identity element is a no-op for the given argument. Approximate equality is used for verifications.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_operating_identity_element_is_noop","","Checks whether operating with the identity element is a no-op for the given argument.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"prop_is_commutative_approx","","Returns `true` if the operator is commutative for the given argument tuple. Approximate equality is used for verifications.",12,null],[11,"prop_is_commutative","","Returns `true` if the operator is commutative for the given argument tuple.",12,null],[11,"prop_mul_and_add_are_distributive_approx","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple. Approximate equality is used for verifications.",13,null],[11,"prop_mul_and_add_are_distributive","","Returns `true` if the multiplication and addition operators are distributive for the given argument tuple.",13,null],[11,"prop_mul_is_commutative_approx","","Returns `true` if the multiplication operator is commutative for the given argument tuple. Approximate equality is used for verifications.",14,null],[11,"prop_mul_is_commutative","","Returns `true` if the multiplication operator is commutative for the given argument tuple.",14,null],[11,"inverse_mut","","In-place inversin of `self`.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"meet_join","","Returns the infimum and the supremum simultaneously.",18,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",18,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"from_superset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",6,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"to_subset","","The inverse inclusion map: attempts to construct `self` from the equivalent element of its superset.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"angle","alga::linear","Measures the angle between two vectors.",23,null],[11,"canonical_basis","","Applies the given closule to each element of this vector space's canonical basis. Stops if `f` returns `false`.",24,{"inputs":[{"name":"f"}],"output":null}],[11,"translate_by","","Same as `*self + *t`. Applies the additive group action of this affine space's associated vector space on `self`.",26,null],[11,"subtract","","Same as `*self - *other`. Returns the unique element `v` of the associated vector space such that `self = right + v`.",26,null],[11,"scale_by","","Multiplies the distance of this point to `Self::origin()` by `s`.",27,null],[11,"coordinates","","The coordinates of this point, i.e., the translation from the origin.",27,null],[11,"from_coordinates","","Builds a point from its coordinates relative to the origin.",27,null],[11,"distance_squared","","The distance between two points.",27,null],[11,"distance","","The distance between two points.",27,null],[11,"append_rotation_wrt_point","","Appends to this similarity a rotation centered at the point `p`, i.e., this point is left invariant.",29,null],[11,"translate_point","","Applies this transformation's pure translational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"rotate_point","","Applies this transformation's pure rotational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"scale_point","","Applies this transformation's pure scaling part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"rotate_vector","","Applies this transformation's pure rotational part to a vector.",31,null],[11,"scale_vector","","Applies this transformation's pure scaling part to a vector.",31,null],[11,"inverse_translate_point","","Applies this transformation inverse's pure translational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_rotate_point","","Applies this transformation inverse's pure rotational part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_scale_point","","Applies this transformation inverse's pure scaling part to a point.",31,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_rotate_vector","","Applies this transformation inverse's pure rotational part to a vector.",31,null],[11,"inverse_scale_vector","","Applies this transformation inverse's pure scaling part to a vector.",31,null],[11,"to_real","","Converts this scaling factor to a real. Same as `self.to_superset()`.",30,null],[11,"from_real","","Attempts to convert a real to an element of this scaling subgroup. Same as `Self::from_superset()`. Returns `None` if no such scaling is possible for this subgroup.",30,null],[11,"powf","","Raises the scaling to a power. The result must be equivalent to `self.to_superset().powf(n)`. Returns `None` if the result is not representable by `Self`.",30,null],[11,"scale_between","","The scaling required to make `a` have the same norm as `b`, i.e., `|b| = |a| * norm_ratio(a, b)`.",30,null],[11,"powf","","Raises the translation to a power. The result must be equivalent to `self.to_superset() * n`.  Returns `None` if the result is not representable by `Self`.",32,null],[11,"translation_between","","The translation needed to make `a` coincide with `b`, i.e., `b = a * translation_to(a, b)`.",32,{"inputs":[{"name":"e"},{"name":"e"}],"output":{"name":"option"}}],[11,"get","","Gets the component at row `i` and column `j` of this matrix.",35,null],[11,"set_row","","Sets the i-th row of this matrix.",36,null],[11,"set_column","","Sets the i-th col of this matrix.",36,null],[11,"set","","Sets the component at row `i` and column `j` of this matrix.",36,null],[11,"dimension","","The number of rows or column of this matrix.",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"transpose_mut","","In-place transposition.",37,{"inputs":[{"name":"self"}],"output":null}],[11,"set_diagonal","","Sets the matrix diagonal.",38,null]],"paths":[[3,"Id"],[3,"Additive"],[3,"Multiplicative"],[8,"Inverse"],[8,"Operator"],[8,"Identity"],[8,"SubsetOf"],[8,"SupersetOf"],[8,"AbstractMagma"],[8,"AbstractQuasigroup"],[8,"AbstractSemigroup"],[8,"AbstractMonoid"],[8,"AbstractGroupAbelian"],[8,"AbstractRing"],[8,"AbstractRingCommutative"],[8,"AbstractModule"],[8,"MeetSemilattice"],[8,"JoinSemilattice"],[8,"Lattice"],[8,"Module"],[8,"Real"],[8,"VectorSpace"],[8,"NormedSpace"],[8,"InnerSpace"],[8,"FiniteDimVectorSpace"],[8,"FiniteDimInnerSpace"],[8,"AffineSpace"],[8,"EuclideanSpace"],[8,"Transformation"],[8,"AffineTransformation"],[8,"Scaling"],[8,"Similarity"],[8,"Translation"],[8,"Rotation"],[8,"ProjectiveTransformation"],[8,"Matrix"],[8,"MatrixMut"],[8,"SquareMatrix"],[8,"SquareMatrixMut"]]};
searchIndex["approx"] = {"doc":"A crate that provides facilities for testing the approximate equality of floating-point based types, using either relative difference, or units in the last place (ULPs) comparisons.","items":[[3,"Relative","approx","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",0,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",0,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",0,null],[12,"max_relative","","The relative tolerance for testing values that are far-apart.",0,null],[3,"Ulps","","The requisite parameters for testing for approximate equality.",null,null],[12,"lhs","","The left-hand side of the approximate equality comparison.",1,null],[12,"rhs","","The right-hand side of the approximate equality comparison.",1,null],[12,"epsilon","","The tolerance to use when testing values that are close together.",1,null],[12,"max_ulps","","The ULPs to tolerate when testing values that are far-apart.",1,null],[8,"ApproxEq","","Equality comparisons based on floating point tolerances.",null,null],[16,"Epsilon","","Used for specifying relative comparisons.",2,null],[10,"default_epsilon","","The default tolerance to use when testing values that are close together.",2,null],[10,"default_max_relative","","The default relative tolerance for testing values that are far-apart.",2,null],[10,"default_max_ulps","","The default ULPs to tolerate when testing values that are far-apart.",2,{"inputs":[],"output":{"name":"u32"}}],[10,"relative_eq","","A test for equality that uses a relative comparison if the values are far apart.",2,null],[11,"relative_ne","","The inverse of `ApproxEq::relative_eq`.",2,null],[10,"ulps_eq","","A test for equality that uses units in the last place (ULP) if the values are far apart.",2,null],[11,"ulps_ne","","The inverse of `ApproxEq::ulps_eq`.",2,null],[11,"new","","The beginning of a chained equality expression, using a relative based comparison.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"relative"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",0,null],[11,"max_relative","","Replace the maximum relative value with the one specified.",0,null],[11,"eq","","Peform the equality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","The beginning of a chained equality expression, using an ULPs based comparison.",1,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ulps"}}],[11,"epsilon","","Replace the epsilon value with the one specified.",1,null],[11,"max_ulps","","Replace the max ulps value with the one specified.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"ulps"}}],[11,"eq","","Peform the equality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","Peform the inequality comparison",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"relative_eq","","Predicate for testing the approximate equality of two values.",null,null],[14,"relative_ne","","Predicate for testing the approximate inequality of two values.",null,null],[14,"assert_relative_eq","","",null,null],[14,"assert_relative_ne","","",null,null],[14,"ulps_eq","","Predicate for testing the approximate equality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"ulps_ne","","Predicate for testing the approximate inequality of two values using a maximum ULPs (Units in Last Place).",null,null],[14,"assert_ulps_eq","","",null,null],[14,"assert_ulps_ne","","",null,null]],"paths":[[3,"Relative"],[3,"Ulps"],[8,"ApproxEq"]]};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary serialization strategy.","items":[[3,"RefBox","bincode","A struct for encoding nested reference types.",null,null],[3,"StrBox","","Like a RefBox, but encoding from a `str` and decoedes to a `String`.",null,null],[3,"SliceBox","","Like a RefBox, but encodes from a `[T]` and encodes to a `Vec<T>`.",null,null],[4,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[13,"Infinite","","",0,null],[13,"Bounded","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"refbox"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"refbox"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"strbox"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"strbox"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"slicebox"}],"output":{"name":"ordering"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"slicebox"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",1,{"inputs":[{"name":"t"}],"output":{"name":"refbox"}}],[11,"take","","Takes the value out of this refbox.",1,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"try_take","","Tries to take the value out of this refbox.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new StrBox that looks at a borrowed value.",2,{"inputs":[{"name":"str"}],"output":{"name":"strbox"}}],[11,"into_string","","Extract a String from a StrBox.",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_owned","","Convert to an Owned `SliceBox`.",2,{"inputs":[{"name":"self"}],"output":{"name":"strbox"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"boxed","","Creates a new StrBox made from an allocated String.",2,{"inputs":[{"name":"string"}],"output":{"name":"strbox"}}],[11,"take","","Takes the value out of this refbox.",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"try_take","","Tries to take the value out of this refbox.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",3,null],[11,"into_vec","","Extract a `Vec<T>` from a `SliceBox`.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_owned","","Convert to an Owned `SliceBox`.",3,{"inputs":[{"name":"self"}],"output":{"name":"slicebox"}}],[11,"boxed","","Creates a new SliceBox made from an allocated `Vec<T>`.",3,{"inputs":[{"name":"vec"}],"output":{"name":"slicebox"}}],[11,"take","","Takes the value out of this refbox.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"try_take","","Tries to take the value out of this refbox.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",3,null],[0,"rustc_serialize","","A collection of serialization and deserialization functions that use the `rustc_serialize` crate for the encodable and decodable implementation.",null,null],[3,"SizeChecker","bincode::rustc_serialize","",null,null],[12,"size_limit","","",4,null],[12,"written","","",4,null],[3,"EncoderWriter","","An Encoder that encodes values directly into a Writer.",null,null],[3,"DecoderReader","","A Decoder that reads bytes from a buffer.",null,null],[3,"InvalidEncoding","","",null,null],[12,"desc","","",5,null],[12,"detail","","",5,null],[4,"EncodingError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",6,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",6,null],[4,"DecodingError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used during decoding, that error will be stored and returned here.",7,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid encoding, this error will be returned.  This error is only possible if a stream is corrupted.  A stream produced from `encode` or `encode_into` should **never** produce an InvalidEncoding error.",7,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this error is returned.",7,null],[5,"encode","","Encodes an encodable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode","","Decodes a slice of bytes into an object.",null,null],[5,"encode_into","","Encodes an object directly into a `Writer`.",null,{"inputs":[{"name":"t"},{"name":"w"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode_from","","Decoes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decodingresult"}}],[5,"encoded_size","","Returns the size that an object would be if encoded using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"encoded_size_bounded","","Given a maximum size limit, check how large an object would be if it were to be encoded.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidencoding"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"invalidencoding"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"invalidencoding"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",7,{"inputs":[{"name":"ioerror"}],"output":{"name":"decodingerror"}}],[11,"new","","",8,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decoderreader"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read_nil","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_usize","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_u64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_u32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_u16","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_u8","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_isize","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_i64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_i32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_i16","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_i8","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_bool","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_f64","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_f32","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_char","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_str","","",8,{"inputs":[{"name":"self"}],"output":{"name":"decodingresult"}}],[11,"read_enum","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_enum_variant","","",8,null],[11,"read_enum_variant_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_enum_struct_variant","","",8,null],[11,"read_enum_struct_variant_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_struct_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_tuple_struct_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_option","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_seq","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_seq_elt","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_map","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_map_elt_key","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"read_map_elt_val","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decodingresult"}}],[11,"error","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodingerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",9,{"inputs":[{"name":"w"}],"output":{"name":"encoderwriter"}}],[11,"new","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"sizechecker"}}],[11,"emit_nil","","",9,{"inputs":[{"name":"self"}],"output":{"name":"encodingresult"}}],[11,"emit_usize","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encodingresult"}}],[11,"emit_u64","","",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encodingresult"}}],[11,"emit_u32","","",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encodingresult"}}],[11,"emit_u16","","",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encodingresult"}}],[11,"emit_u8","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encodingresult"}}],[11,"emit_isize","","",9,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encodingresult"}}],[11,"emit_i64","","",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encodingresult"}}],[11,"emit_i32","","",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encodingresult"}}],[11,"emit_i16","","",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encodingresult"}}],[11,"emit_i8","","",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encodingresult"}}],[11,"emit_bool","","",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encodingresult"}}],[11,"emit_f64","","",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encodingresult"}}],[11,"emit_f32","","",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encodingresult"}}],[11,"emit_char","","",9,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encodingresult"}}],[11,"emit_str","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encodingresult"}}],[11,"emit_enum","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant_arg","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant_field","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct_field","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_arg","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct_arg","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option_none","","",9,{"inputs":[{"name":"self"}],"output":{"name":"encodingresult"}}],[11,"emit_option_some","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq_elt","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_key","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_val","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_nil","","",4,{"inputs":[{"name":"self"}],"output":{"name":"encodingresult"}}],[11,"emit_usize","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encodingresult"}}],[11,"emit_u64","","",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encodingresult"}}],[11,"emit_u32","","",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encodingresult"}}],[11,"emit_u16","","",4,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encodingresult"}}],[11,"emit_u8","","",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encodingresult"}}],[11,"emit_isize","","",4,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encodingresult"}}],[11,"emit_i64","","",4,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encodingresult"}}],[11,"emit_i32","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encodingresult"}}],[11,"emit_i16","","",4,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encodingresult"}}],[11,"emit_i8","","",4,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encodingresult"}}],[11,"emit_bool","","",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encodingresult"}}],[11,"emit_f64","","",4,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encodingresult"}}],[11,"emit_f32","","",4,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encodingresult"}}],[11,"emit_char","","",4,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encodingresult"}}],[11,"emit_str","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encodingresult"}}],[11,"emit_enum","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_variant_arg","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_enum_struct_variant_field","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_struct_field","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_arg","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_tuple_struct_arg","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_option_none","","",4,{"inputs":[{"name":"self"}],"output":{"name":"encodingresult"}}],[11,"emit_option_some","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_seq_elt","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_key","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[11,"emit_map_elt_val","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encodingresult"}}],[6,"EncodingResult","","",null,null],[6,"DecodingResult","","",null,null],[0,"serde","bincode","A collection of serialization and deserialization functions that use the `serde` crate for the serializable and deserializable implementation.",null,null],[3,"Deserializer","bincode::serde","A Deserializer that reads bytes from a buffer.",null,null],[3,"InvalidEncoding","","",null,null],[12,"desc","","",10,null],[12,"detail","","",10,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"DeserializeError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used during decoding, that error will be stored and returned here.",11,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid encoding, this error will be returned.  This error is only possible if a stream is corrupted.  A stream produced from `encode` or `encode_into` should **never** produce an InvalidEncoding error.",11,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this error is returned.",11,null],[13,"Serde","","",11,null],[4,"SerializeError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",12,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",12,null],[13,"Custom","","A custom error message",12,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it were to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializeresult"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"invalidencoding"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"invalidencoding"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"invalidencoding"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",11,{"inputs":[{"name":"ioerror"}],"output":{"name":"deserializeerror"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"deserializeerror"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",11,{"inputs":[{"name":"t"}],"output":{"name":"deserializeerror"}}],[11,"end_of_stream","","",11,{"inputs":[],"output":{"name":"deserializeerror"}}],[11,"new","","",13,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializer"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deserialize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_usize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_isize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_enum","","",13,null],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_seq_fixed_size","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"deserializeresult"}}],[11,"visit_variant","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",13,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",14,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"serialize_unit","","",14,{"inputs":[{"name":"self"}],"output":{"name":"serializeresult"}}],[11,"serialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"serializeresult"}}],[11,"serialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"serializeresult"}}],[11,"serialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"serializeresult"}}],[11,"serialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"serializeresult"}}],[11,"serialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"serializeresult"}}],[11,"serialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"serializeresult"}}],[11,"serialize_usize","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"serializeresult"}}],[11,"serialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"serializeresult"}}],[11,"serialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"serializeresult"}}],[11,"serialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"serializeresult"}}],[11,"serialize_isize","","",14,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"serializeresult"}}],[11,"serialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"serializeresult"}}],[11,"serialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"serializeresult"}}],[11,"serialize_str","","",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"serializeresult"}}],[11,"serialize_char","","",14,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"serializeresult"}}],[11,"serialize_bytes","","",14,null],[11,"serialize_none","","",14,{"inputs":[{"name":"self"}],"output":{"name":"serializeresult"}}],[11,"serialize_some","","",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"serializeresult"}}],[11,"serialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"serializeresult"}}],[11,"serialize_seq_elt","","",14,null],[11,"serialize_seq_end","","",14,null],[11,"serialize_seq_fixed_size","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_tuple_elt","","",14,null],[11,"serialize_tuple_end","","",14,null],[11,"serialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_tuple_struct_elt","","",14,null],[11,"serialize_tuple_struct_end","","",14,null],[11,"serialize_tuple_variant","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_tuple_variant_elt","","",14,null],[11,"serialize_tuple_variant_end","","",14,null],[11,"serialize_map","","",14,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"serializeresult"}}],[11,"serialize_map_key","","",14,null],[11,"serialize_map_value","","",14,null],[11,"serialize_map_end","","",14,null],[11,"serialize_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_struct_elt","","",14,null],[11,"serialize_struct_end","","",14,null],[11,"serialize_struct_variant","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"serializeresult"}}],[11,"serialize_struct_variant_elt","","",14,null],[11,"serialize_struct_variant_end","","",14,null],[11,"serialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"serializeresult"}}],[11,"serialize_newtype_variant","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"serializeresult"}}],[11,"serialize_unit_variant","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"serializeresult"}}],[6,"DeserializeResult","","",null,null],[6,"SerializeResult","","",null,null],[11,"clone","bincode","",0,{"inputs":[{"name":"self"}],"output":{"name":"sizelimit"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"sizelimit"}],"output":{"name":"bool"}}]],"paths":[[4,"SizeLimit"],[3,"RefBox"],[3,"StrBox"],[3,"SliceBox"],[3,"SizeChecker"],[3,"InvalidEncoding"],[4,"EncodingError"],[4,"DecodingError"],[3,"DecoderReader"],[3,"EncoderWriter"],[3,"InvalidEncoding"],[4,"DeserializeError"],[4,"SerializeError"],[3,"Deserializer"],[3,"Serializer"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["chrono"] = {"doc":"Chrono 0.3.0","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",0,null],[13,"Tue","","Tuesday.",0,null],[13,"Wed","","Wednesday.",0,null],[13,"Thu","","Thursday.",0,null],[13,"Fri","","Friday.",0,null],[13,"Sat","","Saturday.",0,null],[13,"Sun","","Sunday.",0,null],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",null,null],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",1,null],[13,"Single","","Given local time representation has a single unique result.",1,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",1,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",2,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"fix","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",3,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",3,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_offset","","",3,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"fix","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",6,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",6,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",6,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",6,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"localresult"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",7,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",7,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",7,null],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of *seconds* in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",8,null],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of *seconds* in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",8,null],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",9,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",9,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",9,null],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset. The local date should be constructed via the `TimeZone` trait.",10,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",10,null],[11,"timezone","","Retrieves an associated time zone.",10,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",10,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date.",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",10,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",10,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",10,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",10,null],[11,"with_year","","",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",11,null],[11,"date","","Retrieves a date component.",11,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",11,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",11,null],[11,"timezone","","Retrieves an associated time zone.",11,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",11,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",11,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",11,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",11,null],[11,"with_year","","",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"InternalNumeric","chrono::format","An opaque type representing numeric item types for internal uses only.",null,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",null,null],[3,"ParseError","","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",12,null],[13,"Zero","","Zero (`0`) padding.",12,null],[13,"Space","","Space padding.",12,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=âˆž). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",13,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=âˆž). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",13,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"Month","","Month (FW=PW=2).",13,null],[13,"Day","","Day of the month (FW=PW=2).",13,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",13,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",13,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",13,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",13,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",13,null],[13,"Ordinal","","Day of the year (FW=PW=3).",13,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",13,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",13,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",13,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",13,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is *not* left-aligned; see also `Fixed::Nanosecond`.",13,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=âˆž). For formatting, it assumes UTC upon the absence of time zone offset.",13,null],[13,"Internal","","Internal uses only.",13,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",14,null],[13,"LongMonthName","","Full month names.",14,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",14,null],[13,"LongWeekdayName","","Full day of the week names.",14,null],[13,"LowerAmPm","","AM/PM.",14,null],[13,"UpperAmPm","","AM/PM.",14,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",14,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",14,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",14,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",14,null],[13,"TimezoneName","","Timezone name.",14,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",14,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",14,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",14,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",14,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",14,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",14,null],[13,"Internal","","Internal uses only.",14,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",15,null],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",15,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",15,null],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",15,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",15,null],[13,"Fixed","","Fixed-format item.",15,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",15,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items. They can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",16,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear","","Year in the ISO week date.",16,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"month","","Month (1--12).",16,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",16,null],[12,"weekday","","Day of the week.",16,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",16,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",16,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",16,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",16,null],[12,"minute","","Minute number (0--59).",16,null],[12,"second","","Second number (0--60, accounting for leap seconds).",16,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",16,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",16,null],[12,"offset","","Offset from the local time to UTC, in seconds.",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"parsed"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",16,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",16,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",16,{"inputs":[{"name":"self"},{"name":"tz"}],"output":{"name":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",17,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"internalnumeric"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"internalfixed"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",21,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",21,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",22,null],[10,"month","","Returns the month number starting from 1.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",22,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",22,null],[10,"with_year","","Makes a new value with the year number changed.",22,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",23,null],[10,"minute","","Returns the minute number from 0 to 59.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"succ","","The next day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",24,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",24,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",24,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",24,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",24,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"div","","",24,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"mul","","",24,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"neg","","",24,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","chrono::naive::time","",8,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"add","chrono::naive::datetime","",9,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}],[11,"add","chrono::datetime","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}]],"paths":[[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"]]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an `enum` declaration and automatically adds an implementation of `num::FromPrimitive` (reexported here), to allow conversion from primitive integers to the enum.  It therefore provides an alternative to the built-in `#[derive(FromPrimitive)]`, which requires the unstable `std::num::FromPrimitive` and is disabled in Rust 1.0.","items":[[4,"Option","enum_primitive","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive","","Wrap this macro around an `enum` declaration to get an automatically generated implementation of `num::FromPrimitive`.",null,null],[11,"is_some","","Returns `true` if the option is a `Some` value.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns a `default` (if not).",0,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a `default` (if not).",0,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err)`][Err].",0,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to [`Ok(v)`] and `None` to [`Err(err())`][Err].",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the wrapped value and returns the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","","Returns None.",0,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further elements are taken, and the `None` is returned. Should no `None` occur, a container with the values of each `Option` is returned.",0,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}]],"paths":[[4,"Option"],[8,"FromPrimitive"]]};
searchIndex["generic_array"] = {"doc":"This crate implements a structure that can be used as a generic array type.use  Core Rust array types `[T; N]` can't be used generically with respect to `N`, so for example this:","items":[[3,"GenericArrayImplEven","generic_array","Internal type used to generate a struct of appropriate size",null,null],[3,"GenericArrayImplOdd","","Internal type used to generate a struct of appropriate size",null,null],[3,"GenericArray","","Struct representing a generic array - GenericArray<T, N> works like [T; N]",null,null],[0,"arr","","",null,null],[6,"Inc","generic_array::arr","Helper type for `arr!` macro",null,null],[8,"AddLength","","Helper trait for `arr!` macro",null,null],[16,"Output","","",0,null],[8,"ArrayLength","generic_array","Trait making GenericArray work, marking types to be used as length of an array",null,null],[16,"ArrayType","","Associated type representing the array type for the number",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"genericarrayimpleven"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"genericarrayimplodd"}}],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"new","","Function constructing an array filled with default values",4,{"inputs":[],"output":{"name":"genericarray"}}],[11,"from_slice","","Function constructing an array from a slice; the length of the slice must be equal to the length of the array",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"genericarray"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"arr_impl","","Proper implementation of `arr!`",null,null],[14,"arr","","Macro allowing for easy generation of Generic Arrays.",null,null]],"paths":[[8,"AddLength"],[8,"ArrayLength"],[3,"GenericArrayImplEven"],[3,"GenericArrayImplOdd"],[3,"GenericArray"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",44,null],[12,"aio_lio_opcode","","",44,null],[12,"aio_reqprio","","",44,null],[12,"aio_buf","","",44,null],[12,"aio_nbytes","","",44,null],[12,"aio_sigevent","","",44,null],[12,"aio_offset","","",44,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",45,null],[12,"e_exit","","",45,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",46,null],[12,"tv_usec","","",46,null],[3,"utmpx","","",null,null],[12,"ut_type","","",47,null],[12,"ut_pid","","",47,null],[12,"ut_line","","",47,null],[12,"ut_id","","",47,null],[12,"ut_user","","",47,null],[12,"ut_host","","",47,null],[12,"ut_exit","","",47,null],[12,"ut_session","","",47,null],[12,"ut_tv","","",47,null],[12,"ut_addr_v6","","",47,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",48,null],[12,"sa_mask","","",48,null],[12,"sa_flags","","",48,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",49,null],[12,"ss_flags","","",49,null],[12,"ss_size","","",49,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",50,null],[12,"si_errno","","",50,null],[12,"si_code","","",50,null],[12,"_pad","","",50,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",51,null],[12,"gl_pathv","","",51,null],[12,"gl_offs","","",51,null],[12,"gl_flags","","",51,null],[3,"ucred","","",null,null],[12,"pid","","",52,null],[12,"uid","","",52,null],[12,"gid","","",52,null],[3,"statfs","","",null,null],[12,"f_type","","",53,null],[12,"f_bsize","","",53,null],[12,"f_blocks","","",53,null],[12,"f_bfree","","",53,null],[12,"f_bavail","","",53,null],[12,"f_files","","",53,null],[12,"f_ffree","","",53,null],[12,"f_fsid","","",53,null],[12,"f_namelen","","",53,null],[12,"f_frsize","","",53,null],[3,"msghdr","","",null,null],[12,"msg_name","","",54,null],[12,"msg_namelen","","",54,null],[12,"msg_iov","","",54,null],[12,"msg_iovlen","","",54,null],[12,"msg_control","","",54,null],[12,"msg_controllen","","",54,null],[12,"msg_flags","","",54,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",55,null],[12,"cmsg_level","","",55,null],[12,"cmsg_type","","",55,null],[3,"termios","","",null,null],[12,"c_iflag","","",56,null],[12,"c_oflag","","",56,null],[12,"c_cflag","","",56,null],[12,"c_lflag","","",56,null],[12,"c_line","","",56,null],[12,"c_cc","","",56,null],[12,"c_ispeed","","",56,null],[12,"c_ospeed","","",56,null],[3,"flock","","",null,null],[12,"l_type","","",57,null],[12,"l_whence","","",57,null],[12,"l_start","","",57,null],[12,"l_len","","",57,null],[12,"l_pid","","",57,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",58,null],[12,"loads","","",58,null],[12,"totalram","","",58,null],[12,"freeram","","",58,null],[12,"sharedram","","",58,null],[12,"bufferram","","",58,null],[12,"totalswap","","",58,null],[12,"freeswap","","",58,null],[12,"procs","","",58,null],[12,"pad","","",58,null],[12,"totalhigh","","",58,null],[12,"freehigh","","",58,null],[12,"mem_unit","","",58,null],[12,"_f","","",58,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",59,null],[12,"msg_stime","","",59,null],[12,"msg_rtime","","",59,null],[12,"msg_ctime","","",59,null],[12,"msg_qnum","","",59,null],[12,"msg_qbytes","","",59,null],[12,"msg_lspid","","",59,null],[12,"msg_lrpid","","",59,null],[3,"stat","","",null,null],[12,"st_dev","","",60,null],[12,"st_ino","","",60,null],[12,"st_nlink","","",60,null],[12,"st_mode","","",60,null],[12,"st_uid","","",60,null],[12,"st_gid","","",60,null],[12,"st_rdev","","",60,null],[12,"st_size","","",60,null],[12,"st_blksize","","",60,null],[12,"st_blocks","","",60,null],[12,"st_atime","","",60,null],[12,"st_atime_nsec","","",60,null],[12,"st_mtime","","",60,null],[12,"st_mtime_nsec","","",60,null],[12,"st_ctime","","",60,null],[12,"st_ctime_nsec","","",60,null],[3,"stat64","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",62,null],[12,"exponent","","",62,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",63,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",64,null],[12,"swd","","",64,null],[12,"ftw","","",64,null],[12,"fop","","",64,null],[12,"rip","","",64,null],[12,"rdp","","",64,null],[12,"mxcsr","","",64,null],[12,"mxcr_mask","","",64,null],[12,"_st","","",64,null],[12,"_xmm","","",64,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",65,null],[12,"fpregs","","",65,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[3,"ipc_perm","","",null,null],[12,"__key","","",67,null],[12,"uid","","",67,null],[12,"gid","","",67,null],[12,"cuid","","",67,null],[12,"cgid","","",67,null],[12,"mode","","",67,null],[12,"__seq","","",67,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",68,null],[12,"shm_segsz","","",68,null],[12,"shm_atime","","",68,null],[12,"shm_dtime","","",68,null],[12,"shm_ctime","","",68,null],[12,"shm_cpid","","",68,null],[12,"shm_lpid","","",68,null],[12,"shm_nattch","","",68,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["nalgebra"] = {"doc":"nalgebra","items":[[3,"Id","nalgebra","The universal identity element wrt. a given operator, usually noted `Id` with a context-dependent subscript.",null,null],[5,"id","","Gets the ubiquitous multiplicative identity element.",null,{"inputs":[],"output":{"name":"id"}}],[5,"one","","Gets the multiplicative identity element.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Gets the additive identity element.",null,{"inputs":[],"output":{"name":"t"}}],[5,"origin","","Gets the origin of the given point.",null,{"inputs":[],"output":{"name":"p"}}],[5,"dimension","","The dimension of the given algebraic entity seen as a vector space.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"wrap","","Wraps `val` into the range `[min, max]` using modular arithmetics.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"clamp","","Returns a reference to the input value clamped to the interval `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"abs","","The absolute value of `a`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf_sup","","Returns simultaneously the infimum and supremum of `a` and `b`.",null,null],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a < b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a <= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a > b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a >= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to `min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_sort2","","Sorts two values in increasing order using a partial ordering.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"try_inverse","","Tries to gets an inverted copy of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"inverse","","Computes the multiplicative inverse of an (always invertible) algebraic entity.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"dot","","Computes the dot product of two vectors.",null,null],[5,"angle","","Computes the smallest angle between two vectors.",null,null],[5,"norm","","Computes the L2 (euclidean) norm of a vector.",null,null],[5,"norm_squared","","Computes the squared L2 (euclidean) norm of the vector `v`.",null,null],[5,"normalize","","Computes the normalized version of the vector `v`.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"try_normalize","","Computes the normalized version of the vector `v` or returns `None` if its norm is smaller than `min_norm`.",null,null],[5,"center","","The center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"distance","","The distance between two points.",null,null],[5,"distance_squared","","The squared distance between two points.",null,null],[5,"convert","","Converts an object from one type to an equivalent or more general one.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"try_convert","","Attempts to convert an object to a more specific one.",null,{"inputs":[{"name":"from"}],"output":{"name":"option"}}],[5,"is_convertible","","Indicates if `::try_convert` will succeed without actually performing the conversion.",null,{"inputs":[{"name":"from"}],"output":{"name":"bool"}}],[5,"convert_unchecked","","Use with care! Same as `try_convert` but without any property checks.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"convert_ref","","Converts an object from one type to an equivalent or more general one.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[5,"try_convert_ref","","Attempts to convert an object to a more specific one.",null,{"inputs":[{"name":"from"}],"output":{"name":"option"}}],[5,"convert_ref_unchecked","","Use with care! Same as `try_convert` but without any property checks.",null,{"inputs":[{"name":"from"}],"output":{"name":"to"}}],[0,"core","","[Reexported at the root of this crate.] Data structures for vector and matrix computations.",null,null],[3,"Matrix","nalgebra::core","The most generic column-major matrix (and vector) type.",null,null],[12,"data","","The data storage that contains all the matrix components and informations about its number of rows and column (if needed).",0,null],[3,"Unit","","A wrapper that ensures the undelying algebraic entity has a unit norm.",null,null],[3,"SliceStorage","","A matrix data storage for a matrix slice. Only contains an internal reference to another matrix data storage.",null,null],[3,"SliceStorageMut","","A mutable matrix data storage for mutable matrix slice. Only contains an internal mutable reference to another matrix data storage.",null,null],[3,"MatrixArray","","A array-based statically sized matrix data storage.",null,null],[3,"MatrixVec","","A Vec-based matrix data storage. It may be dynamically-sized.",null,null],[0,"dimension","","Traits and tags for identifying the dimension of all algebraic entities.",null,null],[3,"Dynamic","nalgebra::core::dimension","Dim of dynamically-sized algebraic entities.",null,null],[3,"U1","","",null,null],[3,"U0","","",null,null],[3,"U2","","",null,null],[3,"U3","","",null,null],[3,"U4","","",null,null],[3,"U5","","",null,null],[3,"U6","","",null,null],[3,"U7","","",null,null],[3,"U8","","",null,null],[3,"U9","","",null,null],[3,"U10","","",null,null],[3,"U11","","",null,null],[3,"U12","","",null,null],[3,"U13","","",null,null],[3,"U14","","",null,null],[3,"U15","","",null,null],[3,"U16","","",null,null],[3,"U17","","",null,null],[3,"U18","","",null,null],[3,"U19","","",null,null],[3,"U20","","",null,null],[3,"U21","","",null,null],[3,"U22","","",null,null],[3,"U23","","",null,null],[3,"U24","","",null,null],[3,"U25","","",null,null],[3,"U26","","",null,null],[3,"U27","","",null,null],[3,"U28","","",null,null],[3,"U29","","",null,null],[3,"U30","","",null,null],[3,"U31","","",null,null],[3,"U32","","",null,null],[3,"U33","","",null,null],[3,"U34","","",null,null],[3,"U35","","",null,null],[3,"U36","","",null,null],[3,"U37","","",null,null],[3,"U38","","",null,null],[3,"U39","","",null,null],[3,"U40","","",null,null],[3,"U41","","",null,null],[3,"U42","","",null,null],[3,"U43","","",null,null],[3,"U44","","",null,null],[3,"U45","","",null,null],[3,"U46","","",null,null],[3,"U47","","",null,null],[3,"U48","","",null,null],[3,"U49","","",null,null],[3,"U50","","",null,null],[3,"U51","","",null,null],[3,"U52","","",null,null],[3,"U53","","",null,null],[3,"U54","","",null,null],[3,"U55","","",null,null],[3,"U56","","",null,null],[3,"U57","","",null,null],[3,"U58","","",null,null],[3,"U59","","",null,null],[3,"U60","","",null,null],[3,"U61","","",null,null],[3,"U62","","",null,null],[3,"U63","","",null,null],[3,"U64","","",null,null],[3,"U65","","",null,null],[3,"U66","","",null,null],[3,"U67","","",null,null],[3,"U68","","",null,null],[3,"U69","","",null,null],[3,"U70","","",null,null],[3,"U71","","",null,null],[3,"U72","","",null,null],[3,"U73","","",null,null],[3,"U74","","",null,null],[3,"U75","","",null,null],[3,"U76","","",null,null],[3,"U77","","",null,null],[3,"U78","","",null,null],[3,"U79","","",null,null],[3,"U80","","",null,null],[3,"U81","","",null,null],[3,"U82","","",null,null],[3,"U83","","",null,null],[3,"U84","","",null,null],[3,"U85","","",null,null],[3,"U86","","",null,null],[3,"U87","","",null,null],[3,"U88","","",null,null],[3,"U89","","",null,null],[3,"U90","","",null,null],[3,"U91","","",null,null],[3,"U92","","",null,null],[3,"U93","","",null,null],[3,"U94","","",null,null],[3,"U95","","",null,null],[3,"U96","","",null,null],[3,"U97","","",null,null],[3,"U98","","",null,null],[3,"U99","","",null,null],[3,"U100","","",null,null],[3,"U101","","",null,null],[3,"U102","","",null,null],[3,"U103","","",null,null],[3,"U104","","",null,null],[3,"U105","","",null,null],[3,"U106","","",null,null],[3,"U107","","",null,null],[3,"U108","","",null,null],[3,"U109","","",null,null],[3,"U110","","",null,null],[3,"U111","","",null,null],[3,"U112","","",null,null],[3,"U113","","",null,null],[3,"U114","","",null,null],[3,"U115","","",null,null],[3,"U116","","",null,null],[3,"U117","","",null,null],[3,"U118","","",null,null],[3,"U119","","",null,null],[3,"U120","","",null,null],[3,"U121","","",null,null],[3,"U122","","",null,null],[3,"U123","","",null,null],[3,"U124","","",null,null],[3,"U125","","",null,null],[3,"U126","","",null,null],[3,"U127","","",null,null],[6,"DimSum","","",null,null],[6,"DimNameSum","","",null,null],[6,"DimProd","","",null,null],[6,"DimNameProd","","",null,null],[6,"DimDiff","","",null,null],[6,"DimNameDiff","","",null,null],[6,"DimQuot","","",null,null],[6,"DimNameQuot","","",null,null],[8,"IsDynamic","","Trait implemented by `Dynamic`.",null,null],[8,"IsNotStaticOne","","Trait implemented by `Dynamic` and type-level integers different from `U1`.",null,null],[8,"Dim","","Trait implemented by any type that can be used as a dimension. This includes type-level integers and `Dynamic` (for dimensions not known at compile-time).",null,null],[10,"try_to_usize","","Gets the compile-time value of `Self`. Returns `None` if it is not known, i.e., if `Self = Dynamic`.",1,{"inputs":[],"output":{"name":"option"}}],[10,"value","","Gets the run-time value of `self`. For type-level integers, this is the same as `Self::try_to_usize().unwrap()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"from_usize","","Builds an instance of `Self` from a run-time value. Panics if `Self` is a type-level integer and `dim != Self::try_to_usize().unwrap()`.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[8,"DimAdd","","",null,null],[16,"Output","","",2,null],[10,"add","","",2,null],[8,"DimNameAdd","","",null,null],[16,"Output","","",3,null],[10,"add","","",3,null],[8,"DimMul","","",null,null],[16,"Output","","",4,null],[10,"mul","","",4,null],[8,"DimNameMul","","",null,null],[16,"Output","","",5,null],[10,"mul","","",5,null],[8,"DimSub","","",null,null],[16,"Output","","",6,null],[10,"sub","","",6,null],[8,"DimNameSub","","",null,null],[16,"Output","","",7,null],[10,"sub","","",7,null],[8,"DimDiv","","",null,null],[16,"Output","","",8,null],[10,"div","","",8,null],[8,"DimNameDiv","","",null,null],[16,"Output","","",9,null],[10,"div","","",9,null],[8,"DimName","","Trait implemented exclusively by type-level integers.",null,null],[16,"Value","","",10,null],[10,"name","","The name of this dimension, i.e., the singleton `Self`.",10,{"inputs":[],"output":{"name":"self"}}],[11,"dim","","The value of this dimension.",10,{"inputs":[],"output":{"name":"usize"}}],[8,"NamedDim","","",null,null],[16,"Name","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"dynamic"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"dynamic"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"dynamic"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","A dynamic size equal to `value`.",12,{"inputs":[{"name":"usize"}],"output":{"name":"dynamic"}}],[11,"try_to_usize","","",12,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",12,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"mul","","",12,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"sub","","",12,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"div","","",12,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"dynamic"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u1"}}],[11,"hash","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"u1"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",13,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",13,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u0"}}],[11,"hash","","",14,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"u0"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",14,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u2"}}],[11,"hash","","",15,null],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"u2"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",15,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",15,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u3"}}],[11,"hash","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"u3"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",16,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u4"}}],[11,"hash","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"u4"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",17,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u5"}}],[11,"hash","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"u5"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",18,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u6"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"u6"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",19,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",19,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u7"}}],[11,"hash","","",20,null],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"u7"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",20,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",20,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"hash","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",21,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",21,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u9"}}],[11,"hash","","",22,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"u9"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",22,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",22,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u10"}}],[11,"hash","","",23,null],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"u10"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",23,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",23,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",23,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u11"}}],[11,"hash","","",24,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"u11"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",24,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",24,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u12"}}],[11,"hash","","",25,null],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"u12"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",25,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",25,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u13"}}],[11,"hash","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"u13"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",26,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",26,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",26,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u14"}}],[11,"hash","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"u14"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",27,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",27,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u15"}}],[11,"hash","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"u15"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",28,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",28,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",28,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"hash","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",29,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",29,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u17"}}],[11,"hash","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"u17"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",30,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",30,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",30,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u18"}}],[11,"hash","","",31,null],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"u18"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",31,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",31,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u19"}}],[11,"hash","","",32,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"u19"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",32,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u20"}}],[11,"hash","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"u20"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",33,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",33,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u21"}}],[11,"hash","","",34,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"u21"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",34,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",34,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",34,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u22"}}],[11,"hash","","",35,null],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"u22"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",35,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u23"}}],[11,"hash","","",36,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"u23"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",36,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",36,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u24"}}],[11,"hash","","",37,null],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"u24"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",37,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",37,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u25"}}],[11,"hash","","",38,null],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"u25"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",38,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",38,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u26"}}],[11,"hash","","",39,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"u26"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",39,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u27"}}],[11,"hash","","",40,null],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"u27"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",40,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",40,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u28"}}],[11,"hash","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"u28"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",41,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",41,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u29"}}],[11,"hash","","",42,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"u29"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",42,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",42,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u30"}}],[11,"hash","","",43,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"u30"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",43,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",43,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u31"}}],[11,"hash","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"u31"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",44,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",44,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",44,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",45,null],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",45,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",45,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u33"}}],[11,"hash","","",46,null],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"u33"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",46,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",46,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",46,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u34"}}],[11,"hash","","",47,null],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"u34"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",47,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",47,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u35"}}],[11,"hash","","",48,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"u35"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",48,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",48,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u36"}}],[11,"hash","","",49,null],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"u36"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",49,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",49,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u37"}}],[11,"hash","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"u37"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",50,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",50,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u38"}}],[11,"hash","","",51,null],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"u38"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",51,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",51,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u39"}}],[11,"hash","","",52,null],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"u39"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",52,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",52,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",52,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u40"}}],[11,"hash","","",53,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"u40"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",53,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",53,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u41"}}],[11,"hash","","",54,null],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"u41"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",54,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",54,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",54,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u42"}}],[11,"hash","","",55,null],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"u42"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",55,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",55,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u43"}}],[11,"hash","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"u43"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",56,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",56,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u44"}}],[11,"hash","","",57,null],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"u44"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",57,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u45"}}],[11,"hash","","",58,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"u45"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",58,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",58,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",58,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u46"}}],[11,"hash","","",59,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"u46"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",59,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",59,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u47"}}],[11,"hash","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"u47"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",60,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",60,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",60,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u48"}}],[11,"hash","","",61,null],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"u48"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",61,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",61,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",61,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u49"}}],[11,"hash","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"u49"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",62,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",62,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u50"}}],[11,"hash","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"u50"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",63,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u51"}}],[11,"hash","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"u51"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",64,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",64,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",64,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u52"}}],[11,"hash","","",65,null],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"u52"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",65,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",65,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",65,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u53"}}],[11,"hash","","",66,null],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"u53"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",66,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",66,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",66,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u54"}}],[11,"hash","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"u54"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",67,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",67,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u55"}}],[11,"hash","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"u55"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",68,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",68,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",68,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u56"}}],[11,"hash","","",69,null],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"u56"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",69,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",69,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",69,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u57"}}],[11,"hash","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"u57"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",70,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",70,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",70,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u58"}}],[11,"hash","","",71,null],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"u58"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",71,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",71,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",71,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u59"}}],[11,"hash","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"u59"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",72,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",72,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u60"}}],[11,"hash","","",73,null],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"u60"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",73,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",73,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",73,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"u61"}}],[11,"hash","","",74,null],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"u61"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",74,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",74,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",74,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"u62"}}],[11,"hash","","",75,null],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"u62"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",75,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",75,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",75,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"u63"}}],[11,"hash","","",76,null],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"u63"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",76,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",76,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"hash","","",77,null],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",77,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",77,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",77,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"u65"}}],[11,"hash","","",78,null],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"u65"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",78,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",78,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u66"}}],[11,"hash","","",79,null],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"u66"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",79,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",79,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"u67"}}],[11,"hash","","",80,null],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"u67"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",80,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",80,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"u68"}}],[11,"hash","","",81,null],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"u68"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",81,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",81,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",81,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u69"}}],[11,"hash","","",82,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"u69"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",82,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",82,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",82,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u70"}}],[11,"hash","","",83,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"u70"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",83,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",83,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",83,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u71"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"u71"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",84,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",84,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u72"}}],[11,"hash","","",85,null],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"u72"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",85,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",85,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u73"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"u73"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",86,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",86,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u74"}}],[11,"hash","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"u74"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",87,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",87,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u75"}}],[11,"hash","","",88,null],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"u75"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",88,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",88,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u76"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"u76"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",89,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",89,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u77"}}],[11,"hash","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"u77"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",90,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",90,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",90,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u78"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"u78"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",91,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",91,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",91,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u79"}}],[11,"hash","","",92,null],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"u79"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",92,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",92,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"u80"}}],[11,"hash","","",93,null],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"u80"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",93,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",93,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u81"}}],[11,"hash","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"u81"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",94,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",94,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u82"}}],[11,"hash","","",95,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"u82"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",95,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",95,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u83"}}],[11,"hash","","",96,null],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"u83"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",96,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",96,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u84"}}],[11,"hash","","",97,null],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"u84"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",97,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",97,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u85"}}],[11,"hash","","",98,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"u85"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",98,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",98,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u86"}}],[11,"hash","","",99,null],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"u86"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",99,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",99,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u87"}}],[11,"hash","","",100,null],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"u87"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",100,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",100,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u88"}}],[11,"hash","","",101,null],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"u88"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",101,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",101,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u89"}}],[11,"hash","","",102,null],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"u89"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",102,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",102,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",102,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u90"}}],[11,"hash","","",103,null],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"u90"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",103,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",103,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u91"}}],[11,"hash","","",104,null],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"u91"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",104,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",104,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u92"}}],[11,"hash","","",105,null],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"u92"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",105,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",105,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u93"}}],[11,"hash","","",106,null],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"u93"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",106,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",106,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u94"}}],[11,"hash","","",107,null],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"u94"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",107,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",107,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"u95"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"u95"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",108,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",108,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",108,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",108,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"u96"}}],[11,"hash","","",109,null],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"u96"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",109,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",109,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"u97"}}],[11,"hash","","",110,null],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"u97"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",110,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",110,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"u98"}}],[11,"hash","","",111,null],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"u98"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",111,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",111,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",111,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"u99"}}],[11,"hash","","",112,null],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"u99"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",112,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",112,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",112,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u100"}}],[11,"hash","","",113,null],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"u100"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",113,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",113,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",113,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u101"}}],[11,"hash","","",114,null],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"u101"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",114,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",114,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",114,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"u102"}}],[11,"hash","","",115,null],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"u102"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",115,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",115,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",115,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"u103"}}],[11,"hash","","",116,null],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"u103"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",116,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",116,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"u104"}}],[11,"hash","","",117,null],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"u104"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",117,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",117,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",117,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"u105"}}],[11,"hash","","",118,null],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"u105"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",118,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",118,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",118,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"u106"}}],[11,"hash","","",119,null],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"u106"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",119,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",119,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",119,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"u107"}}],[11,"hash","","",120,null],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"u107"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",120,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",120,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"u108"}}],[11,"hash","","",121,null],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"u108"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",121,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",121,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u109"}}],[11,"hash","","",122,null],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"u109"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",122,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",122,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",122,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",122,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"u110"}}],[11,"hash","","",123,null],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"u110"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",123,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",123,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"u111"}}],[11,"hash","","",124,null],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"u111"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",124,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",124,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"u112"}}],[11,"hash","","",125,null],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"u112"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",125,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",125,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",125,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"u113"}}],[11,"hash","","",126,null],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"u113"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",126,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",126,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",126,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u114"}}],[11,"hash","","",127,null],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"u114"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",127,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",127,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",127,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"u115"}}],[11,"hash","","",128,null],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"u115"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",128,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",128,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u116"}}],[11,"hash","","",129,null],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"u116"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",129,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",129,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",129,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u117"}}],[11,"hash","","",130,null],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"u117"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",130,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",130,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",130,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"u118"}}],[11,"hash","","",131,null],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"u118"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",131,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",131,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",131,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u119"}}],[11,"hash","","",132,null],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"u119"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",132,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",132,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",132,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"u120"}}],[11,"hash","","",133,null],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"u120"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",133,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",133,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",133,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"u121"}}],[11,"hash","","",134,null],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"u121"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",134,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",134,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",134,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u122"}}],[11,"hash","","",135,null],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"u122"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",135,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",135,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",135,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"u123"}}],[11,"hash","","",136,null],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"u123"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",136,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",136,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",136,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"u124"}}],[11,"hash","","",137,null],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"u124"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",137,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",137,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",137,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"u125"}}],[11,"hash","","",138,null],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"u125"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",138,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",138,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",138,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"u126"}}],[11,"hash","","",139,null],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"u126"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",139,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",139,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",139,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"u127"}}],[11,"hash","","",140,null],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"u127"}],"output":{"name":"bool"}}],[11,"try_to_usize","","",140,{"inputs":[],"output":{"name":"option"}}],[11,"from_usize","","",140,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"value","","",140,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",140,{"inputs":[],"output":{"name":"self"}}],[0,"constraint","nalgebra::core","Compatibility constraints between matrix shapes, e.g., for addition or multiplication.",null,null],[3,"ShapeConstraint","nalgebra::core::constraint","A type used in `where` clauses for enforcing constraints.",null,null],[8,"AreMultipliable","","Constraints `C1` and `R2` to be equivalent.",null,null],[8,"DimEq","","Constraints `D1` and `D2` to be equivalent.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",141,null],[8,"SameNumberOfRows","","Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of rows of a matrix.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",142,null],[8,"SameNumberOfColumns","","Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of columns of a matrix.",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",143,null],[8,"SameDimension","","Constraints D1 and D2 to be equivalent, where they both designate dimensions of algebraic entities (e.g. square matrices).",null,null],[16,"Representative","","This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level constant.",144,null],[0,"allocator","nalgebra::core","Abstract definition of a matrix data storage allocator.",null,null],[6,"SameShapeR","nalgebra::core::allocator","The number of rows of the result of a componentwise operation on two matrices.",null,null],[6,"SameShapeC","","The number of columns of the result of a componentwise operation on two matrices.",null,null],[8,"Allocator","","A matrix allocator of a memory buffer that may contain `R::to_usize() * C::to_usize()` elements of type `N`.",null,null],[16,"Buffer","","The type of buffer this allocator can instanciate.",145,null],[10,"allocate_uninitialized","","Allocates a buffer with the given number of rows and columns without initializing its content.",145,null],[10,"allocate_from_iterator","","Allocates a buffer initialized with the content of the given iterator.",145,null],[8,"OwnedAllocator","","A matrix data allocator dedicated to the given owned matrix storage.",null,null],[8,"SameShapeAllocator","","Restricts the given number of rows and columns to be respectively the same. Can only be used when `Self = SA::Alloc`.",null,null],[8,"SameShapeColumnVectorAllocator","","Restricts the given number of rows to be equal. Can only be used when `Self = SA::Alloc`.",null,null],[0,"storage","nalgebra::core","Abstract definition of a matrix data storage.",null,null],[6,"SumStorage","nalgebra::core::storage","The data storage for the sum of two matrices with dimensions `(R1, C1)` and `(R2, C2)`.",null,null],[6,"MulStorage","","The data storage for the multiplication of two matrices with dimensions `(R1, C1)` on the left hand side, and with `C2` columns on the right hand side.",null,null],[6,"TrMulStorage","","The data storage for the multiplication of two matrices with dimensions `(R1, C1)` on the left hand side, and with `C2` columns on the right hand side. The first matrix is implicitly transposed.",null,null],[6,"Owned","","The owned data storage that can be allocated from `S`.",null,null],[8,"Storage","","The trait shared by all matrix data storage.",null,null],[16,"RStride","","The static stride of this storage's rows.",146,null],[16,"CStride","","The static stride of this storage's columns.",146,null],[16,"Alloc","","The allocator for this family of storage.",146,null],[10,"into_owned","","Builds a matrix data storage that does not contain any reference.",146,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[10,"clone_owned","","Clones this data storage into one that does not contain any reference.",146,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[10,"ptr","","The matrix data pointer.",146,null],[10,"shape","","The dimension of the matrix at run-time. Arr length of zero indicates the additive identity element of any dimension. Must be equal to `Self::dimension()` if it is not `None`.",146,null],[10,"strides","","The spacing between concecutive row elements and consecutive column elements.",146,null],[11,"linear_index","","Compute the index corresponding to the irow-th row and icol-th column of this matrix. The index must be such that the following holds:",146,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_address_unchecked_linear","","Gets the address of the i-th matrix component without performing bound-checking.",146,null],[11,"get_address_unchecked","","Gets the address of the i-th matrix component without performing bound-checking.",146,null],[11,"get_unchecked_linear","","Retrieves a reference to the i-th element without bound-checking.",146,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"get_unchecked","","Retrieves a reference to the i-th element without bound-checking.",146,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[8,"StorageMut","","Trait implemented by matrix data storage that can provide a mutable access to its elements.",null,null],[10,"ptr_mut","","The matrix mutable data pointer.",147,null],[11,"get_address_unchecked_linear_mut","","Gets the mutable address of the i-th matrix component without performing bound-checking.",147,null],[11,"get_address_unchecked_mut","","Gets the mutable address of the i-th matrix component without performing bound-checking.",147,null],[11,"get_unchecked_linear_mut","","Retrieves a mutable reference to the i-th element without bound-checking.",147,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"get_unchecked_mut","","Retrieves a mutable reference to the element at `(irow, icol)` without bound-checking.",147,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked_linear","","Swaps two elements using their linear index without bound-checking.",147,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_unchecked","","Swaps two elements without bound-checking.",147,null],[8,"OwnedStorage","","A matrix storage that does not contain any reference and that is stored contiguously in memory.",null,null],[10,"as_slice","","Converts this data storage to a slice.",148,null],[10,"as_mut_slice","","Converts this data storage to a mutable slice.",148,null],[0,"coordinates","nalgebra::core","Structures to which matrices and vector can be auto-dereferenced (through `Deref`) to access components using their names. For example, if `v` is a 3D vector, one can write `v.z` instead of `v[2]`.",null,null],[3,"X","nalgebra::core::coordinates","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",149,null],[3,"XY","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",150,null],[12,"y","","",150,null],[3,"XYZ","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",151,null],[12,"y","","",151,null],[12,"z","","",151,null],[3,"XYZW","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",152,null],[12,"y","","",152,null],[12,"z","","",152,null],[12,"w","","",152,null],[3,"XYZWA","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",153,null],[12,"y","","",153,null],[12,"z","","",153,null],[12,"w","","",153,null],[12,"a","","",153,null],[3,"XYZWAB","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"x","","",154,null],[12,"y","","",154,null],[12,"z","","",154,null],[12,"w","","",154,null],[12,"a","","",154,null],[12,"b","","",154,null],[3,"IJKW","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"i","","",155,null],[12,"j","","",155,null],[12,"k","","",155,null],[12,"w","","",155,null],[3,"M2x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",156,null],[12,"m21","","",156,null],[12,"m12","","",156,null],[12,"m22","","",156,null],[3,"M2x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",157,null],[12,"m21","","",157,null],[12,"m12","","",157,null],[12,"m22","","",157,null],[12,"m13","","",157,null],[12,"m23","","",157,null],[3,"M2x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",158,null],[12,"m21","","",158,null],[12,"m12","","",158,null],[12,"m22","","",158,null],[12,"m13","","",158,null],[12,"m23","","",158,null],[12,"m14","","",158,null],[12,"m24","","",158,null],[3,"M2x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",159,null],[12,"m21","","",159,null],[12,"m12","","",159,null],[12,"m22","","",159,null],[12,"m13","","",159,null],[12,"m23","","",159,null],[12,"m14","","",159,null],[12,"m24","","",159,null],[12,"m15","","",159,null],[12,"m25","","",159,null],[3,"M2x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",160,null],[12,"m21","","",160,null],[12,"m12","","",160,null],[12,"m22","","",160,null],[12,"m13","","",160,null],[12,"m23","","",160,null],[12,"m14","","",160,null],[12,"m24","","",160,null],[12,"m15","","",160,null],[12,"m25","","",160,null],[12,"m16","","",160,null],[12,"m26","","",160,null],[3,"M3x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",161,null],[12,"m21","","",161,null],[12,"m31","","",161,null],[12,"m12","","",161,null],[12,"m22","","",161,null],[12,"m32","","",161,null],[3,"M3x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",162,null],[12,"m21","","",162,null],[12,"m31","","",162,null],[12,"m12","","",162,null],[12,"m22","","",162,null],[12,"m32","","",162,null],[12,"m13","","",162,null],[12,"m23","","",162,null],[12,"m33","","",162,null],[3,"M3x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",163,null],[12,"m21","","",163,null],[12,"m31","","",163,null],[12,"m12","","",163,null],[12,"m22","","",163,null],[12,"m32","","",163,null],[12,"m13","","",163,null],[12,"m23","","",163,null],[12,"m33","","",163,null],[12,"m14","","",163,null],[12,"m24","","",163,null],[12,"m34","","",163,null],[3,"M3x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",164,null],[12,"m21","","",164,null],[12,"m31","","",164,null],[12,"m12","","",164,null],[12,"m22","","",164,null],[12,"m32","","",164,null],[12,"m13","","",164,null],[12,"m23","","",164,null],[12,"m33","","",164,null],[12,"m14","","",164,null],[12,"m24","","",164,null],[12,"m34","","",164,null],[12,"m15","","",164,null],[12,"m25","","",164,null],[12,"m35","","",164,null],[3,"M3x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",165,null],[12,"m21","","",165,null],[12,"m31","","",165,null],[12,"m12","","",165,null],[12,"m22","","",165,null],[12,"m32","","",165,null],[12,"m13","","",165,null],[12,"m23","","",165,null],[12,"m33","","",165,null],[12,"m14","","",165,null],[12,"m24","","",165,null],[12,"m34","","",165,null],[12,"m15","","",165,null],[12,"m25","","",165,null],[12,"m35","","",165,null],[12,"m16","","",165,null],[12,"m26","","",165,null],[12,"m36","","",165,null],[3,"M4x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",166,null],[12,"m21","","",166,null],[12,"m31","","",166,null],[12,"m41","","",166,null],[12,"m12","","",166,null],[12,"m22","","",166,null],[12,"m32","","",166,null],[12,"m42","","",166,null],[3,"M4x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",167,null],[12,"m21","","",167,null],[12,"m31","","",167,null],[12,"m41","","",167,null],[12,"m12","","",167,null],[12,"m22","","",167,null],[12,"m32","","",167,null],[12,"m42","","",167,null],[12,"m13","","",167,null],[12,"m23","","",167,null],[12,"m33","","",167,null],[12,"m43","","",167,null],[3,"M4x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",168,null],[12,"m21","","",168,null],[12,"m31","","",168,null],[12,"m41","","",168,null],[12,"m12","","",168,null],[12,"m22","","",168,null],[12,"m32","","",168,null],[12,"m42","","",168,null],[12,"m13","","",168,null],[12,"m23","","",168,null],[12,"m33","","",168,null],[12,"m43","","",168,null],[12,"m14","","",168,null],[12,"m24","","",168,null],[12,"m34","","",168,null],[12,"m44","","",168,null],[3,"M4x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",169,null],[12,"m21","","",169,null],[12,"m31","","",169,null],[12,"m41","","",169,null],[12,"m12","","",169,null],[12,"m22","","",169,null],[12,"m32","","",169,null],[12,"m42","","",169,null],[12,"m13","","",169,null],[12,"m23","","",169,null],[12,"m33","","",169,null],[12,"m43","","",169,null],[12,"m14","","",169,null],[12,"m24","","",169,null],[12,"m34","","",169,null],[12,"m44","","",169,null],[12,"m15","","",169,null],[12,"m25","","",169,null],[12,"m35","","",169,null],[12,"m45","","",169,null],[3,"M4x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",170,null],[12,"m21","","",170,null],[12,"m31","","",170,null],[12,"m41","","",170,null],[12,"m12","","",170,null],[12,"m22","","",170,null],[12,"m32","","",170,null],[12,"m42","","",170,null],[12,"m13","","",170,null],[12,"m23","","",170,null],[12,"m33","","",170,null],[12,"m43","","",170,null],[12,"m14","","",170,null],[12,"m24","","",170,null],[12,"m34","","",170,null],[12,"m44","","",170,null],[12,"m15","","",170,null],[12,"m25","","",170,null],[12,"m35","","",170,null],[12,"m45","","",170,null],[12,"m16","","",170,null],[12,"m26","","",170,null],[12,"m36","","",170,null],[12,"m46","","",170,null],[3,"M5x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",171,null],[12,"m21","","",171,null],[12,"m31","","",171,null],[12,"m41","","",171,null],[12,"m51","","",171,null],[12,"m12","","",171,null],[12,"m22","","",171,null],[12,"m32","","",171,null],[12,"m42","","",171,null],[12,"m52","","",171,null],[3,"M5x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",172,null],[12,"m21","","",172,null],[12,"m31","","",172,null],[12,"m41","","",172,null],[12,"m51","","",172,null],[12,"m12","","",172,null],[12,"m22","","",172,null],[12,"m32","","",172,null],[12,"m42","","",172,null],[12,"m52","","",172,null],[12,"m13","","",172,null],[12,"m23","","",172,null],[12,"m33","","",172,null],[12,"m43","","",172,null],[12,"m53","","",172,null],[3,"M5x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",173,null],[12,"m21","","",173,null],[12,"m31","","",173,null],[12,"m41","","",173,null],[12,"m51","","",173,null],[12,"m12","","",173,null],[12,"m22","","",173,null],[12,"m32","","",173,null],[12,"m42","","",173,null],[12,"m52","","",173,null],[12,"m13","","",173,null],[12,"m23","","",173,null],[12,"m33","","",173,null],[12,"m43","","",173,null],[12,"m53","","",173,null],[12,"m14","","",173,null],[12,"m24","","",173,null],[12,"m34","","",173,null],[12,"m44","","",173,null],[12,"m54","","",173,null],[3,"M5x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",174,null],[12,"m21","","",174,null],[12,"m31","","",174,null],[12,"m41","","",174,null],[12,"m51","","",174,null],[12,"m12","","",174,null],[12,"m22","","",174,null],[12,"m32","","",174,null],[12,"m42","","",174,null],[12,"m52","","",174,null],[12,"m13","","",174,null],[12,"m23","","",174,null],[12,"m33","","",174,null],[12,"m43","","",174,null],[12,"m53","","",174,null],[12,"m14","","",174,null],[12,"m24","","",174,null],[12,"m34","","",174,null],[12,"m44","","",174,null],[12,"m54","","",174,null],[12,"m15","","",174,null],[12,"m25","","",174,null],[12,"m35","","",174,null],[12,"m45","","",174,null],[12,"m55","","",174,null],[3,"M5x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",175,null],[12,"m21","","",175,null],[12,"m31","","",175,null],[12,"m41","","",175,null],[12,"m51","","",175,null],[12,"m12","","",175,null],[12,"m22","","",175,null],[12,"m32","","",175,null],[12,"m42","","",175,null],[12,"m52","","",175,null],[12,"m13","","",175,null],[12,"m23","","",175,null],[12,"m33","","",175,null],[12,"m43","","",175,null],[12,"m53","","",175,null],[12,"m14","","",175,null],[12,"m24","","",175,null],[12,"m34","","",175,null],[12,"m44","","",175,null],[12,"m54","","",175,null],[12,"m15","","",175,null],[12,"m25","","",175,null],[12,"m35","","",175,null],[12,"m45","","",175,null],[12,"m55","","",175,null],[12,"m16","","",175,null],[12,"m26","","",175,null],[12,"m36","","",175,null],[12,"m46","","",175,null],[12,"m56","","",175,null],[3,"M6x2","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",176,null],[12,"m21","","",176,null],[12,"m31","","",176,null],[12,"m41","","",176,null],[12,"m51","","",176,null],[12,"m61","","",176,null],[12,"m12","","",176,null],[12,"m22","","",176,null],[12,"m32","","",176,null],[12,"m42","","",176,null],[12,"m52","","",176,null],[12,"m62","","",176,null],[3,"M6x3","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",177,null],[12,"m21","","",177,null],[12,"m31","","",177,null],[12,"m41","","",177,null],[12,"m51","","",177,null],[12,"m61","","",177,null],[12,"m12","","",177,null],[12,"m22","","",177,null],[12,"m32","","",177,null],[12,"m42","","",177,null],[12,"m52","","",177,null],[12,"m62","","",177,null],[12,"m13","","",177,null],[12,"m23","","",177,null],[12,"m33","","",177,null],[12,"m43","","",177,null],[12,"m53","","",177,null],[12,"m63","","",177,null],[3,"M6x4","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",178,null],[12,"m21","","",178,null],[12,"m31","","",178,null],[12,"m41","","",178,null],[12,"m51","","",178,null],[12,"m61","","",178,null],[12,"m12","","",178,null],[12,"m22","","",178,null],[12,"m32","","",178,null],[12,"m42","","",178,null],[12,"m52","","",178,null],[12,"m62","","",178,null],[12,"m13","","",178,null],[12,"m23","","",178,null],[12,"m33","","",178,null],[12,"m43","","",178,null],[12,"m53","","",178,null],[12,"m63","","",178,null],[12,"m14","","",178,null],[12,"m24","","",178,null],[12,"m34","","",178,null],[12,"m44","","",178,null],[12,"m54","","",178,null],[12,"m64","","",178,null],[3,"M6x5","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",179,null],[12,"m21","","",179,null],[12,"m31","","",179,null],[12,"m41","","",179,null],[12,"m51","","",179,null],[12,"m61","","",179,null],[12,"m12","","",179,null],[12,"m22","","",179,null],[12,"m32","","",179,null],[12,"m42","","",179,null],[12,"m52","","",179,null],[12,"m62","","",179,null],[12,"m13","","",179,null],[12,"m23","","",179,null],[12,"m33","","",179,null],[12,"m43","","",179,null],[12,"m53","","",179,null],[12,"m63","","",179,null],[12,"m14","","",179,null],[12,"m24","","",179,null],[12,"m34","","",179,null],[12,"m44","","",179,null],[12,"m54","","",179,null],[12,"m64","","",179,null],[12,"m15","","",179,null],[12,"m25","","",179,null],[12,"m35","","",179,null],[12,"m45","","",179,null],[12,"m55","","",179,null],[12,"m65","","",179,null],[3,"M6x6","","Data structure used to provide access to matrix and vector coordinates with the dot notation, e.g., `v.x` is the same as `v[0]` for a vector.",null,null],[12,"m11","","",180,null],[12,"m21","","",180,null],[12,"m31","","",180,null],[12,"m41","","",180,null],[12,"m51","","",180,null],[12,"m61","","",180,null],[12,"m12","","",180,null],[12,"m22","","",180,null],[12,"m32","","",180,null],[12,"m42","","",180,null],[12,"m52","","",180,null],[12,"m62","","",180,null],[12,"m13","","",180,null],[12,"m23","","",180,null],[12,"m33","","",180,null],[12,"m43","","",180,null],[12,"m53","","",180,null],[12,"m63","","",180,null],[12,"m14","","",180,null],[12,"m24","","",180,null],[12,"m34","","",180,null],[12,"m44","","",180,null],[12,"m54","","",180,null],[12,"m64","","",180,null],[12,"m15","","",180,null],[12,"m25","","",180,null],[12,"m35","","",180,null],[12,"m45","","",180,null],[12,"m55","","",180,null],[12,"m65","","",180,null],[12,"m16","","",180,null],[12,"m26","","",180,null],[12,"m36","","",180,null],[12,"m46","","",180,null],[12,"m56","","",180,null],[12,"m66","","",180,null],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"x"}}],[11,"hash","","",149,null],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"xy"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"xy"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"xy"}}],[11,"hash","","",150,null],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"xyz"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"xyz"}}],[11,"hash","","",151,null],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"xyzw"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"self"},{"name":"xyzw"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"xyzw"}}],[11,"hash","","",152,null],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"xyzwa"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"self"},{"name":"xyzwa"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"xyzwa"}}],[11,"hash","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"xyzwab"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"xyzwab"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"xyzwab"}}],[11,"hash","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"ijkw"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"ijkw"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"ijkw"}}],[11,"hash","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"m2x2"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"m2x2"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"m2x2"}}],[11,"hash","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"m2x3"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"m2x3"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"m2x3"}}],[11,"hash","","",157,null],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"m2x4"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"m2x4"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"m2x4"}}],[11,"hash","","",158,null],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"m2x5"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"m2x5"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"m2x5"}}],[11,"hash","","",159,null],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"m2x6"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"m2x6"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"m2x6"}}],[11,"hash","","",160,null],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"m3x2"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"m3x2"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"m3x2"}}],[11,"hash","","",161,null],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"m3x3"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"m3x3"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"m3x3"}}],[11,"hash","","",162,null],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"m3x4"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"m3x4"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"m3x4"}}],[11,"hash","","",163,null],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"m3x5"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"m3x5"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"m3x5"}}],[11,"hash","","",164,null],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"m3x6"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"m3x6"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"m3x6"}}],[11,"hash","","",165,null],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"m4x2"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"m4x2"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"m4x2"}}],[11,"hash","","",166,null],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"m4x3"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"m4x3"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"m4x3"}}],[11,"hash","","",167,null],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"m4x4"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"m4x4"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"m4x4"}}],[11,"hash","","",168,null],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"m4x5"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"m4x5"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"m4x5"}}],[11,"hash","","",169,null],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"m4x6"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"m4x6"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"m4x6"}}],[11,"hash","","",170,null],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"m5x2"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"m5x2"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"m5x2"}}],[11,"hash","","",171,null],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"m5x3"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"m5x3"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"m5x3"}}],[11,"hash","","",172,null],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"m5x4"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"m5x4"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"m5x4"}}],[11,"hash","","",173,null],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"m5x5"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"m5x5"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"m5x5"}}],[11,"hash","","",174,null],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"m5x6"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"m5x6"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"m5x6"}}],[11,"hash","","",175,null],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"m6x2"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"m6x2"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"m6x2"}}],[11,"hash","","",176,null],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"m6x3"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"m6x3"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"m6x3"}}],[11,"hash","","",177,null],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"m6x4"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"m6x4"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"m6x4"}}],[11,"hash","","",178,null],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"m6x5"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"m6x5"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"m6x5"}}],[11,"hash","","",179,null],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"m6x6"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"m6x6"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"m6x6"}}],[11,"hash","","",180,null],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","nalgebra::core","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index","","",0,null],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",0,null],[11,"neg","","",0,null],[11,"neg_mut","","Negates `self` in-place.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",0,null],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"tr_mul","","Equivalent to `self.transpose() * right`.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixtrmul"}}],[0,"iter","","Matrix iterators.",null,null],[3,"MatrixIter","nalgebra::core::iter","An iterator through a dense matrix with arbitrary strides matrix.",null,null],[3,"MatrixIterMut","","An iterator through a dense matrix with arbitrary strides matrix.",null,null],[11,"new","","Creates a new iterator for the given matrix storage.",181,{"inputs":[{"name":"s"}],"output":{"name":"matrixiter"}}],[11,"next","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",181,null],[11,"count","","",181,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates a new iterator for the given matrix storage.",182,{"inputs":[{"name":"s"}],"output":{"name":"matrixitermut"}}],[11,"next","","",182,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",182,null],[11,"count","","",182,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"default_allocator","nalgebra::core","The default matrix data storage allocator.",null,null],[3,"DefaultAllocator","nalgebra::core::default_allocator","An allocator based on `GenericArray` and `MatrixVec` for statically-sized and dynamically-sized matrices respectively.",null,null],[11,"allocate_uninitialized","","",183,null],[11,"allocate_from_iterator","","",183,null],[11,"allocate_uninitialized","","",183,null],[11,"allocate_from_iterator","","",183,null],[11,"allocate_uninitialized","","",183,null],[11,"allocate_from_iterator","","",183,null],[11,"hash","nalgebra::core","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"from_data_statically_unchecked","","Creates a new matrix with the given data without statically checking that the matrix dimension matches the storage dimension.",0,{"inputs":[{"name":"s"}],"output":{"name":"matrix"}}],[11,"from_data","","Creates a new matrix with the given data.",0,{"inputs":[{"name":"s"}],"output":{"name":"matrix"}}],[11,"into_owned","","Moves this matrix into one that owns its data.",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedmatrix"}}],[11,"into_owned_sum","","Moves this matrix into one that owns its data. The actual type of the result depends on matrix storage combination rules for addition.",0,{"inputs":[{"name":"self"}],"output":{"name":"matrixsum"}}],[11,"clone_owned","","Clones this matrix into one that owns its data.",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedmatrix"}}],[11,"clone_owned_sum","","Clones this matrix into one that owns its data. The actual type of the result depends on matrix storage combination rules for addition.",0,{"inputs":[{"name":"self"}],"output":{"name":"matrixsum"}}],[11,"len","","The total number of elements of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"shape","","The shape of this matrix returned as the tuple (number of rows, number of columns).",0,null],[11,"nrows","","The number of rows of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strides","","The strides (row stride, column stride) of this matrix.",0,null],[11,"iter","","Iterates through this matrix coordinates.",0,{"inputs":[{"name":"self"}],"output":{"name":"matrixiter"}}],[11,"vector_to_matrix_index","","Computes the row and column coordinates of the i-th element of this matrix seen as a vector.",0,null],[11,"get_unchecked","","Gets a reference to the element of this matrix at row `irow` and column `icol` without bound-checking.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"relative_eq","","Tests whether `self` and `rhs` are equal up to a given epsilon.",0,null],[11,"iter_mut","","Mutably iterates through this matrix coordinates.",0,{"inputs":[{"name":"self"}],"output":{"name":"matrixitermut"}}],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked","","Swaps two entries without bound-checking.",0,null],[11,"swap","","Swaps two entries.",0,null],[11,"copy_from","","Fills this matrix with the content of another one. Both must have the same shape.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"fill","","Sets all the entries of this matrix to `value`.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire matrix entries orderd column-by-columns.",0,null],[11,"as_mut_slice","","Extracts a mutable slice containing the entire matrix entries orderd column-by-columns.",0,null],[11,"map","","Returns a matrix containing the result of `f` applied to each of its entries.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"zip_map","","Returns a matrix containing the result of `f` applied to each entries of `self` and `rhs`.",0,{"inputs":[{"name":"self"},{"name":"matrix"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"transpose","","Transposes `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedmatrix"}}],[11,"transpose_mut","","Transposes the square matrix `self` in-place.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"default_epsilon","","",0,null],[11,"default_max_relative","","",0,null],[11,"default_max_ulps","","",0,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",0,null],[11,"ulps_eq","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"dot","","The dot product between two matrices (seen as vectors).",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"tr_dot","","The dot product between the transpose of `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"norm_squared","","The squared L2 norm of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"perp","","The perpendicular product between two 2D column vectors, i.e. `a.x * b.y - a.y * b.x`.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"cross","","The 3D cross product between two vectors.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixcross"}}],[11,"angle","","The smallest angle between two matrices seen as vectors.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"n"}}],[11,"norm","","The L2 norm of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","Returns a normalized version of this matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedmatrix"}}],[11,"try_normalize","","Returns a normalized version of this matrix unless its norm as smaller or equal to `eps`.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"normalize_mut","","Normalizes this matrix in-place and returns its norm.",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize_mut","","Normalizes this matrix in-place or does nothing if its norm is smaller or equal to `eps`.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"default_epsilon","","",184,null],[11,"default_max_relative","","",184,null],[11,"default_max_ulps","","",184,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",184,null],[11,"ulps_eq","","",184,null],[11,"new_uninitialized_generic","","Creates a new uninitialized matrix. If the matrix has a compile-time dimension, this panics if `nrows != R::to_usize()` or `ncols != C::to_usize()`.",0,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"matrix"}}],[11,"from_element_generic","","Creates a matrix with all its elements set to `elem`.",0,{"inputs":[{"name":"r"},{"name":"c"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_iterator_generic","","Creates a matrix with all its elements filled by an iterator.",0,{"inputs":[{"name":"r"},{"name":"c"},{"name":"i"}],"output":{"name":"matrix"}}],[11,"from_row_slice_generic","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",0,null],[11,"from_column_slice_generic","","Creates a matrix with its elements filled with the components provided by a slice. The components must have the same layout as the matrix data storage (i.e. row-major or column-major).",0,null],[11,"from_fn_generic","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"r"},{"name":"c"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"identity_generic","","Creates a new indentity matrix.",0,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"matrix"}}],[11,"from_diagonal_element_generic","","Creates a new matrix with its diagonal filled with copies of `elt`.",0,{"inputs":[{"name":"r"},{"name":"c"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_rows","","Builds a new matrix from its rows.",0,null],[11,"from_columns","","Builds a new matrix from its columns.",0,null],[11,"new_random_generic","","Creates a matrix filled with random values.",0,{"inputs":[{"name":"r"},{"name":"c"}],"output":{"name":"matrix"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",0,{"inputs":[],"output":{"name":"matrix"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",0,{"inputs":[{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",0,{"inputs":[{"name":"i"}],"output":{"name":"matrix"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",0,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",0,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"f"}],"output":{"name":"matrix"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",0,{"inputs":[],"output":{"name":"matrix"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",0,{"inputs":[{"name":"n"}],"output":{"name":"matrix"}}],[11,"new_random","","Creates a matrix filled with random values.",0,{"inputs":[],"output":{"name":"matrix"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",0,{"inputs":[{"name":"usize"},{"name":"i"}],"output":{"name":"matrix"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",0,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",0,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new_random","","Creates a matrix filled with random values.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",0,{"inputs":[{"name":"usize"},{"name":"i"}],"output":{"name":"matrix"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",0,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",0,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new_random","","Creates a matrix filled with random values.",0,{"inputs":[{"name":"usize"}],"output":{"name":"matrix"}}],[11,"new_uninitialized","","Creates a new uninitialized matrix.",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_element","","Creates a matrix with all its elements set to `elem`.",0,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"from_iterator","","Creates a matrix with all its elements filled by an iterator.",0,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"matrix"}}],[11,"from_row_slice","","Creates a matrix with its elements filled with the components provided by a slice in row-major order.",0,null],[11,"from_column_slice","","Creates a matrix with its elements filled with the components provided by a slice in column-major order.",0,null],[11,"from_fn","","Creates a matrix filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"matrix"}}],[11,"identity","","Creates an identity matrix. If the matrix is not square, the largest square submatrix (starting at the first row and column) is set to the identity while all other entries are set to zero.",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"from_diagonal_element","","Creates a matrix filled with its diagonal filled with `elt` and all other components set to zero.",0,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new_random","","Creates a matrix filled with random values.",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"min_value","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",0,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"new","","Initializes this matrix from its components.",0,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix"}}],[11,"is_square","","Indicates if this is a square matrix.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_identity","","Indicated if this is the identity matrix within a relative error of `eps`.",0,null],[11,"identity","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"inverse_mut","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"multiply_by","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"dimension","","",0,{"inputs":[],"output":{"name":"usize"}}],[11,"canonical_basis_element","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"dot","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"component_unchecked","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"component_unchecked_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"norm_squared","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"angle","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"inner_product","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"orthonormalize","","",0,null],[11,"orthonormal_subspace_basis","","",0,null],[11,"meet","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"join","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"meet_join","","",0,null],[11,"to_superset","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matrix"}}],[11,"is_in_subset","","",0,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",0,{"inputs":[{"name":"matrix"}],"output":{"name":"self"}}],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"new_unchecked","","Create a new matrix slice without bound checking.",185,null],[11,"new_with_strides_unchecked","","Create a new matrix slice without bound checking.",185,null],[11,"new_unchecked","","Create a new matrix slice without bound checking.",186,null],[11,"new_with_strides_unchecked","","Create a new matrix slice without bound checking.",186,null],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_owned","","",185,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",185,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"ptr","","",185,null],[11,"shape","","",185,null],[11,"strides","","",185,null],[11,"into_owned","","",186,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",186,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"ptr","","",186,null],[11,"shape","","",186,null],[11,"strides","","",186,null],[11,"ptr_mut","","",186,null],[11,"row","","Returns a slice containing the i-th column of this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"rows","","Extracts from this matrix a set of consecutive rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"rows_with_step","","Extracts from this matrix a set of consecutive rows regularly spaced by `step` rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_rows","","Extracts a compile-time number of consecutive rows from this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_rows_with_step","","Extracts from this matrix a compile-time number of rows regularly spaced by `step` rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"rows_generic","","Extracts from this matrix `nrows` rows regularly spaced by `step` rows. Both argument may or may not be values known at compile-time.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"},{"name":"rstep"}],"output":{"name":"matrixslice"}}],[11,"column","","Returns a slice containing the i-th column of this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"columns","","Extracts from this matrix a set of consecutive columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"columns_with_step","","Extracts from this matrix a set of consecutive columns regularly spaced by `step` columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_columns","","Extracts a compile-time number of consecutive columns from this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_columns_with_step","","Extracts from this matrix a compile-time number of columns regularly spaced by `step` columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"columns_generic","","Extracts from this matrix `ncols` columns regularly spaced by `step` columns. Both argument may or may not be values known at compile-time.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"},{"name":"cstep"}],"output":{"name":"matrixslice"}}],[11,"slice","","Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)` consecutive elements.",0,null],[11,"slice_with_steps","","Slices this matrix starting at its component `(start.0, start.1)` and with `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",0,null],[11,"fixed_slice","","Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(), CSlice::dim())` consecutive components.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslice"}}],[11,"fixed_slice_with_steps","","Slices this matrix starting at its component `(start.0, start.1)` and with `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",0,null],[11,"generic_slice","","Creates a slice that may or may not have a fixed size and stride.",0,null],[11,"generic_slice_with_steps","","Creates a slice that may or may not have a fixed size and stride.",0,null],[11,"row_mut","","Returns a slice containing the i-th column of this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"rows_mut","","Extracts from this matrix a set of consecutive rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"rows_with_step_mut","","Extracts from this matrix a set of consecutive rows regularly spaced by `step` rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_rows_mut","","Extracts a compile-time number of consecutive rows from this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_rows_with_step_mut","","Extracts from this matrix a compile-time number of rows regularly spaced by `step` rows.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"rows_generic_mut","","Extracts from this matrix `nrows` rows regularly spaced by `step` rows. Both argument may or may not be values known at compile-time.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"rslice"},{"name":"rstep"}],"output":{"name":"matrixslicemut"}}],[11,"column_mut","","Returns a slice containing the i-th column of this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"columns_mut","","Extracts from this matrix a set of consecutive columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"columns_with_step_mut","","Extracts from this matrix a set of consecutive columns regularly spaced by `step` columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_columns_mut","","Extracts a compile-time number of consecutive columns from this matrix.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_columns_with_step_mut","","Extracts from this matrix a compile-time number of columns regularly spaced by `step` columns.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"columns_generic_mut","","Extracts from this matrix `ncols` columns regularly spaced by `step` columns. Both argument may or may not be values known at compile-time.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cslice"},{"name":"cstep"}],"output":{"name":"matrixslicemut"}}],[11,"slice_mut","","Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)` consecutive elements.",0,null],[11,"slice_with_steps_mut","","Slices this matrix starting at its component `(start.0, start.1)` and with `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",0,null],[11,"fixed_slice_mut","","Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(), CSlice::dim())` consecutive components.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrixslicemut"}}],[11,"fixed_slice_with_steps_mut","","Slices this matrix starting at its component `(start.0, start.1)` and with `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the original matrix.",0,null],[11,"generic_slice_mut","","Creates a slice that may or may not have a fixed size and stride.",0,null],[11,"generic_slice_with_steps_mut","","Creates a slice that may or may not have a fixed size and stride.",0,null],[11,"hash","","",187,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"deref","","",187,null],[11,"deref_mut","","",187,null],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","",187,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",187,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"ptr","","",187,null],[11,"shape","","",187,null],[11,"strides","","",187,null],[11,"ptr_mut","","",187,null],[11,"as_slice","","",187,null],[11,"as_mut_slice","","",187,null],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"matrixvec"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"matrixvec"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"matrixvec"}],"output":{"name":"bool"}}],[11,"new","","Creates a new dynamic matrix data storage from the given vector and shape.",188,{"inputs":[{"name":"r"},{"name":"c"},{"name":"vec"}],"output":{"name":"matrixvec"}}],[11,"data","","The underlying data storage.",188,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"data_mut","","The underlying mutable data storage.",188,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",188,null],[11,"into_owned","","",188,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",188,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"ptr","","",188,null],[11,"shape","","",188,null],[11,"strides","","",188,null],[11,"into_owned","","",188,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"clone_owned","","",188,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"ptr","","",188,null],[11,"shape","","",188,null],[11,"strides","","",188,null],[11,"ptr_mut","","",188,null],[11,"as_slice","","",188,null],[11,"as_mut_slice","","",188,null],[11,"ptr_mut","","",188,null],[11,"as_slice","","",188,null],[11,"as_mut_slice","","",188,null],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"hash","","",184,null],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_normalize","","Normalize the given value and return it wrapped on a `Unit` structure.",184,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"try_new","","Attempts to normalize the given value and return it wrapped on a `Unit` structure.",184,null],[11,"new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",184,null],[11,"try_new_and_get","","Normalize the given value and return it wrapped on a `Unit` structure and its norm.",184,null],[11,"renormalize","","Normalizes this value again. This is useful when repeated computations might cause a drift in the norm because of float inaccuracies.",184,null],[11,"new_unchecked","","Wraps the given value, assuming it is already normalized.",184,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unwrap","","Retrieves the underlying value.",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut_unchecked","","Returns a mutable reference to the underlying value. This is `_unchecked` because modifying the underlying value in such a way that it no longer has unit length may lead to unexpected results.",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_superset","","",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_in_subset","","",184,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",184,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"neg","","",184,null],[11,"deref","","",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"abs","","Computes the componentwise absolute value.",0,{"inputs":[{"name":"self"}],"output":{"name":"ownedmatrix"}}],[11,"component_mul","","Componentwise matrix multiplication.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixsum"}}],[11,"component_mul_mut","","Componentwise matrix multiplication.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[11,"component_div","","Componentwise matrix multiplication.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":{"name":"matrixsum"}}],[11,"component_div_mut","","Componentwise matrix multiplication.",0,{"inputs":[{"name":"self"},{"name":"matrix"}],"output":null}],[6,"OwnedMatrix","","The type of the result of a matrix allocation by the allocator `A`.",null,null],[6,"SquareMatrix","","A square matrix.",null,null],[6,"OwnedSquareMatrix","","The type of the result of a square matrix allocation by the allocator `A`.",null,null],[6,"ColumnVector","","A matrix with one column and `D` rows.",null,null],[6,"OwnedColumnVector","","An owned matrix with one column and `D` rows.",null,null],[6,"OwnedRowVector","","An owned matrix with one row and `D` columns.",null,null],[6,"MatrixSum","","The type of the result of a matrix sum.",null,null],[6,"ColumnVectorSum","","The type of the result of a matrix sum.",null,null],[6,"MatrixCross","","The type of the result of a matrix cross product.",null,null],[6,"MatrixMul","","The type of the result of a matrix multiplication.",null,null],[6,"MatrixTrMul","","The type of the result of a matrix transpose-multiplication.",null,null],[6,"MatrixWithScalar","","The matrix with storage `S` and scalar type changed from `NOld` to `NNew`.",null,null],[6,"DMatrix","","A dynamically sized column-major matrix.",null,null],[6,"MatrixNM","","A staticaly sized column-major matrix with `R` rows and `C` columns.",null,null],[6,"MatrixN","","A staticaly sized column-major square matrix with `D` rows and columns.",null,null],[6,"Matrix1","","A stack-allocated, column-major, 1x1 square matrix.",null,null],[6,"Matrix2","","A stack-allocated, column-major, 2x2 square matrix.",null,null],[6,"Matrix3","","A stack-allocated, column-major, 3x3 square matrix.",null,null],[6,"Matrix4","","A stack-allocated, column-major, 4x4 square matrix.",null,null],[6,"Matrix5","","A stack-allocated, column-major, 5x5 square matrix.",null,null],[6,"Matrix6","","A stack-allocated, column-major, 6x6 square matrix.",null,null],[6,"Matrix1x2","","A stack-allocated, column-major, 1x2 square matrix.",null,null],[6,"Matrix1x3","","A stack-allocated, column-major, 1x3 square matrix.",null,null],[6,"Matrix1x4","","A stack-allocated, column-major, 1x4 square matrix.",null,null],[6,"Matrix1x5","","A stack-allocated, column-major, 1x5 square matrix.",null,null],[6,"Matrix1x6","","A stack-allocated, column-major, 1x6 square matrix.",null,null],[6,"Matrix2x3","","A stack-allocated, column-major, 2x3 square matrix.",null,null],[6,"Matrix2x4","","A stack-allocated, column-major, 2x4 square matrix.",null,null],[6,"Matrix2x5","","A stack-allocated, column-major, 2x5 square matrix.",null,null],[6,"Matrix2x6","","A stack-allocated, column-major, 2x6 square matrix.",null,null],[6,"Matrix3x4","","A stack-allocated, column-major, 3x4 square matrix.",null,null],[6,"Matrix3x5","","A stack-allocated, column-major, 3x5 square matrix.",null,null],[6,"Matrix3x6","","A stack-allocated, column-major, 3x6 square matrix.",null,null],[6,"Matrix4x5","","A stack-allocated, column-major, 4x5 square matrix.",null,null],[6,"Matrix4x6","","A stack-allocated, column-major, 4x6 square matrix.",null,null],[6,"Matrix5x6","","A stack-allocated, column-major, 5x6 square matrix.",null,null],[6,"Matrix2x1","","A stack-allocated, column-major, 2x1 square matrix.",null,null],[6,"Matrix3x1","","A stack-allocated, column-major, 3x1 square matrix.",null,null],[6,"Matrix4x1","","A stack-allocated, column-major, 4x1 square matrix.",null,null],[6,"Matrix5x1","","A stack-allocated, column-major, 5x1 square matrix.",null,null],[6,"Matrix6x1","","A stack-allocated, column-major, 6x1 square matrix.",null,null],[6,"Matrix3x2","","A stack-allocated, column-major, 3x2 square matrix.",null,null],[6,"Matrix4x2","","A stack-allocated, column-major, 4x2 square matrix.",null,null],[6,"Matrix5x2","","A stack-allocated, column-major, 5x2 square matrix.",null,null],[6,"Matrix6x2","","A stack-allocated, column-major, 6x2 square matrix.",null,null],[6,"Matrix4x3","","A stack-allocated, column-major, 4x3 square matrix.",null,null],[6,"Matrix5x3","","A stack-allocated, column-major, 5x3 square matrix.",null,null],[6,"Matrix6x3","","A stack-allocated, column-major, 6x3 square matrix.",null,null],[6,"Matrix5x4","","A stack-allocated, column-major, 5x4 square matrix.",null,null],[6,"Matrix6x4","","A stack-allocated, column-major, 6x4 square matrix.",null,null],[6,"Matrix6x5","","A stack-allocated, column-major, 6x5 square matrix.",null,null],[6,"DVector","","A dynamically sized column vector.",null,null],[6,"VectorN","","A statically sized D-dimensional column vector.",null,null],[6,"Vector1","","A stack-allocated, 1-dimensional column vector.",null,null],[6,"Vector2","","A stack-allocated, 2-dimensional column vector.",null,null],[6,"Vector3","","A stack-allocated, 3-dimensional column vector.",null,null],[6,"Vector4","","A stack-allocated, 4-dimensional column vector.",null,null],[6,"Vector5","","A stack-allocated, 5-dimensional column vector.",null,null],[6,"Vector6","","A stack-allocated, 6-dimensional column vector.",null,null],[6,"RowDVector","","A dynamically sized row vector.",null,null],[6,"RowVectorN","","A statically sized D-dimensional row vector.",null,null],[6,"RowVector1","","A stack-allocated, 1-dimensional row vector.",null,null],[6,"RowVector2","","A stack-allocated, 2-dimensional row vector.",null,null],[6,"RowVector3","","A stack-allocated, 3-dimensional row vector.",null,null],[6,"RowVector4","","A stack-allocated, 4-dimensional row vector.",null,null],[6,"RowVector5","","A stack-allocated, 5-dimensional row vector.",null,null],[6,"RowVector6","","A stack-allocated, 6-dimensional row vector.",null,null],[6,"MatrixSlice","","A matrix slice.",null,null],[6,"MatrixSliceMut","","A matrix slice.",null,null],[8,"Scalar","","The basic scarar type for all structures of `nalgebra`.",null,null],[0,"geometry","nalgebra","[Reexported at the root of this crate.] Data structures for points and usual transformations (rotations, isometries, etc.)",null,null],[3,"PointBase","nalgebra::geometry","A point in a n-dimensional euclidean space.",null,null],[12,"coords","","The coordinates of this point, i.e., the shift from the origin.",189,null],[3,"RotationBase","","A rotation matrix.",null,null],[3,"QuaternionBase","","A quaternion. See the type alias `UnitQuaternionBase = Unit<QuaternionBase>` for a quaternion that may be used as a rotation.",null,null],[12,"coords","","This quaternion as a 4D vector of coordinates in the `[ x, y, z, w ]` storage order.",190,null],[3,"TranslationBase","","A translation.",null,null],[12,"vector","","The translation coordinates, i.e., how much is added to a point's coordinates when it is translated.",191,null],[3,"IsometryBase","","A direct isometry, i.e., a rotation followed by a translation.",null,null],[12,"rotation","","The pure rotational part of this isometry.",192,null],[12,"translation","","The pure translational part of this isometry.",192,null],[3,"SimilarityBase","","A similarity, i.e., an uniform scaling, followed by a rotation, followed by a translation.",null,null],[12,"isometry","","The part of this similarity that does not include the scaling factor.",193,null],[3,"TransformBase","","A transformation matrix in homogeneous coordinates.",null,null],[3,"OrthographicBase","","A 3D orthographic projection stored as an homogeneous 4x4 matrix.",null,null],[3,"PerspectiveBase","","A 3D perspective projection stored as an homogeneous 4x4 matrix.",null,null],[4,"TGeneral","","Tag representing the most general (not necessarily inversible) `Transform` type.",null,null],[4,"TProjective","","Tag representing the most general inversible `Transform` type.",null,null],[4,"TAffine","","Tag representing an affine `Transform`. Its bottom-row is equal to `(0, 0 ... 0, 1)`.",null,null],[11,"hash","","",189,null],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_coordinates","","Creates a new point with the given coordinates.",189,{"inputs":[{"name":"columnvector"}],"output":{"name":"pointbase"}}],[11,"into_owned","","Moves this point into one that owns its data.",189,{"inputs":[{"name":"self"}],"output":{"name":"ownedpoint"}}],[11,"clone_owned","","Clones this point into one that owns its data.",189,{"inputs":[{"name":"self"}],"output":{"name":"ownedpoint"}}],[11,"len","","The dimension of this point.",189,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"stride","","The stride of this point. This is the number of buffer element separating each component of this point.",189,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Iterates through this point coordinates.",189,{"inputs":[{"name":"self"}],"output":{"name":"matrixiter"}}],[11,"get_unchecked","","Gets a reference to i-th element of this point without bound-checking.",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"to_homogeneous","","Converts this point into a vector in homogeneous coordinates, i.e., appends a `1` at the end of it.",189,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"iter_mut","","Mutably iterates through this point coordinates.",189,{"inputs":[{"name":"self"}],"output":{"name":"matrixitermut"}}],[11,"get_unchecked_mut","","Gets a mutable reference to i-th element of this point without bound-checking.",189,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"swap_unchecked","","Swaps two entries without bound-checking.",189,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"default_epsilon","","",189,null],[11,"default_max_relative","","",189,null],[11,"default_max_ulps","","",189,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",189,null],[11,"ulps_eq","","",189,null],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_uninitialized","","Creates a new point with uninitialized coordinates.",189,{"inputs":[],"output":{"name":"self"}}],[11,"origin","","Creates a new point with all coordinates equal to zero.",189,{"inputs":[],"output":{"name":"self"}}],[11,"from_homogeneous","","Creates a new point from its homogeneous vector representation.",189,{"inputs":[{"name":"columnvector"}],"output":{"name":"option"}}],[11,"max_value","","",189,{"inputs":[],"output":{"name":"self"}}],[11,"min_value","","",189,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",189,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"}],"output":{"name":"pointbase"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"pointbase"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pointbase"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pointbase"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pointbase"}}],[11,"new","","Initializes this matrix from its components.",189,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pointbase"}}],[11,"index","","",189,null],[11,"index_mut","","",189,null],[11,"neg","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"sub","","",189,null],[11,"add","","",189,null],[11,"add","","",189,null],[11,"add_assign","","",189,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"add_assign","","",189,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"sub_assign","","",189,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"sub_assign","","",189,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"mul","nalgebra::core","",0,null],[11,"mul","","",0,null],[11,"mul","nalgebra::geometry","",189,null],[11,"mul_assign","","",189,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",189,null],[11,"div_assign","","",189,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"origin","","",189,{"inputs":[],"output":{"name":"self"}}],[11,"coordinates","","",189,null],[11,"from_coordinates","","",189,null],[11,"scale_by","","",189,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"meet","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"join","","",189,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"meet_join","","",189,null],[11,"to_superset","","",189,{"inputs":[{"name":"self"}],"output":{"name":"pointbase"}}],[11,"is_in_subset","","",189,{"inputs":[{"name":"pointbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",189,{"inputs":[{"name":"pointbase"}],"output":{"name":"self"}}],[11,"to_superset","","",189,{"inputs":[{"name":"self"}],"output":{"name":"columnvector"}}],[11,"is_in_subset","","",189,{"inputs":[{"name":"columnvector"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",189,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"hash","","",194,null],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"rotationbase"}}],[11,"matrix","","A reference to the underlying matrix representation of this rotation.",194,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"matrix_mut","","A mutable reference to the underlying matrix representation of this rotation.",194,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"unwrap","","Unwraps the underlying matrix.",194,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"to_homogeneous","","Converts this rotation into its equivalent homogeneous transformation matrix.",194,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"from_matrix_unchecked","","Creates a new rotation from the given square matrix.",194,{"inputs":[{"name":"squarematrix"}],"output":{"name":"rotationbase"}}],[11,"transpose","","Transposes `self`.",194,{"inputs":[{"name":"self"}],"output":{"name":"ownedrotation"}}],[11,"inverse","","Inverts `self`.",194,{"inputs":[{"name":"self"}],"output":{"name":"ownedrotation"}}],[11,"transpose_mut","","Transposes `self` in-place.",194,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts `self` in-place.",194,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",194,null],[11,"default_max_relative","","",194,null],[11,"default_max_ulps","","",194,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",194,null],[11,"ulps_eq","","",194,null],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new square identity rotation of the given `dimension`.",194,{"inputs":[],"output":{"name":"rotationbase"}}],[11,"one","","",194,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",194,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"mul","nalgebra::core","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"mul","nalgebra::geometry","",194,null],[11,"mul","","",194,null],[11,"mul_assign","","",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","nalgebra::core","",0,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"identity","nalgebra::geometry","",194,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",194,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",194,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",194,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",194,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",194,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",194,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",194,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",194,null],[11,"append_translation","","",194,null],[11,"prepend_translation","","",194,null],[11,"append_rotation","","",194,null],[11,"prepend_rotation","","",194,null],[11,"append_scaling","","",194,null],[11,"prepend_scaling","","",194,null],[11,"translation","","",194,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",194,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",194,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",194,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"rotationbase"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"rotationbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"rotationbase"}],"output":{"name":"self"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternionbase"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"unitquaternionbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"unitquaternionbase"}],"output":{"name":"self"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"isometrybase"}],"output":{"name":"self"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",194,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",194,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",194,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",194,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 2 dimensional rotation matrix from an angle in radian wrapped in a 1-dimensional vector.",194,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"rotation_between","","The rotation matrix required to align `a` and `b` but with its angl.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"angle","","The rotation angle.",194,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":{"name":"n"}}],[11,"rotation_to","","The rotation matrix needed to make `self` and `other` coincide.",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":{"name":"ownedrotation"}}],[11,"powf","","Raise the quaternion to a given floating power, i.e., returns the rotation with the angle of `self` multiplied by `n`.",194,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedrotation"}}],[11,"scaled_axis","","The rotation angle returned as a 1-dimensional vector.",194,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"rand","","",194,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",194,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 3D rotation matrix from an axis scaled by the rotation angle.",194,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_axis_angle","","Builds a 3D rotation matrix from an axis and a rotation angle.",194,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",194,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates a rotation that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"rotation_between","","The rotation matrix required to align `a` and `b` but with its angl.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",194,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"option"}}],[11,"angle","","The rotation angle.",194,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"axis","","The rotation axis. Returns `None` if the rotation angle is zero or PI.",194,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"scaled_axis","","The rotation axis multiplied by the rotation angle.",194,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":{"name":"n"}}],[11,"rotation_to","","The rotation matrix needed to make `self` and `other` coincide.",194,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":{"name":"ownedrotation"}}],[11,"powf","","Raise the quaternion to a given floating power, i.e., returns the rotation with the same axis as `self` and an angle equal to `self.angle()` multiplied by `n`.",194,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedrotation"}}],[11,"rand","","",194,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"hash","","",190,null],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"quaternionbase"}}],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into_owned","","Moves this quaternion into one that owns its data.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"clone_owned","","Clones this quaternion into one that owns its data.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"matrixslice"}}],[11,"scalar","","The scalar part `w` of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"as_vector","","Reinterprets this quaternion as a 4D vector.",190,{"inputs":[{"name":"self"}],"output":{"name":"columnvector"}}],[11,"norm","","The norm of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm_squared","","The squared norm of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","Normalizes this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"try_inverse","","Inverts this quaternion if it is not zero.",190,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lerp","","Linear interpolation between two quaternion.",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"},{"name":"n"}],"output":{"name":"ownedquaternionbase"}}],[11,"polar_decomposition","","The polar decomposition of this quaternion.",190,null],[11,"exp","","Compute the exponential of a quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"ln","","Compute the natural logarithm of a quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"powf","","Raise the quaternion to a given floating power.",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedquaternionbase"}}],[11,"as_vector_mut","","Transforms this quaternion into its 4D vector form (Vector part, Scalar part).",190,{"inputs":[{"name":"self"}],"output":{"name":"columnvector"}}],[11,"vector_mut","","The mutable vector part `(i, j, k)` of this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"matrixslicemut"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",190,{"inputs":[{"name":"self"}],"output":null}],[11,"try_inverse_mut","","Inverts this quaternion in-place if it is not zero.",190,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"normalize_mut","","Normalizes this quaternion.",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"default_epsilon","","",190,null],[11,"default_max_relative","","",190,null],[11,"default_max_ulps","","",190,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",190,null],[11,"ulps_eq","","",190,null],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_vector","","Creates a quaternion from a 4D vector. The quaternion scalar part corresponds to the `w` vector component.",190,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new","","Creates a new quaternion from its individual components. Note that the arguments order does **not** follow the storage order.",190,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_parts","","Creates a new quaternion from its scalar and vector parts. Note that the arguments order does **not** follow the storage order.",190,{"inputs":[{"name":"n"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_polar_decomposition","","Creates a new quaternion from its polar decomposition.",190,{"inputs":[{"name":"n"},{"name":"n"},{"name":"unit"}],"output":{"name":"self"}}],[11,"identity","","The quaternion multiplicative identity.",190,{"inputs":[],"output":{"name":"self"}}],[11,"one","","",190,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",190,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",190,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rand","","",190,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"index","","",190,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",190,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"add","","",190,null],[11,"add","","",190,null],[11,"sub","","",190,null],[11,"sub","","",190,null],[11,"mul","","",190,null],[11,"mul","","",190,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"mul","","",190,null],[11,"mul_assign","","",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"div","","",190,null],[11,"div_assign","","",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"neg","","",190,null],[11,"add_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"add_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"sub_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"sub_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"mul_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"mul_assign","","",190,{"inputs":[{"name":"self"},{"name":"quaternionbase"}],"output":null}],[11,"identity","","",190,{"inputs":[],"output":{"name":"self"}}],[11,"identity","","",190,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",190,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"operate","","",190,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",190,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"multiply_by","","",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"dimension","","",190,{"inputs":[],"output":{"name":"usize"}}],[11,"canonical_basis_element","","",190,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"dot","","",190,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"component_unchecked","","",190,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"component_unchecked_mut","","",190,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"n"}}],[11,"norm_squared","","",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"norm","","",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"normalize","","",190,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"normalize_mut","","",190,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_normalize","","",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"try_normalize_mut","","",190,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"deref","","",190,null],[11,"deref_mut","","",190,null],[11,"to_superset","","",190,{"inputs":[{"name":"self"}],"output":{"name":"quaternionbase"}}],[11,"is_in_subset","","",190,{"inputs":[{"name":"quaternionbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",190,{"inputs":[{"name":"quaternionbase"}],"output":{"name":"self"}}],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"mul_assign","","",194,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",194,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",194,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",194,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"hash","","",191,null],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"translationbase"}}],[11,"from_vector","","Creates a new translation from the given vector.",191,{"inputs":[{"name":"columnvector"}],"output":{"name":"translationbase"}}],[11,"inverse","","Inverts `self`.",191,{"inputs":[{"name":"self"}],"output":{"name":"ownedtranslation"}}],[11,"to_homogeneous","","Converts this translation into its equivalent homogeneous transformation matrix.",191,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"inverse_mut","","Inverts `self` in-place.",191,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",191,null],[11,"default_max_relative","","",191,null],[11,"default_max_ulps","","",191,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",191,null],[11,"ulps_eq","","",191,null],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new square identity rotation of the given `dimension`.",191,{"inputs":[],"output":{"name":"translationbase"}}],[11,"one","","",191,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",191,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Initializes this matrix from its components.",191,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"div","","",191,null],[11,"div","","",191,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"mul_assign","","",191,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",191,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"div_assign","","",191,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"div_assign","","",191,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"identity","","",191,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",191,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",191,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",191,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",191,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",191,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",191,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",191,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",191,null],[11,"append_translation","","",191,null],[11,"prepend_translation","","",191,null],[11,"append_rotation","","",191,null],[11,"prepend_rotation","","",191,null],[11,"append_scaling","","",191,null],[11,"prepend_scaling","","",191,null],[11,"translation","","",191,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"rotation","","",191,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"scaling","","",191,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"to_vector","","",191,{"inputs":[{"name":"self"}],"output":{"name":"columnvector"}}],[11,"from_vector","","",191,{"inputs":[{"name":"columnvector"}],"output":{"name":"option"}}],[11,"powf","","",191,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"translation_between","","",191,{"inputs":[{"name":"pointbase"},{"name":"pointbase"}],"output":{"name":"option"}}],[11,"to_superset","","",191,{"inputs":[{"name":"self"}],"output":{"name":"translationbase"}}],[11,"is_in_subset","","",191,{"inputs":[{"name":"translationbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",191,{"inputs":[{"name":"translationbase"}],"output":{"name":"self"}}],[11,"to_superset","","",191,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"is_in_subset","","",191,{"inputs":[{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",191,{"inputs":[{"name":"isometrybase"}],"output":{"name":"self"}}],[11,"to_superset","","",191,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",191,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",191,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",191,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",191,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",191,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",191,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",191,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",191,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"hash","","",192,null],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"from_parts","","Creates a new isometry from its rotational and translational parts.",192,{"inputs":[{"name":"translationbase"},{"name":"r"}],"output":{"name":"isometrybase"}}],[11,"inverse","","Inverts `self`.",192,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"inverse_mut","","Inverts `self`.",192,{"inputs":[{"name":"self"}],"output":null}],[11,"append_translation_mut","","Appends to `self` the given translation in-place.",192,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"append_rotation_mut","","Appends to `self` the given rotation in-place.",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"append_rotation_wrt_point_mut","","Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that lets `p` invariant.",192,{"inputs":[{"name":"self"},{"name":"r"},{"name":"pointbase"}],"output":null}],[11,"append_rotation_wrt_center_mut","","Appends in-place to `self` a rotation centered at the point with coordinates `self.translation`.",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"to_homogeneous","","Converts this isometry into its equivalent homogeneous transformation matrix.",192,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",192,null],[11,"default_max_relative","","",192,null],[11,"default_max_ulps","","",192,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",192,null],[11,"ulps_eq","","",192,null],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new identity isometry.",192,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new identity isometry.",192,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",192,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"rotation_wrt_point","","The isometry that applies the rotation `r` with its axis passing through the point `p`. This effectively lets `p` invariant.",192,{"inputs":[{"name":"r"},{"name":"pointbase"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation angle.",192,{"inputs":[{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation angle.",192,{"inputs":[{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation axis-angle.",192,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new","","Creates a new isometry from a translation and a rotation axis-angle.",192,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",192,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"div","","",192,null],[11,"div","","",192,null],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"div_assign","","",192,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"div_assign","","",192,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul_assign","","",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",192,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"div","","",192,null],[11,"div","","",192,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"identity","","",192,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",192,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",192,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",192,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",192,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",192,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",192,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",192,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",192,null],[11,"append_translation","","",192,null],[11,"prepend_translation","","",192,null],[11,"append_rotation","","",192,null],[11,"prepend_rotation","","",192,null],[11,"append_scaling","","",192,null],[11,"prepend_scaling","","",192,null],[11,"append_rotation_wrt_point","","",192,null],[11,"translation","","",192,{"inputs":[{"name":"self"}],"output":{"name":"translationbase"}}],[11,"rotation","","",192,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"scaling","","",192,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"to_superset","","",192,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"is_in_subset","","",192,{"inputs":[{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",192,{"inputs":[{"name":"isometrybase"}],"output":{"name":"self"}}],[11,"to_superset","","",192,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",192,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",192,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",192,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",192,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",192,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",192,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",192,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",192,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"hash","","",193,null],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"from_parts","","Creates a new similarity from its rotational and translational parts.",193,{"inputs":[{"name":"translationbase"},{"name":"r"},{"name":"n"}],"output":{"name":"similaritybase"}}],[11,"from_isometry","","Creates a new similarity from its rotational and translational parts.",193,{"inputs":[{"name":"isometrybase"},{"name":"n"}],"output":{"name":"similaritybase"}}],[11,"from_scaling","","Creates a new similarity that applies only a scaling factor.",193,{"inputs":[{"name":"n"}],"output":{"name":"similaritybase"}}],[11,"inverse","","Inverts `self`.",193,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"inverse_mut","","Inverts `self` in-place.",193,{"inputs":[{"name":"self"}],"output":null}],[11,"set_scaling","","The scaling factor of this similarity transformation.",193,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"prepend_scaling","","The similarity transformation that applies a scaling factor `scaling` before `self`.",193,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"append_scaling","","The similarity transformation that applies a scaling factor `scaling` after `self`.",193,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"prepend_scaling_mut","","Sets `self` to the similarity transformation that applies a scaling factor `scaling` before `self`.",193,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_scaling_mut","","Sets `self` to the similarity transformation that applies a scaling factor `scaling` after `self`.",193,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_translation_mut","","Appends to `self` the given translation in-place.",193,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"append_rotation_mut","","Appends to `self` the given rotation in-place.",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"append_rotation_wrt_point_mut","","Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that lets `p` invariant.",193,{"inputs":[{"name":"self"},{"name":"r"},{"name":"pointbase"}],"output":null}],[11,"append_rotation_wrt_center_mut","","Appends in-place to `self` a rotation centered at the point with coordinates `self.translation`.",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"to_homogeneous","","Converts this similarity into its equivalent homogeneous transformation matrix.",193,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"scaling","","The scaling factor of this similarity transformation.",193,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"eq","","",193,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"default_epsilon","","",193,null],[11,"default_max_relative","","",193,null],[11,"default_max_ulps","","",193,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",193,null],[11,"ulps_eq","","",193,null],[11,"fmt","","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"identity","","Creates a new identity similarity.",193,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new identity similarity.",193,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",193,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"rotation_wrt_point","","The similarity that applies tha scaling factor `scaling`, followed by the rotation `r` with its axis passing through the point `p`.",193,{"inputs":[{"name":"r"},{"name":"pointbase"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation and a rotation angle.",193,{"inputs":[{"name":"columnvector"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation and a rotation angle.",193,{"inputs":[{"name":"columnvector"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation, rotation axis-angle, and scaling factor.",193,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an similarity that corresponds to the a scaling factor and a local frame of an observer standing at the point `eye` and looking toward `target`.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix including scaling factor.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix including a scaling factor.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"new","","Creates a new similarity from a translation, rotation axis-angle, and scaling factor.",193,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an similarity that corresponds to the a scaling factor and a local frame of an observer standing at the point `eye` and looking toward `target`.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix including scaling factor.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix including a scaling factor.",193,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"div","","",193,null],[11,"div","","",193,null],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul_assign","","",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"div_assign","","",193,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"div","","",193,null],[11,"div","","",193,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"div","","",193,null],[11,"div","","",193,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"div","","",192,null],[11,"div","","",192,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"identity","","",193,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",193,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",193,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",193,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",193,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",193,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",193,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",193,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",193,null],[11,"append_translation","","",193,null],[11,"prepend_translation","","",193,null],[11,"append_rotation","","",193,null],[11,"prepend_rotation","","",193,null],[11,"append_scaling","","",193,null],[11,"prepend_scaling","","",193,null],[11,"append_rotation_wrt_point","","",193,null],[11,"translation","","",193,{"inputs":[{"name":"self"}],"output":{"name":"translationbase"}}],[11,"rotation","","",193,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"scaling","","",193,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"to_superset","","",193,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",193,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",193,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",193,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",193,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",193,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",193,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",193,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",193,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"tgeneral"}}],[11,"hash","","",195,null],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"tgeneral"}],"output":{"name":"bool"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"tprojective"}}],[11,"hash","","",196,null],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"tprojective"}],"output":{"name":"bool"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"taffine"}}],[11,"hash","","",197,null],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"taffine"}],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",195,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",196,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"has_normalizer","","",197,{"inputs":[],"output":{"name":"bool"}}],[11,"check_homogeneous_invariants","","",197,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"from_matrix_unchecked","","Creates a new transformation from the given homogeneous matrix. The transformation category of `Self` is not checked to be verified by the given matrix.",198,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"into_owned","","Moves this transform into one that owns its data.",198,{"inputs":[{"name":"self"}],"output":{"name":"ownedtransform"}}],[11,"clone_owned","","Clones this transform into one that owns its data.",198,{"inputs":[{"name":"self"}],"output":{"name":"ownedtransform"}}],[11,"unwrap","","The underlying matrix.",198,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"matrix","","A reference to the underlynig matrix.",198,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"matrix_mut_unchecked","","A mutable reference to the underlying matrix.",198,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"set_category","","Sets the category of this transform.",198,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"to_homogeneous","","Converts this transform into its equivalent homogeneous transformation matrix.",198,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"try_inverse","","Attempts to invert this transformation. You may use `.inverse` instead of this transformation has a subcategory of `TProjective`.",198,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"inverse","","Inverts this transformation. Use `.try_inverse` if this transform has the `TGeneral` category (it may not be invertible).",198,{"inputs":[{"name":"self"}],"output":{"name":"ownedtransform"}}],[11,"try_inverse_mut","","Attempts to invert this transformation in-place. You may use `.inverse_mut` instead of this transformation has a subcategory of `TProjective`.",198,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse_mut","","Inverts this transformation in-place. Use `.try_inverse_mut` if this transform has the `TGeneral` category (it may not be invertible).",198,{"inputs":[{"name":"self"}],"output":null}],[11,"matrix_mut","","A mutable reference to underlying matrix. Use `.matrix_mut_unchecked` instead if this transformation category is not `TGeneral`.",198,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"identity","","Creates a new identity transform.",198,{"inputs":[],"output":{"name":"self"}}],[11,"one","","Creates a new identity transform.",198,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",198,null],[11,"index_mut","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",194,null],[11,"mul","","",194,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",192,null],[11,"mul","","",192,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",193,null],[11,"mul","","",193,null],[11,"mul","","",198,null],[11,"mul","","",198,null],[11,"mul","","",191,null],[11,"mul","","",191,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",194,null],[11,"div","","",194,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",198,null],[11,"div","","",191,null],[11,"div","","",191,null],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"transformbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"transformbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"similaritybase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"isometrybase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"mul_assign","","",198,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"transformbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"transformbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"translationbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"div_assign","","",198,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"identity","","",198,{"inputs":[],"output":{"name":"self"}}],[11,"inverse","","",198,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",198,{"inputs":[{"name":"self"}],"output":null}],[11,"operate","","",198,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"transform_point","","",198,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",198,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",198,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",198,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"to_superset","","",198,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",198,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",198,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",198,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",198,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",198,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"orthographicbase"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new orthographic projection matrix.",199,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_matrix_unchecked","","Wraps the given matrix to interpret it as a 3D orthographic matrix.",199,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"from_fov","","Creates a new orthographic projection matrix from an aspect ratio and the vertical field of view.",199,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"as_matrix","","A reference to the underlying homogeneous transformation matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"unwrap","","Retrieves the underlying homogeneous matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"inverse","","Retrieves the inverse of the underlying homogeneous matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"to_homogeneous","","Computes the corresponding homogeneous matrix.",199,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"left","","The smallest x-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"right","","The largest x-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"bottom","","The smallest y-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"top","","The largest y-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",199,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"project_point","","Projects a point. Faster than matrix multiplication.",199,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"ownedpoint"}}],[11,"unproject_point","","Un-projects a point. Faster than multiplication by the underlying matrix inverse.",199,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"ownedpoint"}}],[11,"project_vector","","Projects a vector. Faster than matrix multiplication.",199,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedcolumnvector"}}],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_left_and_right","","Sets the view cuboid coordinates along the `x` axis.",199,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"set_bottom_and_top","","Sets the view cuboid coordinates along the `y` axis.",199,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",199,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"rand","","",199,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"perspectivebase"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new perspective matrix from the aspect ratio, y field of view, and near/far planes.",200,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_matrix_unchecked","","Wraps the given matrix to interpret it as a 3D perspective matrix.",200,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"as_matrix","","A reference to the underlying homogeneous transformation matrix.",200,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"unwrap","","Retrieves the underlying homogeneous matrix.",200,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"inverse","","Retrieves the inverse of the underlying homogeneous matrix.",200,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"to_homogeneous","","Computes the corresponding homogeneous matrix.",200,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",200,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"fovy","","Gets the y field of view of the view frustrum.",200,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",200,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",200,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"project_point","","Projects a point. Faster than matrix multiplication.",200,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"ownedpoint"}}],[11,"unproject_point","","Un-projects a point. Faster than multiplication by the matrix inverse.",200,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"ownedpoint"}}],[11,"project_vector","","Projects a vector. Faster than matrix multiplication.",200,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedcolumnvector"}}],[11,"set_aspect","","Updates this perspective matrix with a new `width / height` aspect ratio of the view frustrum.",200,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_fovy","","Updates this perspective with a new y field of view of the view frustrum.",200,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear","","Updates this perspective matrix with a new near plane offset of the view frustrum.",200,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_zfar","","Updates this perspective matrix with a new far plane offset of the view frustrum.",200,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Updates this perspective matrix with new near and far plane offsets of the view frustrum.",200,{"inputs":[{"name":"self"},{"name":"n"},{"name":"n"}],"output":null}],[11,"rand","","",200,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[6,"PointSum","","The type of the result of the sum of a point with a vector.",null,null],[6,"PointMul","","The type of the result of the multiplication of a point by a matrix.",null,null],[6,"OwnedPoint","","A point with an owned storage.",null,null],[6,"Point","","A statically sized D-dimensional column point.",null,null],[6,"Point1","","A statically sized 1-dimensional column point.",null,null],[6,"Point2","","A statically sized 2-dimensional column point.",null,null],[6,"Point3","","A statically sized 3-dimensional column point.",null,null],[6,"Point4","","A statically sized 4-dimensional column point.",null,null],[6,"Point5","","A statically sized 5-dimensional column point.",null,null],[6,"Point6","","A statically sized 6-dimensional column point.",null,null],[6,"OwnedRotation","","A rotation matrix with an owned storage.",null,null],[6,"Rotation","","A D-dimensional rotation matrix.",null,null],[6,"Rotation2","","A 2-dimensional rotation matrix.",null,null],[6,"Rotation3","","A 3-dimensional rotation matrix.",null,null],[6,"OwnedQuaternionBase","","A quaternion with an owned storage allocated by `A`.",null,null],[6,"OwnedUnitQuaternionBase","","A unit quaternion with an owned storage allocated by `A`.",null,null],[6,"UnitQuaternionBase","","A unit quaternions. May be used to represent a rotation.",null,null],[6,"Quaternion","","A statically-allocated quaternion.",null,null],[6,"UnitQuaternion","","A statically-allocated unit quaternion.",null,null],[6,"UnitComplex","","A complex number with a norm equal to 1.",null,null],[6,"OwnedTranslation","","A translation with an owned vector storage.",null,null],[6,"Translation","","A D-dimensional translation.",null,null],[6,"Translation2","","A 2-dimensional translation.",null,null],[6,"Translation3","","A 3-dimensional translation.",null,null],[6,"OwnedIsometryBase","","An isometry that uses a data storage deduced from the allocator `A`.",null,null],[6,"Isometry","","A D-dimensional isometry.",null,null],[6,"Isometry2","","A 2-dimensional isometry using a unit complex number for its rotational part.",null,null],[6,"Isometry3","","A 3-dimensional isometry using a unit quaternion for its rotational part.",null,null],[6,"IsometryMatrix2","","A 2-dimensional isometry using a rotation matrix for its rotation part.",null,null],[6,"IsometryMatrix3","","A 3-dimensional isometry using a rotation matrix for its rotation part.",null,null],[6,"OwnedSimilarityBase","","A similarity that uses a data storage deduced from the allocator `A`.",null,null],[6,"Similarity","","A D-dimensional similarity.",null,null],[6,"Similarity2","","A 2-dimensional similarity.",null,null],[6,"Similarity3","","A 3-dimensional similarity.",null,null],[6,"SimilarityMatrix2","","A 2-dimensional similarity using a rotation matrix for its rotation part.",null,null],[6,"SimilarityMatrix3","","A 3-dimensional similarity using a rotation matrix for its rotation part.",null,null],[6,"OwnedTransform","","A transformation matrix that owns its data.",null,null],[6,"Transform","","A `D`-dimensional general transformation that may not be inversible. Stored as an homogeneous `(D + 1) Ã— (D + 1)` matrix.",null,null],[6,"Projective","","An inversible `D`-dimensional general transformation. Stored as an homogeneous `(D + 1) Ã— (D + 1)` matrix.",null,null],[6,"Affine","","A `D`-dimensional affine transformation. Stored as an homogeneous `(D + 1) Ã— (D + 1)` matrix.",null,null],[6,"Transform2","","A 2D general transformation that may not be inversible. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Projective2","","An inversible 2D general transformation. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Affine2","","A 2D affine transformation. Stored as an homogeneous 3x3 matrix.",null,null],[6,"Transform3","","A 3D general transformation that may not be inversible. Stored as an homogeneous 4x4 matrix.",null,null],[6,"Projective3","","An inversible 3D general transformation. Stored as an homogeneous 4x4 matrix.",null,null],[6,"Affine3","","A 3D affine transformation. Stored as an homogeneous 4x4 matrix.",null,null],[6,"Orthographic3","","A 3D orthographic projection stored as a static homogeneous 4x4 matrix.",null,null],[6,"Perspective3","","A 3D perspective projection stored as a static homogeneous 4x4 matrix.",null,null],[8,"TCategory","","Trait implemented by phantom types identifying the projective transformation type.",null,null],[11,"has_normalizer","","Indicates whether a `Transform` with the category `Self` has a bottom-row different from `0 0 .. 1`.",201,{"inputs":[],"output":{"name":"bool"}}],[10,"check_homogeneous_invariants","","Checks that the given matrix is a valid homogeneous representation of an element of the category `Self`.",201,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[8,"TCategoryMul","","Traits that gives the `Transform` category that is compatible with the result of the multiplication of transformations with categories `Self` and `Other`.",null,null],[16,"Representative","","The transform category that results from the multiplication of a `Transform<Self>` to a `Transform<Other>`. This is usually equal to `Self` or `Other`, whichever is the most general category.",202,null],[8,"SuperTCategoryOf","","Indicates that `Self` is a more general `Transform` category than `Other`.",null,null],[8,"SubTCategoryOf","","Indicates that `Self` is a more specific `Transform` category than `Other`.",null,null],[11,"axpy","nalgebra::core","",0,{"inputs":[{"name":"self"},{"name":"n"},{"name":"self"}],"output":null}],[11,"axpy","nalgebra::geometry","",189,{"inputs":[{"name":"self"},{"name":"n"},{"name":"self"}],"output":null}],[8,"Axpy","nalgebra","Operation that combines scalar multiplication and vector addition.",null,null],[10,"axpy","","Computes `self = a * x + self`.",203,{"inputs":[{"name":"self"},{"name":"a"},{"name":"self"}],"output":null}],[11,"new","","Creates a new identity element.",204,{"inputs":[],"output":{"name":"id"}}],[11,"identity","","",204,{"inputs":[],"output":{"name":"id"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"option"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",204,{"inputs":[],"output":{"name":"id"}}],[11,"is_zero","","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inverse","","",204,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"inverse_mut","","",204,null],[11,"one","","",204,{"inputs":[],"output":{"name":"id"}}],[11,"meet","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"decompose","","",204,null],[11,"append_translation","","",204,null],[11,"prepend_translation","","",204,null],[11,"append_rotation","","",204,null],[11,"prepend_rotation","","",204,null],[11,"append_scaling","","",204,null],[11,"prepend_scaling","","",204,null],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"add_assign","","",204,null],[11,"to_superset","","",204,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_in_subset","","",204,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",204,{"inputs":[{"name":"t"}],"output":{"name":"id"}}],[11,"operate","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"translation","","",204,null],[11,"rotation","","",204,null],[11,"scaling","","",204,null],[11,"default_epsilon","","",204,null],[11,"default_max_relative","","",204,null],[11,"default_max_ulps","","",204,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",204,null],[11,"ulps_eq","","",204,null],[11,"add","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"div_assign","","",204,null],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"transform_point","","",204,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"transform_vector","","",204,null],[11,"powf","","",204,null],[11,"rotation_between","","",204,null],[11,"scaled_rotation_between","","",204,null],[11,"to_vector","","",204,null],[11,"from_vector","","",204,null],[11,"div","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"mul","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"join","","",204,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[11,"inverse_transform_point","","",204,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"e"}}],[11,"inverse_transform_vector","","",204,null],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"mul_assign","","",204,null],[11,"diagonal","nalgebra::core","Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.",205,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"trace","","Computes a trace of a square matrix, i.e., the sum of its diagonal elements.",205,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"to_homogeneous","","Computes the coordinates in projective space of this vector, i.e., appends a `0` to its coordinates.",206,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"from_homogeneous","","Constructs a vector from coordinates in projective space, i.e., removes a `0` at the end of `self`. Returns `None` if this last component is not zero.",206,{"inputs":[{"name":"columnvector"}],"output":{"name":"option"}}],[11,"from_diagonal","","Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.",205,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"x","","The column vector with a 1 as its first component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"y","","The column vector with a 1 as its second component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"z","","The column vector with a 1 as its third component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"w","","The column vector with a 1 as its fourth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"a","","The column vector with a 1 as its fifth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"b","","The column vector with a 1 as its sixth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"self"}}],[11,"x_axis","","The unit column vector with a 1 as its first component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"y_axis","","The unit column vector with a 1 as its second component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"z_axis","","The unit column vector with a 1 as its third component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"w_axis","","The unit column vector with a 1 as its fourth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"a_axis","","The unit column vector with a 1 as its fifth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"b_axis","","The unit column vector with a 1 as its sixth component, and zero elsewhere.",206,{"inputs":[],"output":{"name":"unit"}}],[11,"is_orthogonal","","Checks that this matrix is orthogonal, i.e., that it is square and `M Ã— Máµ€ = Id`.",205,null],[11,"is_special_orthogonal","","Checks that this matrix is orthogonal and has a determinant equal to 1.",205,null],[11,"is_invertible","","Returns `true` if this matrix is invertible.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"identity","","",205,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",205,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"determinant","","This matrix determinant.",205,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"try_inverse","","Attempts to invert this matrix.",205,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_inverse_mut","","Attempts to invert this matrix in-place. Returns `false` and leaves `self` untouched if inversion fails.",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_scaling","","Creates a new homogeneous matrix that applies the same scaling factor on each dimension.",205,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new_nonuniform_scaling","","Creates a new homogeneous matrix that applies a distinct scaling factor for each dimension.",205,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new_translation","","Creates a new homogeneous matrix that applies a pure translation.",205,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new_rotation","","Builds a 2 dimensional homogeneous rotation matrix from an angle in radian.",205,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"new_rotation","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",205,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new_rotation_wrt_point","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",205,{"inputs":[{"name":"columnvector"},{"name":"ownedpoint"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).",205,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new rotation from Euler angles.",205,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_axis_angle","","Builds a 3D homogeneous rotation matrix from an axis and a rotation angle.",205,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_orthographic","","Creates a new homogeneous matrix for an orthographic projection.",205,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_perspective","","Creates a new homogeneous matrix for a perspective projection.",205,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the point `eye` and looking toward `target`.",205,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",205,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",205,{"inputs":[{"name":"pointbase"},{"name":"pointbase"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"append_scaling","","Computes the transformation equal to `self` followed by an uniform scaling factor.",205,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedsquarematrix"}}],[11,"prepend_scaling","","Computes the transformation equal to an uniform scaling factor followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedsquarematrix"}}],[11,"append_nonuniform_scaling","","Computes the transformation equal to `self` followed by a non-uniform scaling factor.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedsquarematrix"}}],[11,"prepend_nonuniform_scaling","","Computes the transformation equal to a non-uniform scaling factor followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedsquarematrix"}}],[11,"append_translation","","Computes the transformation equal to `self` followed by a translation.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedsquarematrix"}}],[11,"prepend_translation","","Computes the transformation equal to a translation followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"ownedsquarematrix"}}],[11,"append_scaling_mut","","Computes in-place the transformation equal to `self` followed by an uniform scaling factor.",205,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"prepend_scaling_mut","","Computes in-place the transformation equal to an uniform scaling factor followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"append_nonuniform_scaling_mut","","Computes in-place the transformation equal to `self` followed by a non-uniform scaling factor.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"prepend_nonuniform_scaling_mut","","Computes in-place the transformation equal to a non-uniform scaling factor followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"append_translation_mut","","Computes the transformation equal to `self` followed by a translation.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"prepend_translation_mut","","Computes the transformation equal to a translation followed by `self`.",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":null}],[11,"transform_vector","","",205,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"transform_point","","",205,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"new_householder_generic","","Get the householder matrix corresponding to a reflexion to the hyperplane defined by `vector`. It can be a reflexion contained in a subspace.",205,{"inputs":[{"name":"d"},{"name":"usize"},{"name":"columnvector"}],"output":{"name":"ownedsquarematrix"}}],[11,"qr","","QR decomposition using Householder reflections.",205,null],[11,"eig","","Eigendecomposition of a square symmetric matrix.",205,null],[11,"cholesky","","Cholesky decomposition G of a square symmetric positive definite matrix A, such that A = G * G^T",205,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"cholesky_unchecked","","Cholesky decomposition G of a square symmetric positive definite matrix A, such that A = G * G^T",205,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"hessenberg","","Hessenberg Returns the matrix `self` in Hessenberg form and the corresponding similarity transformation",205,null],[11,"into_owned","nalgebra::geometry","Moves this unit quaternion into one that owns its data.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"clone_owned","","Clones this unit quaternion into one that owns its data.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"angle","","The rotation angle in [0; pi] of this unit quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"quaternion","","The underlying quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"quaternionbase"}}],[11,"conjugate","","Compute the conjugate of this unit quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"inverse","","Inverts this quaternion if it is not zero.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":{"name":"n"}}],[11,"rotation_to","","The unit quaternion needed to make `self` and `other` coincide.",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"lerp","","Linear interpolation between two unit quaternions.",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"},{"name":"n"}],"output":{"name":"ownedquaternionbase"}}],[11,"nlerp","","Normalized linear interpolation between two unit quaternions.",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"},{"name":"n"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"slerp","","Spherical linear interpolation between two unit quaternions.",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"},{"name":"n"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"try_slerp","","Computes the spherical linear interpolation between two unit quaternions or returns `None` if both quaternions are approximately 180 degrees apart (in which case the interpolation is not well-defined).",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"},{"name":"n"},{"name":"n"}],"output":{"name":"option"}}],[11,"conjugate_mut","","Compute the conjugate of this unit quaternion in-place.",207,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts this quaternion if it is not zero.",207,{"inputs":[{"name":"self"}],"output":null}],[11,"axis","","The rotation axis of this unit quaternion or `None` if the rotation is zero.",207,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"scaled_axis","","The rotation axis of this unit quaternion multiplied by the rotation agle.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedcolumnvector"}}],[11,"exp","","Compute the exponential of a quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"ln","","Compute the natural logarithm of a quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedquaternionbase"}}],[11,"powf","","Raise the quaternion to a given floating power.",207,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ownedunitquaternionbase"}}],[11,"to_rotation_matrix","","Builds a rotation matrix from this unit quaternion.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedrotation"}}],[11,"to_homogeneous","","Converts this unit quaternion into its equivalent homogeneous transformation matrix.",207,{"inputs":[{"name":"self"}],"output":{"name":"ownedsquarematrix"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_epsilon","","",207,null],[11,"default_max_relative","","",207,null],[11,"default_max_ulps","","",207,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",207,null],[11,"ulps_eq","","",207,null],[11,"identity","","The quaternion multiplicative identity.",207,{"inputs":[],"output":{"name":"self"}}],[11,"from_axis_angle","","Creates a new quaternion from a unit vector (the rotation axis) and an angle (the rotation angle).",207,{"inputs":[{"name":"unit"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_quaternion","","Creates a new unit quaternion from a quaternion.",207,{"inputs":[{"name":"quaternionbase"}],"output":{"name":"self"}}],[11,"from_euler_angles","","Creates a new unit quaternion from Euler angles.",207,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"self"}}],[11,"from_rotation_matrix","","Builds an unit quaternion from a rotation matrix.",207,{"inputs":[{"name":"rotationbase"}],"output":{"name":"self"}}],[11,"rotation_between","","The unit quaternion needed to make `a` and `b` be collinear and point toward the same direction.",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"option"}}],[11,"new_observer_frame","","Creates an unit quaternion that corresponds to the local frame of an observer standing at the origin and looking toward `dir`.",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"new","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",207,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.",207,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"one","","",207,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",207,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"div","","",207,null],[11,"div","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"div","","",207,null],[11,"div","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul_assign","","",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"mul_assign","","",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"div_assign","","",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"div_assign","","",207,{"inputs":[{"name":"self"},{"name":"unitquaternionbase"}],"output":null}],[11,"mul_assign","","",207,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",207,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",207,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",207,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"identity","","",207,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",207,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",207,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",207,{"inputs":[{"name":"self"}],"output":null}],[11,"transform_point","","",207,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",207,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",207,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",207,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",207,null],[11,"append_translation","","",207,null],[11,"prepend_translation","","",207,null],[11,"append_rotation","","",207,null],[11,"prepend_rotation","","",207,null],[11,"append_scaling","","",207,null],[11,"prepend_scaling","","",207,null],[11,"translation","","",207,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",207,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",207,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",207,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",207,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"unitquaternionbase"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"unitquaternionbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"unitquaternionbase"}],"output":{"name":"self"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"rotationbase"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"rotationbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"rotationbase"}],"output":{"name":"self"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"isometrybase"}],"output":{"name":"self"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",207,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",207,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",207,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"angle","","The rotation angle in `]-pi; pi]` of this unit complex number.",208,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"scaled_axis","","The rotation angle returned as a 1-dimensional vector.",208,{"inputs":[{"name":"self"}],"output":{"name":"vector1"}}],[11,"complex","","The underlying complex number.",208,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"conjugate","","Compute the conjugate of this unit complex number.",208,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","Inverts this complex number if it is not zero.",208,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"angle_to","","The rotation angle needed to make `self` and `other` coincide.",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","The unit complex number needed to make `self` and `other` coincide.",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"conjugate_mut","","Compute in-place the conjugate of this unit complex number.",208,{"inputs":[{"name":"self"}],"output":null}],[11,"inverse_mut","","Inverts in-place this unit complex number.",208,{"inputs":[{"name":"self"}],"output":null}],[11,"powf","","Raise this unit complex number to a given floating power.",208,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"to_rotation_matrix","","Builds the rotation matrix corresponding to this unit complex number.",208,{"inputs":[{"name":"self"}],"output":{"name":"rotation2"}}],[11,"to_homogeneous","","Converts this unit complex number into its equivalent homogeneous transformation matrix.",208,{"inputs":[{"name":"self"}],"output":{"name":"matrix3"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_epsilon","","",208,null],[11,"default_max_relative","","",208,null],[11,"default_max_ulps","","",208,{"inputs":[],"output":{"name":"u32"}}],[11,"relative_eq","","",208,null],[11,"ulps_eq","","",208,null],[11,"identity","","The unit complex number multiplicative identity.",208,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Builds the unit complex number corresponding to the rotation with the angle.",208,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_angle","","Builds the unit complex number corresponding to the rotation with the angle.",208,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"from_scaled_axis","","Builds a unit complex rotation from an angle in radian wrapped in a 1-dimensional vector.",208,{"inputs":[{"name":"columnvector"}],"output":{"name":"self"}}],[11,"from_complex","","Creates a new unit complex number from a complex number.",208,{"inputs":[{"name":"complex"}],"output":{"name":"self"}}],[11,"from_rotation_matrix","","Builds the unit complex number from the corresponding 2D rotation matrix.",208,{"inputs":[{"name":"rotationbase"}],"output":{"name":"self"}}],[11,"rotation_between","","The unit complex needed to make `a` and `b` be collinear and point toward the same direction.",208,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"self"}}],[11,"scaled_rotation_between","","The smallest rotation needed to make `a` and `b` collinear and point toward the same direction, raised to the power `s`.",208,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"self"}}],[11,"one","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"rand","","",208,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"mul","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"mul","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"div","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"div","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":{"name":"unitcomplex"}}],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"div","","",208,null],[11,"div","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul","","",208,null],[11,"mul_assign","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"div_assign","","",208,{"inputs":[{"name":"self"},{"name":"unitcomplex"}],"output":null}],[11,"mul_assign","","",208,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"mul_assign","","",208,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",208,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"div_assign","","",208,{"inputs":[{"name":"self"},{"name":"rotationbase"}],"output":null}],[11,"identity","","",208,{"inputs":[],"output":{"name":"self"}}],[11,"operate","","",208,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"inverse","","",208,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"inverse_mut","","",208,{"inputs":[{"name":"self"}],"output":null}],[11,"transform_point","","",208,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"transform_vector","","",208,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"inverse_transform_point","","",208,{"inputs":[{"name":"self"},{"name":"pointbase"}],"output":{"name":"pointbase"}}],[11,"inverse_transform_vector","","",208,{"inputs":[{"name":"self"},{"name":"columnvector"}],"output":{"name":"columnvector"}}],[11,"decompose","","",208,null],[11,"append_translation","","",208,null],[11,"prepend_translation","","",208,null],[11,"append_rotation","","",208,null],[11,"prepend_rotation","","",208,null],[11,"append_scaling","","",208,null],[11,"prepend_scaling","","",208,null],[11,"translation","","",208,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"rotation","","",208,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"scaling","","",208,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"powf","","",208,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"rotation_between","","",208,{"inputs":[{"name":"columnvector"},{"name":"columnvector"}],"output":{"name":"option"}}],[11,"scaled_rotation_between","","",208,{"inputs":[{"name":"columnvector"},{"name":"columnvector"},{"name":"n"}],"output":{"name":"option"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"unitcomplex"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"unitcomplex"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"rotationbase"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"rotationbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"rotationbase"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"isometrybase"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"isometrybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"isometrybase"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"similaritybase"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"similaritybase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"similaritybase"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"transformbase"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"transformbase"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"transformbase"}],"output":{"name":"self"}}],[11,"to_superset","","",208,{"inputs":[{"name":"self"}],"output":{"name":"squarematrix"}}],[11,"is_in_subset","","",208,{"inputs":[{"name":"squarematrix"}],"output":{"name":"bool"}}],[11,"from_superset_unchecked","","",208,{"inputs":[{"name":"squarematrix"}],"output":{"name":"self"}}],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"div","","",207,null],[11,"div","","",207,null],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"div","","",207,null],[11,"div","","",207,null],[11,"has_normalizer","","Indicates whether a `Transform` with the category `Self` has a bottom-row different from `0 0 .. 1`.",201,{"inputs":[],"output":{"name":"bool"}}],[11,"mul","","",207,null],[11,"mul","","",207,null],[11,"div","","",207,null],[11,"div","","",207,null]],"paths":[[3,"Matrix"],[8,"Dim"],[8,"DimAdd"],[8,"DimNameAdd"],[8,"DimMul"],[8,"DimNameMul"],[8,"DimSub"],[8,"DimNameSub"],[8,"DimDiv"],[8,"DimNameDiv"],[8,"DimName"],[8,"NamedDim"],[3,"Dynamic"],[3,"U1"],[3,"U0"],[3,"U2"],[3,"U3"],[3,"U4"],[3,"U5"],[3,"U6"],[3,"U7"],[3,"U8"],[3,"U9"],[3,"U10"],[3,"U11"],[3,"U12"],[3,"U13"],[3,"U14"],[3,"U15"],[3,"U16"],[3,"U17"],[3,"U18"],[3,"U19"],[3,"U20"],[3,"U21"],[3,"U22"],[3,"U23"],[3,"U24"],[3,"U25"],[3,"U26"],[3,"U27"],[3,"U28"],[3,"U29"],[3,"U30"],[3,"U31"],[3,"U32"],[3,"U33"],[3,"U34"],[3,"U35"],[3,"U36"],[3,"U37"],[3,"U38"],[3,"U39"],[3,"U40"],[3,"U41"],[3,"U42"],[3,"U43"],[3,"U44"],[3,"U45"],[3,"U46"],[3,"U47"],[3,"U48"],[3,"U49"],[3,"U50"],[3,"U51"],[3,"U52"],[3,"U53"],[3,"U54"],[3,"U55"],[3,"U56"],[3,"U57"],[3,"U58"],[3,"U59"],[3,"U60"],[3,"U61"],[3,"U62"],[3,"U63"],[3,"U64"],[3,"U65"],[3,"U66"],[3,"U67"],[3,"U68"],[3,"U69"],[3,"U70"],[3,"U71"],[3,"U72"],[3,"U73"],[3,"U74"],[3,"U75"],[3,"U76"],[3,"U77"],[3,"U78"],[3,"U79"],[3,"U80"],[3,"U81"],[3,"U82"],[3,"U83"],[3,"U84"],[3,"U85"],[3,"U86"],[3,"U87"],[3,"U88"],[3,"U89"],[3,"U90"],[3,"U91"],[3,"U92"],[3,"U93"],[3,"U94"],[3,"U95"],[3,"U96"],[3,"U97"],[3,"U98"],[3,"U99"],[3,"U100"],[3,"U101"],[3,"U102"],[3,"U103"],[3,"U104"],[3,"U105"],[3,"U106"],[3,"U107"],[3,"U108"],[3,"U109"],[3,"U110"],[3,"U111"],[3,"U112"],[3,"U113"],[3,"U114"],[3,"U115"],[3,"U116"],[3,"U117"],[3,"U118"],[3,"U119"],[3,"U120"],[3,"U121"],[3,"U122"],[3,"U123"],[3,"U124"],[3,"U125"],[3,"U126"],[3,"U127"],[8,"DimEq"],[8,"SameNumberOfRows"],[8,"SameNumberOfColumns"],[8,"SameDimension"],[8,"Allocator"],[8,"Storage"],[8,"StorageMut"],[8,"OwnedStorage"],[3,"X"],[3,"XY"],[3,"XYZ"],[3,"XYZW"],[3,"XYZWA"],[3,"XYZWAB"],[3,"IJKW"],[3,"M2x2"],[3,"M2x3"],[3,"M2x4"],[3,"M2x5"],[3,"M2x6"],[3,"M3x2"],[3,"M3x3"],[3,"M3x4"],[3,"M3x5"],[3,"M3x6"],[3,"M4x2"],[3,"M4x3"],[3,"M4x4"],[3,"M4x5"],[3,"M4x6"],[3,"M5x2"],[3,"M5x3"],[3,"M5x4"],[3,"M5x5"],[3,"M5x6"],[3,"M6x2"],[3,"M6x3"],[3,"M6x4"],[3,"M6x5"],[3,"M6x6"],[3,"MatrixIter"],[3,"MatrixIterMut"],[3,"DefaultAllocator"],[3,"Unit"],[3,"SliceStorage"],[3,"SliceStorageMut"],[3,"MatrixArray"],[3,"MatrixVec"],[3,"PointBase"],[3,"QuaternionBase"],[3,"TranslationBase"],[3,"IsometryBase"],[3,"SimilarityBase"],[3,"RotationBase"],[4,"TGeneral"],[4,"TProjective"],[4,"TAffine"],[3,"TransformBase"],[3,"OrthographicBase"],[3,"PerspectiveBase"],[8,"TCategory"],[8,"TCategoryMul"],[8,"Axpy"],[3,"Id"],[6,"SquareMatrix"],[6,"ColumnVector"],[6,"UnitQuaternionBase"],[6,"UnitComplex"]]};
searchIndex["ncollide"] = {"doc":"ncollide ========","items":[[8,"Vector","ncollide::math","Trait implemented by vector types usable by ncollide.",null,null],[10,"sample_sphere","","Iterate through the samples.",0,null],[8,"Point","","Trait implemented by point types usable by ncollide.",null,null],[16,"Vector","","",1,null],[8,"Isometry","","Trait implemented by isometry types usable by ncollide.",null,null],[10,"absolute_rotate_vector","","Computes the product `abs(rot) * v` where `abs(self)` is the absolute value of the matrix representation of `self.rotation()`.",2,null],[0,"data","ncollide::utils","Data structure utilities.",null,null],[0,"pair","ncollide::utils::data","Hashable pair of objects implementing `HasUid`.",null,null],[3,"Pair","ncollide::utils::data::pair","An unordered pair of elements implementing `HasUid`.",null,null],[12,"first","","first object of the pair",3,null],[12,"second","","second object of the pair",3,null],[3,"PairTWHash","","Tomas Wang based hash function for a `Pair` object.",null,null],[0,"hash","ncollide::utils::data","Trait for hash functions.",null,null],[8,"HashFun","ncollide::utils::data::hash","Hash function.",null,null],[10,"hash","","Hash function.",4,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"usize"}}],[3,"UintPairTWHash","","Hash function for pairs of `usize`, using the Tomas Wang hash.",null,null],[3,"UintTWHash","","Hash function for `usize`.",null,null],[5,"key_from_pair","","Combines two `usize` on a single one.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"tomas_wang_hash","","Tomas Wang integer hash function.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[0,"hash_map","ncollide::utils::data","An hash map with a customizable hash function.",null,null],[3,"Entry","ncollide::utils::data::hash_map","Entry of an `HashMap`.",null,null],[12,"key","","The key of the entry.",5,null],[12,"value","","The value of the entry.",5,null],[3,"HashMap","","Alternative implementation of `HashMap`.",null,null],[0,"owned_allocation_cache","ncollide::utils::data","Allocation cache for owned objects.",null,null],[3,"OwnedAllocationCache","ncollide::utils::data::owned_allocation_cache","Cache for owned objects.",null,null],[0,"vec_slice","ncollide::utils::data","Slicing on non-contiguous data.",null,null],[3,"VecSlice","ncollide::utils::data::vec_slice","A vector slice with a specific length and stride.",null,null],[3,"VecSliceMut","","A mutable vector slice with a specific length and stride.",null,null],[0,"ref_with_cost","ncollide::utils::data","A reference packed with a cost value.",null,null],[3,"RefWithCost","ncollide::utils::data::ref_with_cost","A reference packed with a cost value.",null,null],[12,"object","","The reference to an object.",6,null],[12,"cost","","The cost of the object.",6,null],[0,"uid_remap","ncollide::utils::data","A map allowing a slow lookup for arbitrary `usize` and fast lookup for small ones.",null,null],[3,"FastKey","ncollide::utils::data::uid_remap","A special type of key used by `UidRemap` to perform faster lookups than with the user-defined id of type `usize`.",null,null],[3,"UidRemap","","A set of values having large usize key.",null,null],[3,"FastKeys","","An iterator through a `UidRemap` fast keys in use.",null,null],[3,"FastKeysAndValues","","An iterator through a `UidRemap` fast keys and values.",null,null],[3,"FastKeysAndValuesMut","","An iterator through a `UidRemap` fast keys and values.",null,null],[0,"vec_map","ncollide::utils::data","A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).",null,null],[3,"VecMap","ncollide::utils::data::vec_map","A map optimized for small integer keys.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",7,null],[13,"Occupied","","An occupied Entry",7,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[5,"triangle_perimeter","ncollide::utils","Computes the perimeter of a triangle.",null,null],[5,"tetrahedron_signed_volume","","Computes the signed volume of a tetrahedron.",null,null],[5,"binom","","Computes the binomial coefficient C^k_n (\"k among n\").",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"median","","Computes the median of a set of values.",null,null],[5,"point_cloud_support_point","","Computes the support point of a cloud of points.",null,null],[5,"cross3","","A 3d cross product that do not require the `Cross<Self, Self>` trait impl.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"v"}}],[5,"remove_unused_points","","Given an index buffer, remove from `points` every point that is not indexed.",null,null],[8,"AsBytes","","Trait that transforms thing to a slice of u8.",null,null],[10,"as_bytes","","",8,null],[5,"circumcircle","","Computes the circumcircle of a triangle.",null,null],[5,"sort3","","Sorts a set of three values in increasing order.",null,null],[5,"triangle_area","","Computes the area of a triangle.",null,null],[5,"tetrahedron_volume","","Computes the volume of a tetrahedron.",null,null],[5,"is_point_in_triangle","","Tests if a point is inside of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"repeat","","Creates a vector with all its components equal to `e`.",null,null],[5,"is_affinely_dependent_triangle3","","Tests if three 3D points are approximately aligned.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"center","","Computes the center of a set of point.",null,null],[5,"triangle_center","","Computes the center of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"dsin","","Computes the n-th derivative of the sinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"tetrahedron_center","","Computes the center of a tetrahedron.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[3,"HashablePartialEq","","A structure that implements `Eq` and is hashable even if the wrapped data implements only `PartialEq`.",null,null],[5,"dcos","","Computes the n-th derivative of the cosinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[0,"shape","ncollide","Collision shapes supported by ncollide.",null,null],[6,"Ball2","ncollide::shape","A 2D ball.",null,null],[6,"Plane2","","A 2D plane.",null,null],[6,"Cuboid2","","A 2D cuboid.",null,null],[6,"Capsule2","","A 2D capsule.",null,null],[6,"Cone2","","A 2D cone.",null,null],[6,"Cylinder2","","A 2D cylinder.",null,null],[6,"ConvexHull2","","A 2D convex polytope.",null,null],[6,"Segment2","","A 2D segment.",null,null],[6,"Triangle2","","A 2D triangle.",null,null],[6,"Polyline2","","A 2D polyline.",null,null],[6,"Compound2","","A 2D compound shape.",null,null],[6,"CompositeShape2","","A 2D abstract composite shape.",null,null],[6,"SupportMap2","","A 2D abstract support mapping.",null,null],[6,"Shape2","","A 2D dynamic shape.",null,null],[6,"ShapeHandle2","","A 2D shared dynamic shape handle.",null,null],[6,"Ball3","","A 3D ball.",null,null],[6,"Plane3","","A 3D plane.",null,null],[6,"Cuboid3","","A 3D cuboid.",null,null],[6,"Capsule3","","A 3D capsule.",null,null],[6,"Cone3","","A 3D cone.",null,null],[6,"Cylinder3","","A 3D cylinder.",null,null],[6,"ConvexHull3","","A 3D convex polytope.",null,null],[6,"Segment3","","A 3D segment.",null,null],[6,"Triangle3","","A 3D triangle.",null,null],[6,"Polyline3","","A 3D polyline.",null,null],[6,"TriMesh3","","A 3D triangle mesh.",null,null],[6,"Compound3","","A 3D compound shape.",null,null],[6,"CompositeShape3","","A 3D abstract composite shape.",null,null],[6,"SupportMap3","","A 3D abstract support mapping.",null,null],[6,"Shape3","","A 3D dynamic shape.",null,null],[6,"ShapeHandle3","","A 3D shared dynamic shape handle.",null,null],[3,"Capsule","","SupportMap description of a capsule shape with its principal axis aligned with the `y` axis.",null,null],[3,"BaseMesh","","A mesh generic wrt. the contained mesh elements characterized by vertices.",null,null],[8,"Shape","","Trait implemented by all shapes supported by ncollide.",null,null],[10,"aabb","","The AABB of `self`.",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","The bounding sphere of `self`.",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","The `RayCast` implementation of `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","The `PointQuery` implementation of `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","The support mapping of `self` if applicable.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_composite_shape","","The composite shape representation of `self` if applicable.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","Whether `self` uses a supportmapping-based representation.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_composite_shape","","Whether `self` uses a composite shape-based representation.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[3,"ConvexHull","","The implicit convex hull of a set of points.",null,null],[6,"AnnotatedCSO","","Type of an implicit representation of the Configuration Space Obstacle formed by two geometric objects. Uses return `AnnotatedPoint` instead of regular points, i.e., keeps tracks of the original points that yielded a given CSO support point.",null,null],[3,"Cuboid","","Shape of a box.",null,null],[8,"SupportMap","","Traits of convex shapes representable by a support mapping function.",null,null],[10,"support_point","","Evaluates the support function of the object. A support function is a function associating a vector to the shape point which maximizes their dot product. This does not include the `margin` of the object. Margins are shape-dependent. Use `support_point` to sample the complete shape.",10,null],[3,"Reflection","","SupportMap representation of the reflection of a shape.",null,null],[3,"Segment","","A segment shape.",null,null],[3,"TriMesh","","Shape commonly known as a 2d line strip or a 3d triangle mesh.",null,null],[3,"Cone","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"Torus","","A torus.",null,null],[6,"CSO","","Type of an implicit representation of the Configuration Space Obstacle formed by two geometric objects.",null,null],[3,"Compound","","A compound shape with an aabb bounding volume.",null,null],[5,"cso_support_point","","Computes the support point of the CSO `g1 - g2` on a given direction.",null,null],[3,"Ball","","A Ball shape.",null,null],[3,"AnnotatedMinkowskiSum","","Same as the MinkowskiSum but with a support mapping which keeps track of the original supports points from the two wrapped shapes.",null,null],[8,"BaseMeshElement","","Trait implemented by elements usable on the Mesh.",null,null],[10,"new_with_vertices_and_indices","","Creates a new mesh element from a set of vertices and indices.",11,null],[8,"CompositeShape","","Trait implemented by shapes composed of multiple simpler shapes.",null,null],[10,"map_part_at","","Applies a function to each sub-shape of this concave shape.",12,null],[10,"map_transformed_part_at","","Applies a transformation matrix and a function to each sub-shape of this concave shape.",12,null],[10,"aabb_at","","Gets the AABB of the shape identified by the index `i`.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"aabb"}}],[10,"bvt","","Gets the acceleration structure of the concave shape.",12,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[3,"ShapeHandle","","A shared immutable handle to an abstract shape.",null,null],[3,"Polyline","","Shape commonly known as a 2d line strip or a 3d segment mesh.",null,null],[3,"Cylinder","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"Plane","","SupportMap description of a plane.",null,null],[3,"Triangle","","A triangle shape.",null,null],[3,"MinkowskiSum","","SupportMap representation of the Minkowski sum of two shapes.",null,null],[0,"bounding_volume","ncollide","Bounding volumes.",null,null],[6,"BoundingSphere2","ncollide::bounding_volume","A 2D bounding sphere.",null,null],[6,"AABB2","","A 2D AABB.",null,null],[6,"BoundingSphere3","","A 3D bounding sphere:",null,null],[6,"AABB3","","A 3D AABB.",null,null],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[3,"BoundingSphere","","A Bounding Sphere.",null,null],[5,"point_cloud_aabb","","Computes the AABB of a set of point.",null,null],[5,"bounding_sphere","","Computes the bounding sphere of a shape `g` transformed by `m`.",null,{"inputs":[{"name":"g"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[5,"point_cloud_bounding_sphere","","Computes a bounding sphere of the specified set of point.",null,null],[5,"support_map_aabb","","Computes the AABB of an support mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"}],"output":{"name":"aabb"}}],[5,"ball_aabb","","Computes the Axis-Aligned Bounding Box of a ball.",null,null],[8,"BoundingVolume","","Trait of bounding volumes.",null,null],[10,"center","","Returns a point inside of this bounding volume. This is ideally its center.",13,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[10,"intersects","","Checks if this bounding volume intersect with another one.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"contains","","Checks if this bounding volume contains another one.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"merge","","Merges this bounding volume with another one. The merge is done in-place.",13,null],[10,"merged","","Merges this bounding volume with another one.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"loosen","","Enlarges this bounding volume.",13,null],[10,"loosened","","Creates a new, enlarged version, of this bounding volume.",13,null],[10,"tighten","","Tighten this bounding volume.",13,null],[10,"tightened","","Creates a new, tightened version, of this bounding volume.",13,null],[8,"HasBoundingVolume","","Traits of objects having a bounding volume.",null,null],[10,"bounding_volume","","The bounding volume of `self` transformed by `m`.",14,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"bv"}}],[5,"point_cloud_bounding_sphere_with_center","","Computes the bounding sphere of a set of point, given its center.",null,null],[5,"aabb","","Computes the axis-aligned bounding box of a shape `g` transformed by `m`.",null,{"inputs":[{"name":"g"},{"name":"m"}],"output":{"name":"aabb"}}],[3,"AABB","","An Axis Aligned Bounding Box.",null,null],[0,"partitioning","ncollide","Spatial partitioning tools.",null,null],[3,"BoundingVolumeInterferencesCollector","ncollide::partitioning","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[4,"BinaryPartition","","Result of a binary partition.",null,null],[13,"Part","","Result of the partitioning of one element.",15,null],[13,"Parts","","Result of the partitioning of several elements.",15,null],[8,"BVTTVisitor","","Visitor for the Bounding Volume Traversal Tree.",null,null],[10,"visit_internal_internal","","Visit two internal nodes.",16,{"inputs":[{"name":"self"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_leaf","","Visit two leaves.",16,null],[10,"visit_internal_leaf","","Visit one internal node and one leaf.",16,{"inputs":[{"name":"self"},{"name":"bv"},{"name":"b"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_internal","","Visit one leaf and on internal node.",16,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[8,"BVTVisitor","","Visitor of Bounding Volume Trees.",null,null],[10,"visit_internal","","Visits an internal node. Returns `true` if the internal node children have to be visited too.",17,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf","","Visits a leaf.",17,null],[3,"DBVTLeaf","","Leaf of a Dynamic Bounding Volume Tree.",null,null],[12,"bounding_volume","","The bounding volume of this node.",18,null],[12,"center","","The center of this node bounding volume.",18,null],[12,"object","","An user-defined object.",18,null],[8,"BVTCostFn","","Trait implemented by cost functions used by the best-first search on a `BVT`.",null,null],[16,"UserData","","User-defined data attached to each BVT leaf.",19,null],[10,"compute_bv_cost","","Computes the cost of a bounding volume.",19,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"option"}}],[10,"compute_b_cost","","Computes the cost of an object, and the result to be returned if it is the best one.",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"option"}}],[3,"BVT","","AÂ Boundig Volume Tree.",null,null],[4,"BVTNode","","A node of the bounding volume tree.",null,null],[13,"Internal","","An internal node.",20,null],[13,"Leaf","","A leaf.",20,null],[3,"DBVT","","A Dynamic Bounding Volume Tree.",null,null],[0,"query","ncollide","Non-persistant pairwise geometric queries.",null,null],[0,"algorithms","ncollide::query","Algorithms needed for distance and penetration depth computation.",null,null],[0,"simplex","ncollide::query::algorithms","Abstract definition of a simplex usable by the GJK algorithm.",null,null],[8,"Simplex","ncollide::query::algorithms::simplex","Trait of a simplex usable by the GJK algorithm.",null,null],[10,"reset","","Replace the point of the simplex by a single one. The simplex is reduced to be 0-dimensional.",21,null],[10,"add_point","","Adds a point to the simplex.",21,null],[10,"project_origin_and_reduce","","Project the origin on the simplex and remove any sub-simplex which does not contain the projection.",21,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[10,"project_origin","","Projection the origin on the simplex. The simplex itself is unchanged, although it is mutable for optimization purpose.",21,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[10,"contains_point","","Checks whether a given point is already part of the simplex points.",21,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"dimension","","Dimension of the simplex. A simplex with `n` must be a `n - 1`-dimensional simplex.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"max_sq_len","","The maximum among the simplex point squared lengths.",21,null],[10,"modify_pnts","","Modifies the points contained by this simplex.",21,null],[0,"johnson_simplex","ncollide::query::algorithms","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[3,"JohnsonSimplex","ncollide::query::algorithms::johnson_simplex","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[3,"RecursionTemplate","","Set of indices to explain to the JohnsonSimplex how to do its work. Building this is very time consuming, and thus should be shared between all instances of the Johnson simplex.",null,null],[0,"gjk","ncollide::query::algorithms","The Gilbertâ€“Johnsonâ€“Keerthi distance algorithm.",null,null],[4,"GJKResult","ncollide::query::algorithms::gjk","Results of the GJK algorithm.",null,null],[13,"Intersection","","Result of the GJK algorithm when the origin is inside of the polytope.",22,null],[13,"Projection","","Result of the GJK algorithm when a projection of the origin on the polytope is found.",22,null],[13,"Proximity","","Result of the GJK algorithm when the origin is to close to the polytope but not inside of it.",22,null],[13,"NoIntersection","","Result of the GJK algorithm when the origin is too far away from the polytope.",22,null],[5,"closest_points","","Computes the closest points between two convex shapes unsing the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"closest_points_with_max_dist","","Computes the closest points between two convex shapes unsing the GJK algorithm.",null,null],[5,"distance","","Computes the exact distance separating two convex shapes unsing the GJK. algorithm.",null,null],[5,"proximity","","Computes the closest points between two convex shapes unsing the GJK algorithm.",null,null],[5,"project_origin","","Projects the origin on a shape unsing the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin_with_max_dist","","Projects the origin on a shape using the Separating Axis GJK algorithm. The algorithm will stop as soon as the polytope can be proven to be at least `max_dist` away from the origin.",null,null],[5,"cast_ray","","Casts a ray on a support map using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"}],"output":{"name":"option"}}],[0,"minkowski_sampling","ncollide::query::algorithms","Penetration depth computation algorithm approximating the Minkowskis sum.",null,null],[5,"closest_points","ncollide::query::algorithms::minkowski_sampling","Computes the closest points between two implicit inter-penetrating shapes. Returns None if the shapes are not in penetration. This can be used as a fallback algorithm for the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin","","Projects the origin on a support-mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[0,"contacts_internal","ncollide::query","Implementation details of the `contact` and `contacts` functions.",null,null],[5,"ball_against_ball","ncollide::query::contacts_internal","Contact between balls.",null,null],[5,"shape_against_composite_shape","","Best contact between a shape and a composite (`Mesh`, `Compound`) shape.",null,null],[5,"composite_shape_against_shape","","Best contact between a composite shape (`Mesh`, `Compound`) and any other shape.",null,null],[5,"support_map_against_support_map_with_params","","Contact between support-mapped shapes (`Cuboid`, `ConvexHull`, etc.)",null,null],[3,"Contact","","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",23,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",23,null],[12,"normal","","Contact normal",23,null],[12,"depth","","Penetration depth",23,null],[5,"support_map_against_plane","","Contact between a support-mapped shape (Cuboid, ConvexHull, etc.) and a plane.",null,null],[5,"plane_against_support_map","","Contact between a plane and a support-mapped shape (Cuboid, ConvexHull, etc.)",null,null],[5,"shape_against_shape","","Computes one contact point between two shapes.",null,null],[5,"support_map_against_support_map","","Contact between support-mapped shapes (`Cuboid`, `ConvexHull`, etc.)",null,null],[0,"distance_internal","ncollide::query","Implementation details of the `distance` function.",null,null],[5,"shape_against_shape","ncollide::query::distance_internal","Computes the minimum distance separating two shapes.",null,null],[5,"ball_against_ball","","Distance between balls.",null,null],[5,"shape_against_composite_shape","","Smallest distance between a shape and a composite shape.",null,null],[5,"composite_shape_against_shape","","Smallest distance between a composite shape and any other shape.",null,null],[5,"support_map_against_support_map_with_params","","Distance between support-mapped shapes.",null,null],[5,"support_map_against_plane","","Distance between a support-mapped shape and a plane.",null,null],[5,"plane_against_support_map","","Distance between a plane and a support-mapped shape.",null,null],[5,"support_map_against_support_map","","Distance between support-mapped shapes.",null,null],[0,"proximity_internal","ncollide::query","Implementation details of the `proximity` function.",null,null],[5,"ball_against_ball","ncollide::query::proximity_internal","Proximity between balls.",null,null],[5,"shape_against_composite_shape","","Proximity between a shape and a composite (`Mesh`, `Compound`) shape.",null,null],[5,"composite_shape_against_shape","","Proximity between a composite shape (`Mesh`, `Compound`) and any other shape.",null,null],[5,"support_map_against_support_map_with_params","","Proximity between support-mapped shapes (`Cuboid`, `ConvexHull`, etc.)",null,null],[4,"Proximity","","Proximity information.",null,null],[13,"Intersecting","","The two objects are intersecting.",24,null],[13,"WithinMargin","","The two objects are non-intersecting but closer than a given distance.",24,null],[13,"Disjoint","","The two objects are non-intersecting and further than a given distance.",24,null],[5,"support_map_against_plane","","Proximity between a support-mapped shape (Cuboid, ConvexHull, etc.) and a plane.",null,null],[5,"plane_against_support_map","","Proximity between a plane and a support-mapped shape (Cuboid, ConvexHull, etc.)",null,null],[5,"shape_against_shape","","Tests whether two shapes are in intersecting or separated by a distance smaller than `margin`.",null,null],[5,"support_map_against_support_map","","Proximity between support-mapped shapes (`Cuboid`, `ConvexHull`, etc.)",null,null],[0,"time_of_impact_internal","ncollide::query","Implementation details of the `time_of_impact` function.",null,null],[5,"ball_against_ball","ncollide::query::time_of_impact_internal","Time Of Impact of two balls under translational movement.",null,null],[5,"shape_against_composite_shape","","Time Of Impact of any shape with a composite shape, under translational movement.",null,null],[5,"composite_shape_against_shape","","Time Of Impact of a composite shape with any other shape, under translational movement.",null,null],[5,"shape_against_shape","","Computes the smallest time of impact of two shapes under translational movement.",null,null],[5,"support_map_against_plane","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,null],[5,"plane_against_support_map","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,null],[5,"support_map_against_support_map","","Time of impacts between two support-mapped shapes under translational movement.",null,null],[0,"ray_internal","ncollide::query","Ray-casting related definitions and implementations.",null,null],[6,"Ray3","ncollide::query::ray_internal","A 3D ray.",null,null],[6,"Ray2","","A 2D ray.",null,null],[6,"RayIntersection3","","A 3D ray intersection.",null,null],[6,"RayIntersection2","","A 2D ray intersection.",null,null],[5,"triangle_ray_intersection","","Computes the intersection between a triangle and a ray.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"ray"}],"output":{"name":"option"}}],[3,"RayIntersection","","Structure containing the result of a successful ray cast.",null,null],[12,"toi","","The time of impact of the ray with the object.  The exact contact point can be computed with: `origin + dir * toi` where `origin` is the origin of the ray; `dir` is its direction and `toi` is the value of this field.",25,null],[12,"normal","","The normal at the intersection point.",25,null],[12,"uvs","","The textures coordinates at the intersection point.  This is an `Option` because some shape do not support texture coordinates.",25,null],[3,"Ray","","A Ray.",null,null],[12,"origin","","Starting point of the ray.",26,null],[12,"dir","","Direction of the ray.",26,null],[3,"RayIntersectionCostFn","","A search thet selects the objects that has the smallest time of impact with a given ray.",null,null],[5,"ball_toi_with_ray","","Computes the time of impact of a ray on a ball.",null,null],[5,"plane_toi_with_ray","","Computes the toi of a ray with a plane described by its center and normal.",null,null],[5,"implicit_toi_and_normal_with_ray","","Cast a ray on a shape using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[8,"RayCast","","Traits of objects which can be transformed and tested for intersection with a ray.",null,null],[11,"toi_with_ray","","Computes the time of impact between this transform shape and a ray.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[10,"toi_and_normal_with_ray","","Computes the time of impact, and normal between this transformed shape and a ray.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","Computes time of impact, normal, and texture coordinates (uv) between this transformed shape and a ray.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","Tests whether a ray intersects this transformed shape.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[3,"RayInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given ray.",null,null],[0,"point_internal","ncollide::query","Point inclusion and projection.",null,null],[3,"PointInterferencesCollector","ncollide::query::point_internal","Bounding Volume Tree visitor collecting nodes that may contain a given point.",null,null],[8,"PointQuery","","Trait of objects that can be tested for point inclusion and projection.",null,null],[10,"project_point","","Projects a point on `self` transformed by `m`.",28,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","Computes the minimal distance between a point and `self` transformed by `m`.",28,null],[11,"contains_point","","Tests if the given point is inside of `self` transformed by `m`.",28,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[3,"PointProjection","","Description of the projection of a point on a shape.",null,null],[12,"is_inside","","Whether or not the point to project was inside of the shape.",29,null],[12,"point","","The projection result.",29,null],[3,"PointInterferencesCollector","ncollide::query","Bounding Volume Tree visitor collecting nodes that may contain a given point.",null,null],[6,"RayIntersection3","","A 3D ray intersection.",null,null],[3,"RayIntersection","","Structure containing the result of a successful ray cast.",null,null],[12,"toi","","The time of impact of the ray with the object.  The exact contact point can be computed with: `origin + dir * toi` where `origin` is the origin of the ray; `dir` is its direction and `toi` is the value of this field.",25,null],[12,"normal","","The normal at the intersection point.",25,null],[12,"uvs","","The textures coordinates at the intersection point.  This is an `Option` because some shape do not support texture coordinates.",25,null],[4,"Proximity","","Proximity information.",null,null],[13,"Intersecting","","The two objects are intersecting.",24,null],[13,"WithinMargin","","The two objects are non-intersecting but closer than a given distance.",24,null],[13,"Disjoint","","The two objects are non-intersecting and further than a given distance.",24,null],[8,"PointQuery","","Trait of objects that can be tested for point inclusion and projection.",null,null],[10,"project_point","","Projects a point on `self` transformed by `m`.",28,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","Computes the minimal distance between a point and `self` transformed by `m`.",28,null],[11,"contains_point","","Tests if the given point is inside of `self` transformed by `m`.",28,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[3,"Ray","","A Ray.",null,null],[12,"origin","","Starting point of the ray.",26,null],[12,"dir","","Direction of the ray.",26,null],[3,"RayIntersectionCostFn","","A search thet selects the objects that has the smallest time of impact with a given ray.",null,null],[5,"shape_against_shape","","Computes the minimum distance separating two shapes.",null,null],[6,"Ray3","","A 3D ray.",null,null],[6,"RayIntersection2","","A 2D ray intersection.",null,null],[5,"shape_against_shape","","Computes one contact point between two shapes.",null,null],[5,"shape_against_shape","","Tests whether two shapes are in intersecting or separated by a distance smaller than `margin`.",null,null],[3,"Contact","","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",23,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",23,null],[12,"normal","","Contact normal",23,null],[12,"depth","","Penetration depth",23,null],[8,"RayCast","","Traits of objects which can be transformed and tested for intersection with a ray.",null,null],[11,"toi_with_ray","","Computes the time of impact between this transform shape and a ray.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[10,"toi_and_normal_with_ray","","Computes the time of impact, and normal between this transformed shape and a ray.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","Computes time of impact, normal, and texture coordinates (uv) between this transformed shape and a ray.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","Tests whether a ray intersects this transformed shape.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[5,"shape_against_shape","","Computes the smallest time of impact of two shapes under translational movement.",null,null],[3,"PointProjection","","Description of the projection of a point on a shape.",null,null],[12,"is_inside","","Whether or not the point to project was inside of the shape.",29,null],[12,"point","","The projection result.",29,null],[6,"Ray2","","A 2D ray.",null,null],[3,"RayInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given ray.",null,null],[0,"narrow_phase","ncollide","Persistent collision detection algorithms to compute contact points.",null,null],[6,"ContactAlgorithm2","ncollide::narrow_phase","Trait-object for 2-dimensional contact generation.",null,null],[6,"ContactAlgorithm3","","Trait-object for 3-dimensional contact generation.",null,null],[6,"ProximityAlgorithm","","",null,null],[3,"Contacts","","An iterator through contacts.",null,null],[3,"DefaultContactDispatcher","","Collision dispatcher for shapes defined by `ncollide_entities`.",null,null],[3,"IncrementalContactManifoldGenerator","","Contact manifold generator which keeps track of several contacts.",null,null],[3,"SupportMapPlaneProximityDetector","","Proximity detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"ContactPairs","","Iterator through contact pairs.",null,null],[3,"SupportMapPlaneContactGenerator","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[8,"ProximityDispatcher","","",null,null],[10,"get_proximity_algorithm","","Allocate a collision algorithm corresponding to the given pair of shapes.",30,{"inputs":[{"name":"self"},{"name":"shape"},{"name":"shape"}],"output":{"name":"option"}}],[3,"PlaneSupportMapProximityDetector","","Proximity detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"DefaultNarrowPhase","","Collision detector dispatcher for collision objects.",null,null],[3,"PlaneSupportMapContactGenerator","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[6,"ContactAlgorithm","","",null,null],[3,"ShapeCompositeShapeProximityDetector","","Proximity detector between a shape and a concave shape.",null,null],[8,"NarrowPhase","","Trait implemented by the narrow phase manager.",null,null],[10,"update","","Updates this narrow phase.",31,null],[10,"handle_interaction","","Called when the broad phase detects that two objects are, or stop to be, in close proximity.",31,null],[10,"contact_pairs","","Returns all the potential contact pairs found during the broad phase, and validated by the narrow phase.",31,{"inputs":[{"name":"self"},{"name":"uidremap"}],"output":{"name":"contactpairs"}}],[10,"proximity_pairs","","Returns all the potential proximity pairs found during the broad phase, and validated by the narrow phase.",31,{"inputs":[{"name":"self"},{"name":"uidremap"}],"output":{"name":"proximitypairs"}}],[8,"ProximityDetector","","Trait implemented by algorithms that determine if two objects are in close proximity.",null,null],[10,"update","","Runs the proximity detection on two objects. It is assumed that the same proximity detector (the same structure) is always used with the same pair of object.",32,null],[10,"proximity","","The number of collision detected during the last update.",32,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[3,"BallBallProximityDetector","","Proximity detector between two balls.",null,null],[3,"ShapeCompositeShapeContactGenerator","","Collision detector between a shape and a concave shape.",null,null],[3,"CompositeShapeShapeProximityDetector","","Proximity detector between a concave shape and another shape.",null,null],[8,"ContactDispatcher","","",null,null],[10,"get_contact_algorithm","","Allocate a collision algorithm corresponding to the given pair of shapes.",33,{"inputs":[{"name":"self"},{"name":"shape"},{"name":"shape"}],"output":{"name":"option"}}],[3,"ProximityPairs","","Iterator through proximity pairs.",null,null],[3,"CompositeShapeShapeContactGenerator","","Collision detector between a concave shape and another shape.",null,null],[8,"ProximityHandler","","A signal handler for proximity detection.",null,null],[10,"handle_proximity","","Activate an action for when two objects start or stop to be close to each other.",34,null],[8,"ContactHandler","","A signal handler for contact detection.",null,null],[10,"handle_contact_started","","Activate an action for when two objects start being in contact.",35,null],[10,"handle_contact_stopped","","Activate an action for when two objects stop being in contact.",35,null],[8,"ContactGenerator","","Trait implemented algorithms that compute contact points, normals and penetration depths.",null,null],[10,"update","","Runs the collision detection on two objects. It is assumed that the same collision detector (the same structure) is always used with the same pair of object.",36,null],[10,"num_contacts","","The number of contacts generated the last update.",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"contacts","","Collects the contacts generated during the last update.",36,null],[3,"DefaultProximityDispatcher","","Proximity dispatcher for shapes defined by `ncollide_entities`.",null,null],[3,"SupportMapSupportMapProximityDetector","","Persistent proximity detector between two shapes having a support mapping function.",null,null],[3,"ProximitySignal","","Signal for proximity start/stop.",null,null],[3,"SupportMapSupportMapContactGenerator","","Persistent collision detector between two shapes having a support mapping function.",null,null],[3,"ContactSignal","","Signal for contact start/stop.",null,null],[3,"BallBallContactGenerator","","Collision detector between two balls.",null,null],[3,"OneShotContactManifoldGenerator","","Contact manifold generator producing a full manifold at the first update.",null,null],[0,"broad_phase","ncollide","Broad phases.",null,null],[3,"BroadPhasePairFilters","ncollide::broad_phase","Filters deciding whether a proximity is to be further investigated by the narrow phase or not.",null,null],[8,"BroadPhase","","Trait all broad phase must implement.",null,null],[10,"deferred_add","","Tells the broad phase to add an element during the next update.",37,null],[10,"deferred_remove","","Tells the broad phase to remove an element during the next update.",37,null],[10,"deferred_set_bounding_volume","","Sets the next bounding volume to be used during the update of this broad phase.",37,null],[10,"deferred_recompute_all_proximities","","Forces the broad-phase to recompute and re-report all the proximities.",37,null],[10,"update","","Updates the object additions, removals, and interferences detection.",37,null],[10,"interferences_with_bounding_volume","","Collects every object which might intersect a given bounding volume.",37,null],[10,"interferences_with_ray","","Collects every object which might intersect a given ray.",37,null],[10,"interferences_with_point","","Collects every object which might contain a given point.",37,null],[3,"BruteForceBroadPhase","","A broad phase testing explicitly all bounding volume pairs.",null,null],[3,"DBVTBroadPhase","","Broad phase based on a Dynamic Bounding Volume Tree.",null,null],[8,"BroadPhasePairFilter","","A signal handler for contact detection.",null,null],[10,"is_pair_valid","","Activate an action for when two objects start or stop to be close to each other.",38,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"}],"output":{"name":"bool"}}],[0,"world","ncollide","High level API to detect collisions in large, complex scenes.",null,null],[6,"CollisionWorld3","ncollide::world","A 3D collision world associating collision objects to user-defined data of type `T`.",null,null],[6,"CollisionWorld2","","A 2D collision world associating collision objects to user-defined data of type `T`.",null,null],[6,"CollisionObject3","","A 3D collision object with user-defined data of type `T`.",null,null],[6,"CollisionObject2","","A 2D collision object with user-defined data of type `T`.",null,null],[6,"NarrowPhaseObject","","Type of the narrow phase trait-object used by the collision world.",null,null],[3,"CollisionObject","","A stand-alone object that has a position and a shape.",null,null],[12,"uid","","The collsion object unique identifier.",39,null],[12,"position","","The collision object position.",39,null],[12,"shape","","The collision object shape.",39,null],[12,"collision_groups","","The collision groups of the collision object.",39,null],[12,"query_type","","The kind of queries this collision object is expected to .",39,null],[12,"data","","The user-defined data associated to this object.",39,null],[3,"CollisionGroupsPairFilter","","A collision filter based collision groups.",null,null],[6,"BroadPhaseObject","","Type of the broad phase trait-object used by the collision world.",null,null],[3,"CollisionGroups","","Groups of collision used to filter which object interact with which other one.",null,null],[4,"GeometricQueryType","","The kind of query a CollisionObject may be involved on.",null,null],[13,"Contacts","","This objects can respond to both contact point computation and proximity queries.",40,null],[13,"Proximity","","This object can respond to proximity tests only.",40,null],[3,"CollisionWorld","","A world that handles collision objects.",null,null],[0,"utils","ncollide::procedural","Utilities useful for various generations tasks.",null,null],[5,"push_circle","ncollide::procedural::utils","Pushes a discretized counterclockwise circle to a buffer.",null,null],[5,"push_xy_arc","","Pushes a discretized counterclockwise circle to a buffer. The circle is contained on the plane spanned by the `x` and `y` axis.",null,null],[5,"push_ring_indices","","Creates the faces from two circles with the same discretization.",null,null],[5,"push_open_ring_indices","","Creates the faces from two circles with the same discretization.",null,null],[5,"push_degenerate_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,null],[5,"push_degenerate_open_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,null],[5,"push_filled_circle_indices","","Pushes indices so that a circle is filled with triangles. Each triangle will have the `base_circle` point in common. Pushes `nsubdiv - 2` elements to `out`.",null,null],[5,"push_rectangle_indices","","Given four corner points, pushes to two counterclockwise triangles to `out`.",null,null],[5,"reverse_clockwising","","Reverses the clockwising of a set of faces.",null,null],[5,"split_index_buffer","","Duplicates the indices of each triangle on the given index buffer.",null,null],[5,"split_index_buffer_and_recover_topology","","Duplicates the indices of each triangle on the given index buffer, giving the same id to each identical vertex.",null,null],[5,"compute_normals","","Computes the normals of a set of vertices.",null,null],[0,"path","ncollide::procedural","Path generation.",null,null],[3,"PolylinePath","ncollide::procedural::path","A path with its sample points given by a polyline.",null,null],[3,"ArrowheadCap","","A cap that looks like an arrow.",null,null],[8,"CurveSampler","","A curve sampler.",null,null],[10,"next","","Returns the next sample point.",41,{"inputs":[{"name":"self"}],"output":{"name":"pathsample"}}],[3,"PolylinePattern","","A pattern composed of polyline and two caps.",null,null],[3,"NoCap","","A cap that renders nothing.",null,null],[8,"PolylineCompatibleCap","","Trait to be implemented by caps compatible with a `PolylinePattern`.",null,null],[10,"gen_start_cap","","Generates the mesh for the cap at the beginning of a path.",42,null],[10,"gen_end_cap","","Generates the mesh for the cap at the end of a path.",42,null],[4,"PathSample","","A sample point and its associated tangent.",null,null],[13,"StartPoint","","A point that starts a new path.",43,null],[13,"InnerPoint","","A point that is inside of the path currently generated.",43,null],[13,"EndPoint","","A point that ends the path currently generated.",43,null],[13,"EndOfSample","","Used when the sampler does not have any other points to generate.",43,null],[8,"StrokePattern","","A pattern that is replicated along a path.",null,null],[10,"stroke","","Generates the mesh using this pattern and the curve sampled by `sampler`.",44,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"trimesh"}}],[6,"TriMesh3","ncollide::procedural","A 3D triangle mesh.",null,null],[6,"Polyline3","","A 3D polyline.",null,null],[6,"TriMesh2","","A 2D triangle mesh.",null,null],[6,"Polyline2","","A 2D polyline.",null,null],[5,"unit_cone","","Generates a cone with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"quad","","Adds a double-sided quad to the scene.",null,null],[5,"unit_circle","","Creates a circle lying on the `(x,y)` plane.",null,{"inputs":[{"name":"u32"}],"output":{"name":"polyline"}}],[3,"Polyline","","Geometric description of a polyline.",null,null],[5,"unit_rectangle","","The contour of a unit cuboid lying on the x-y plane.",null,{"inputs":[],"output":{"name":"polyline"}}],[5,"rectangle","","The contour of a cuboid lying on the x-y plane.",null,null],[5,"bezier_curve","","Given a set of control points, generates a (non-rational) Bezier curve.",null,null],[5,"unit_cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[],"output":{"name":"trimesh"}}],[5,"circle","","Creates a circle lying on the `(x,y)` plane.",null,null],[5,"cone","","Generates a cone with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"unit_hemisphere","","Creates an hemisphere with a diameter of 1.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"bezier_surface","","Given a set of control points, generates a (non-rational) Bezier surface.",null,null],[5,"unit_sphere","","Generates a UV sphere centered at the origin and with a unit diameter.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[4,"IndexBuffer","","Different representations of the index buffer.",null,null],[13,"Unified","","The vertex, normal, and uvs share the same indices.",45,null],[13,"Split","","The vertex, normal, and uvs have different indices.",45,null],[5,"sphere","","Generates a UV sphere.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"quad_with_vertices","","Adds a double-sided quad with the specified grid of vertices.",null,null],[5,"unit_cylinder","","Generates a cylinder with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"capsule","","Generates a capsule.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"trimesh"}}],[5,"unit_quad","","Adds a double-sided quad with unit size to the scene.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"trimesh"}}],[3,"TriMesh","","Geometric description of a mesh.",null,null],[12,"coords","","Coordinates of the mesh vertices.",46,null],[12,"normals","","Coordinates of the mesh normals.",46,null],[12,"uvs","","Textures coordinates of the mesh.",46,null],[12,"indices","","Index buffer of the mesh.",46,null],[5,"cylinder","","Generates a cylinder with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"hacd","ncollide::transformation","Approximate convex decomposition of a triangle mesh.",null,null],[5,"convex_hull2_idx","","Computes the convex hull of a set of 2d points and returns only the indices of the hull vertices.",null,null],[8,"ToTriMesh","","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_trimesh","","Builds a triangle mesh from this shape.",47,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"trimesh"}}],[5,"convex_hull3","","Computes the convex hull of a set of 3d points.",null,null],[5,"triangulate","","Triangulates a set of point (sort of) lying on the same 2d plane.",null,null],[8,"ToPolyline","","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_polyline","","Builds a triangle mesh from this shape.",48,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"polyline"}}],[5,"convex_hull2","","Computes the convex hull of a set of 2d points.",null,null],[11,"gen_start_cap","ncollide::procedural::path","",49,null],[11,"gen_end_cap","","",49,null],[11,"gen_end_cap","","",50,null],[11,"gen_start_cap","","",50,null],[11,"stroke","","",51,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"trimesh"}}],[11,"fmt","ncollide::procedural","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","ncollide::procedural::path","",52,{"inputs":[{"name":"self"}],"output":{"name":"pathsample"}}],[11,"clone","ncollide::procedural","",45,{"inputs":[{"name":"self"}],"output":{"name":"indexbuffer"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"trimesh"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"polyline"}}],[11,"eq","ncollide::utils::data::pair","",3,{"inputs":[{"name":"self"},{"name":"pair"}],"output":{"name":"bool"}}],[11,"eq","ncollide::utils::data::ref_with_cost","",6,{"inputs":[{"name":"self"},{"name":"refwithcost"}],"output":{"name":"bool"}}],[11,"eq","ncollide::utils::data::uid_remap","",54,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"eq","ncollide::utils","",55,{"inputs":[{"name":"self"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"hash","ncollide::utils::data::pair","",56,{"inputs":[{"name":"self"},{"name":"pair"}],"output":{"name":"usize"}}],[11,"hash","ncollide::utils::data::hash","",57,null],[11,"hash","","",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"index","ncollide::utils::data::uid_remap","",59,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"o"}}],[11,"index","ncollide::utils::data::vec_map","",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"from_iter","ncollide::utils::data::uid_remap","",59,{"inputs":[{"name":"i"}],"output":{"name":"uidremap"}}],[11,"from_iter","ncollide::utils::data::vec_map","",60,{"inputs":[{"name":"i"}],"output":{"name":"vecmap"}}],[11,"decode","ncollide::utils::data::pair","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","ncollide::utils::data::hash","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","ncollide::utils::data::hash_map","",5,{"inputs":[{"name":"__dkv"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__dkvh"}],"output":{"name":"result"}}],[11,"decode","ncollide::utils::data::uid_remap","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","ncollide::utils","",55,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"into_iter","ncollide::utils::data::vec_map","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",60,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"default","ncollide::utils::data::uid_remap","",59,{"inputs":[],"output":{"name":"uidremap"}}],[11,"default","ncollide::utils::data::vec_map","",60,{"inputs":[],"output":{"name":"vecmap"}}],[11,"cmp","ncollide::utils::data::ref_with_cost","",6,{"inputs":[{"name":"self"},{"name":"refwithcost"}],"output":{"name":"ordering"}}],[11,"cmp","ncollide::utils::data::uid_remap","",54,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","ncollide::utils::data::ref_with_cost","",6,{"inputs":[{"name":"self"},{"name":"refwithcost"}],"output":{"name":"option"}}],[11,"partial_cmp","ncollide::utils::data::uid_remap","",54,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"next","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","ncollide::utils::data::vec_map","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next","","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"hash","","",60,null],[11,"hash","ncollide::utils","",55,null],[11,"hash","ncollide::utils::data::uid_remap","",54,null],[11,"fmt","ncollide::utils::data::vec_map","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","ncollide::utils::data::uid_remap","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","ncollide::utils","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","ncollide::utils::data::vec_map","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",67,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extend","ncollide::utils::data::uid_remap","",59,null],[11,"extend","ncollide::utils::data::vec_map","",60,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",60,null],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"clone","ncollide::utils::data::pair","",3,{"inputs":[{"name":"self"}],"output":{"name":"pair"}}],[11,"clone","ncollide::utils::data::hash","",57,{"inputs":[{"name":"self"}],"output":{"name":"uintpairtwhash"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"uinttwhash"}}],[11,"clone","ncollide::utils::data::hash_map","",5,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"clone","ncollide::utils::data::uid_remap","",54,{"inputs":[{"name":"self"}],"output":{"name":"fastkey"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"uidremap"}}],[11,"clone","ncollide::utils","",55,{"inputs":[{"name":"self"}],"output":{"name":"hashablepartialeq"}}],[11,"encode","ncollide::utils::data::pair","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","ncollide::utils::data::hash","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","ncollide::utils::data::hash_map","",5,{"inputs":[{"name":"self"},{"name":"__skv"}],"output":{"name":"result"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__skvh"}],"output":{"name":"result"}}],[11,"encode","ncollide::utils::data::uid_remap","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","ncollide::utils","",55,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"index_mut","ncollide::utils::data::vec_map","",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"eq","ncollide::world","",40,{"inputs":[{"name":"self"},{"name":"geometricquerytype"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"geometricquerytype"}],"output":{"name":"bool"}}],[11,"decode","","",40,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"update","ncollide::narrow_phase","",71,null],[11,"num_contacts","","",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",71,null],[11,"update","","",72,null],[11,"num_contacts","","",72,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",72,null],[11,"update","","",73,null],[11,"num_contacts","","",73,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",73,null],[11,"update","","",74,null],[11,"num_contacts","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",74,null],[11,"update","","",75,null],[11,"num_contacts","","",75,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",75,null],[11,"update","","",76,null],[11,"num_contacts","","",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",76,null],[11,"update","","",77,null],[11,"num_contacts","","",77,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",77,null],[11,"update","","",78,null],[11,"num_contacts","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",78,null],[11,"get_proximity_algorithm","","",79,{"inputs":[{"name":"self"},{"name":"shape"},{"name":"shape"}],"output":{"name":"option"}}],[11,"deferred_add","ncollide::broad_phase","",80,null],[11,"deferred_remove","","",80,null],[11,"deferred_set_bounding_volume","","",80,null],[11,"deferred_recompute_all_proximities","","",80,null],[11,"update","","",80,null],[11,"interferences_with_bounding_volume","","",80,null],[11,"interferences_with_ray","","",80,null],[11,"interferences_with_point","","",80,null],[11,"deferred_add","","",81,null],[11,"deferred_remove","","",81,null],[11,"update","","",81,null],[11,"deferred_set_bounding_volume","","",81,null],[11,"deferred_recompute_all_proximities","","",81,null],[11,"interferences_with_bounding_volume","","",81,null],[11,"interferences_with_ray","","",81,null],[11,"interferences_with_point","","",81,null],[11,"next","ncollide::narrow_phase","",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","ncollide::world","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","ncollide::narrow_phase","",71,{"inputs":[{"name":"self"}],"output":{"name":"ballballcontactgenerator"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"ballballproximitydetector"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"planesupportmapcontactgenerator"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"supportmapplanecontactgenerator"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"supportmapsupportmapcontactgenerator"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"incrementalcontactmanifoldgenerator"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"oneshotcontactmanifoldgenerator"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"planesupportmapproximitydetector"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"supportmapplaneproximitydetector"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"supportmapsupportmapproximitydetector"}}],[11,"clone","ncollide::world","",40,{"inputs":[{"name":"self"}],"output":{"name":"geometricquerytype"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"collisiongroups"}}],[11,"get_contact_algorithm","ncollide::narrow_phase","",89,{"inputs":[{"name":"self"},{"name":"shape"},{"name":"shape"}],"output":{"name":"option"}}],[11,"update","","",85,null],[11,"proximity","","",85,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"update","","",86,null],[11,"proximity","","",86,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"update","","",87,null],[11,"proximity","","",87,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"update","","",88,null],[11,"proximity","","",88,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"update","","",90,null],[11,"proximity","","",90,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"update","","",91,null],[11,"proximity","","",91,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"is_pair_valid","ncollide::world","",92,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"}],"output":{"name":"bool"}}],[11,"update","ncollide::narrow_phase","",93,null],[11,"handle_interaction","","",93,null],[11,"contact_pairs","","",93,{"inputs":[{"name":"self"},{"name":"uidremap"}],"output":{"name":"contactpairs"}}],[11,"proximity_pairs","","",93,{"inputs":[{"name":"self"},{"name":"uidremap"}],"output":{"name":"proximitypairs"}}],[11,"to_polyline","ncollide::shape","",94,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"polyline"}}],[11,"to_polyline","","",95,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"polyline"}}],[11,"to_polyline","","",96,null],[11,"to_polyline","","",97,null],[11,"to_polyline","","",98,null],[11,"to_polyline","","",99,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"polyline"}}],[11,"to_polyline","","",100,null],[11,"to_polyline","","",101,null],[11,"to_trimesh","","",94,null],[11,"to_trimesh","","",95,null],[11,"to_trimesh","","",96,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"trimesh"}}],[11,"to_trimesh","","",97,null],[11,"to_trimesh","","",98,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"trimesh"}}],[11,"to_trimesh","","",102,null],[11,"to_trimesh","","",99,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"trimesh"}}],[11,"to_trimesh","","",101,null],[11,"map_part_at","","",102,null],[11,"map_transformed_part_at","","",102,null],[11,"aabb_at","","",102,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"map_part_at","","",103,null],[11,"map_transformed_part_at","","",103,null],[11,"aabb_at","","",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"map_part_at","","",104,null],[11,"map_transformed_part_at","","",104,null],[11,"aabb_at","","",104,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"center","ncollide::bounding_volume","",105,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"intersects","","",105,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"contains","","",105,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"merge","","",105,null],[11,"merged","","",105,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":{"name":"aabb"}}],[11,"loosen","","",105,null],[11,"loosened","","",105,null],[11,"tighten","","",105,null],[11,"tightened","","",105,null],[11,"center","","",106,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"intersects","","",106,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"contains","","",106,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"merge","","",106,null],[11,"merged","","",106,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":{"name":"boundingsphere"}}],[11,"loosen","","",106,null],[11,"loosened","","",106,null],[11,"tighten","","",106,null],[11,"tightened","","",106,null],[11,"bounding_volume","ncollide::shape","",97,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",96,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",98,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",95,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",101,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",100,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",94,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",107,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",108,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",104,{"inputs":[{"name":"self"},{"name":"m2"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",109,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",102,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",103,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",97,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",96,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",94,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",98,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",95,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",107,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",108,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",104,{"inputs":[{"name":"self"},{"name":"m2"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",101,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",100,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",109,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",102,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",103,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"compute_bv_cost","ncollide::query","",110,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",110,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"option"}}],[11,"is_shape","ncollide::shape","Tests if this shape has a specific type `T`.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_shape","","Performs the cast.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",111,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"support_point","","",97,null],[11,"support_point","","",112,null],[11,"support_point","","",113,null],[11,"support_point","","",100,null],[11,"support_point","","",101,null],[11,"support_point","","",94,null],[11,"support_point","","",95,null],[11,"support_point","","",96,null],[11,"support_point","","",98,null],[11,"support_point","","",99,null],[11,"support_point","","",108,null],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","ncollide::bounding_volume","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","ncollide::query","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_internal","ncollide::bounding_volume","",115,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",115,null],[11,"visit_internal","ncollide::partitioning","",116,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",116,null],[11,"visit_internal","ncollide::query","",117,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",117,null],[11,"visit_internal","","",118,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",118,null],[11,"toi_and_normal_with_ray","ncollide::shape","",107,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",94,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",94,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",94,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",97,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",97,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",97,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide::bounding_volume","",105,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",105,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",105,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",106,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",106,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",106,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",106,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"toi_and_normal_with_ray","ncollide::shape","",98,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",96,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",95,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",108,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",100,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",112,{"inputs":[{"name":"self"},{"name":"m2"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",101,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",104,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",104,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",109,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",109,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",109,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",102,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",102,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",102,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",103,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",103,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",103,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"aabb","","",101,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",101,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",101,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",100,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",100,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",94,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",94,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",97,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",97,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",98,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",98,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",96,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",96,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",108,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",108,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",104,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",104,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_composite_shape","","",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_composite_shape","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",102,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",102,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_composite_shape","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_composite_shape","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",103,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",103,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_composite_shape","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_composite_shape","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",107,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",107,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",107,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"ball"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"ball"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"convexhull"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"convexhull"}],"output":{"name":"bool"}}],[11,"eq","ncollide::bounding_volume","",105,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"eq","ncollide::query::algorithms::johnson_simplex","",119,{"inputs":[{"name":"self"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"eq","ncollide::query","",23,{"inputs":[{"name":"self"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"proximity"}],"output":{"name":"bool"}}],[11,"decode","ncollide::shape","",107,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"decode","","",114,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"decode","","",108,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"decode","ncollide::bounding_volume","",105,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"decode","","",106,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"decode","ncollide::partitioning","",120,{"inputs":[{"name":"__dbbv"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__dbbv"}],"output":{"name":"result"}}],[11,"decode","ncollide::query::algorithms::johnson_simplex","",119,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","ncollide::query::algorithms::gjk","",22,{"inputs":[{"name":"__dpv"}],"output":{"name":"result"}}],[11,"decode","ncollide::query","",23,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"as_ref","ncollide::shape","",111,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"reset","ncollide::query::algorithms::johnson_simplex","",121,null],[11,"dimension","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_sq_len","","",121,null],[11,"contains_point","","",121,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"add_point","","",121,null],[11,"project_origin_and_reduce","","",121,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"project_origin","","",121,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"modify_pnts","","",121,null],[11,"new_with_vertices_and_indices","ncollide::shape","",100,null],[11,"new_with_vertices_and_indices","","",101,null],[11,"encode","","",107,{"inputs":[{"name":"self"},{"name":"__sv"}],"output":{"name":"result"}}],[11,"encode","","",97,{"inputs":[{"name":"self"},{"name":"__sv"}],"output":{"name":"result"}}],[11,"encode","","",100,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"encode","","",101,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"encode","","",98,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"encode","","",114,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"encode","","",108,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"encode","ncollide::bounding_volume","",105,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"encode","","",106,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"encode","ncollide::partitioning","",120,{"inputs":[{"name":"self"},{"name":"__sbbv"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__sbbv"}],"output":{"name":"result"}}],[11,"encode","ncollide::query::algorithms::johnson_simplex","",119,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","ncollide::query::algorithms::gjk","",22,{"inputs":[{"name":"self"},{"name":"__spv"}],"output":{"name":"result"}}],[11,"encode","ncollide::query","",23,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"clone","ncollide::shape","",109,{"inputs":[{"name":"self"}],"output":{"name":"basemesh"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"trimesh"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"polyline"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"compound"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"shapehandle"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"plane"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"cuboid"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"segment"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"triangle"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"ball"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"capsule"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"cone"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"cylinder"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"torus"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"convexhull"}}],[11,"clone","ncollide::bounding_volume","",105,{"inputs":[{"name":"self"}],"output":{"name":"aabb"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"boundingsphere"}}],[11,"clone","ncollide::partitioning","",18,{"inputs":[{"name":"self"}],"output":{"name":"dbvtleaf"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bvtnode"}}],[11,"clone","ncollide::query::algorithms::johnson_simplex","",121,{"inputs":[{"name":"self"}],"output":{"name":"johnsonsimplex"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"recursiontemplate"}}],[11,"clone","ncollide::query::algorithms::gjk","",22,{"inputs":[{"name":"self"}],"output":{"name":"gjkresult"}}],[11,"clone","ncollide::query","",23,{"inputs":[{"name":"self"}],"output":{"name":"contact"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"ray"}}],[11,"project_point","ncollide::shape","",107,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",107,null],[11,"contains_point","","",107,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",94,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",94,null],[11,"contains_point","","",94,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",97,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",97,null],[11,"contains_point","","",97,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide::bounding_volume","",105,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",105,null],[11,"contains_point","","",105,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",106,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",106,null],[11,"contains_point","","",106,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide::shape","",98,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",96,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",95,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",108,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",100,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",101,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",104,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"contains_point","","",104,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",109,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"contains_point","","",109,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",102,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",102,null],[11,"contains_point","","",102,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",103,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",103,null],[11,"contains_point","","",103,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",9,null],[11,"contains_point","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"new","ncollide::utils::data::pair","Builds a new `Pair`.",3,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"pair"}}],[11,"new","","Creates a new PairTWHash",56,{"inputs":[],"output":{"name":"pairtwhash"}}],[11,"new","ncollide::utils::data::hash","Creates a new UintPairTWHash.",57,{"inputs":[],"output":{"name":"uintpairtwhash"}}],[11,"new","","Creates a new UintTWHash.",58,{"inputs":[],"output":{"name":"uinttwhash"}}],[11,"new","ncollide::utils::data::hash_map","Creates a new hash map.",61,{"inputs":[{"name":"h"}],"output":{"name":"hashmap"}}],[11,"new_with_capacity","","Creates a new hash map with a given capacity.",61,{"inputs":[{"name":"usize"},{"name":"h"}],"output":{"name":"hashmap"}}],[11,"elements","","The elements added to this hash map.",61,null],[11,"elements_mut","","The elements added to this hash map.",61,null],[11,"len","","The number of elements contained by this hashmap.",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this hashmap is empty.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Removes everything from this hashmap.",61,null],[11,"remove_elem_at","","Removes the element at the specified position of the element array.",61,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_and_remove","","Removes an element and returns its value if it existed.",61,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"find_or_insert_lazy","","Same as `self.insert_or_replace(key, value, false)` but with `value` a function which is called iff. the value does not exist yet. If the functions returns `None`, nothing is inserted.",61,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"option"}}],[11,"insert_or_replace","","Inserts or replace an element.",61,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"},{"name":"bool"}],"output":{"name":"v"}}],[11,"contains_key","","Checks whether this hashmap contains a specific key.",61,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find","","Finds a reference to the element with a given key.",61,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element on the hash map.",61,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","Remove an element from the hash map.",61,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find_mut","","Gets a mutable reference to an element of the hashmap.",61,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"new","ncollide::utils::data::owned_allocation_cache","Initializes the cache.",122,{"inputs":[],"output":{"name":"ownedallocationcache"}}],[11,"alloc","","Box a value into a potentially already allocated box.",122,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"box"}}],[11,"retain","","Retains a box which can be re-used by the `box` method.",122,null],[11,"clear","","Clears the cache, destroying any stored pointer.",122,null],[11,"new","ncollide::utils::data::vec_slice","Creates a new immutable slice.",123,null],[11,"new_unsafe","","Creates a new immutable slice. The size of the data buffer is not checked.",123,null],[11,"len","","The length of this slice.",123,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Gets the i-th element of the slice.",123,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",123,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","Creates a new mutable slice.",124,null],[11,"new_unsafe","","Creates a new mutable slice. The size of the data buffer is not checked.",124,null],[11,"len","","The length of this slice.",124,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_slice","","Creates an immutable slice from this mutable slice.",124,{"inputs":[{"name":"self"}],"output":{"name":"vecslice"}}],[11,"get","","Gets the i-th element of the slice.",124,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",124,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",124,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",124,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"copy_from","","Copy the content of another slice. Both slices must have the same length.",124,null],[11,"new","ncollide::utils::data::ref_with_cost","Creates a new reference packed with a cost value.",6,{"inputs":[{"name":"t"},{"name":"n"}],"output":{"name":"refwithcost"}}],[11,"new_invalid","ncollide::utils::data::uid_remap","Creates a new invalid key that won't be used by the `UidRemap` structure, ever.",54,{"inputs":[],"output":{"name":"fastkey"}}],[11,"uid","","The small uid contained by this key.",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates an empty `UidRemap`.",59,{"inputs":[{"name":"bool"}],"output":{"name":"uidremap"}}],[11,"get_fast_key","","Gets the fast key associated to the given key.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Return the number of elements in the map.",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",59,null],[11,"get","","Returns a reference to the value corresponding to the key.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast","","Returns a reference to the value corresponding to the fast key.",59,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"contains_fast_key","","Returns true if the map contains a value for the specified fast key.",59,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast_mut","","Returns a mutable reference to the value corresponding to the fast key.",59,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair to the map. If the key already had a value present in the map, that value and its fast key are returned. Otherwise, `None` is returned.",59,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key exists.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"keys","","Returns an iterator visiting all keys.",59,{"inputs":[{"name":"self"}],"output":{"name":"fastkeys"}}],[11,"values","","Returns an iterator visiting all values. The iterator's element type is `&'r O`.",59,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs.",59,{"inputs":[{"name":"self"}],"output":{"name":"fastkeysandvalues"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs with mutable references to the values.",59,{"inputs":[{"name":"self"}],"output":{"name":"fastkeysandvaluesmut"}}],[11,"update","","Updates a value in the map. If the key already exists in the map, modifies the value with `ff` taking `oldval, newval`. Otherwise, sets the value to `newval`. Returns `true` if the key did not already exist in the map.",59,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"update_with_key","","Updates a value in the map. If the key already exists in the map, modifies the value with `ff` taking `key, oldval, newval`. Otherwise, sets the value to `newval`. Returns `true` if the key did not already exist in the map.",59,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"new","ncollide::utils::data::vec_map","Creates an empty `VecMap`.",60,{"inputs":[],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",60,{"inputs":[{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",60,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",60,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",60,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",60,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",60,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",60,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"split_off","","Splits the collection into two at the given key.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"len","","Returns the number of elements in the map.",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",60,null],[11,"get","","Returns a reference to the value corresponding to the key.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",60,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",125,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",126,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",126,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",126,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",126,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",126,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"new","ncollide::utils","Creates a new `HashablePartialEq`. This is unsafe because you must be sure that you really want to transform the wrapped object's partial equality to an equivalence relation.",55,{"inputs":[{"name":"t"}],"output":{"name":"hashablepartialeq"}}],[11,"unwrap","","Gets the wrapped value.",55,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"bounding_sphere","ncollide::shape","The bounding sphere of `self`.",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","The `RayCast` implementation of `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","The `PointQuery` implementation of `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","The support mapping of `self` if applicable.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_composite_shape","","The composite shape representation of `self` if applicable.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","Whether `self` uses a supportmapping-based representation.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_composite_shape","","Whether `self` uses a composite shape-based representation.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a sharable shape handle from a shape.",111,{"inputs":[{"name":"s"}],"output":{"name":"shapehandle"}}],[11,"new","","Creates a new capsule.",95,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"capsule"}}],[11,"half_height","","The capsule half length along the `y` axis.",95,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"radius","","The radius of the capsule's rounded part.",95,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"new","","Builds a new mesh.",109,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",109,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"len","","The number of primitives on thes mesh.",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",109,null],[11,"indices","","The indices of this mesh.",109,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",109,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"element_at","","Gets the i-th mesh element.",109,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"e"}}],[11,"new","","Creates a polytope from a set of point.",108,{"inputs":[{"name":"vec"}],"output":{"name":"convexhull"}}],[11,"points","","The list of points of this convex polytope.",108,null],[11,"new","","Creates a new box from its half-extents. Half-extents are the box half-width along each axis. Each half-extent must be greater than 0.04.",97,{"inputs":[{"name":"v"}],"output":{"name":"cuboid"}}],[11,"half_extents","","The half-extents of this box. Half-extents are the box half-width along each axis.",97,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"new","","Build the reflection of a shape. Since the representation is implicit, the reflection computation is done in constant time.",99,{"inputs":[{"name":"g"}],"output":{"name":"reflection"}}],[11,"shape","","The reflected shape.",99,{"inputs":[{"name":"self"}],"output":{"name":"g"}}],[11,"new","","Creates a new segment from two points.",100,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"segment"}}],[11,"a","","The first point of this segment.",100,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"b","","The second point of this segment.",100,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"new","","Builds a new mesh.",102,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"base_mesh","","The base representation of this mesh.",102,{"inputs":[{"name":"self"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",102,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",102,null],[11,"indices","","The indices of this mesh.",102,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",102,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"triangle_at","","Gets the i-th mesh element.",102,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"triangle"}}],[11,"new","","Creates a new cone.",96,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"cone"}}],[11,"half_height","","The cone half length along the `y` axis.",96,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cone along all but the `y` axis.",96,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"new","","Creates a new torus with the given radiuses.",114,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"torus"}}],[11,"minor_radius","","The torus minor radius.",114,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"major_radius","","The torus major radius.",114,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"new","","Builds a new compound shape.",104,{"inputs":[{"name":"vec"}],"output":{"name":"compound"}}],[11,"shapes","","The shapes of this compound shape.",104,null],[11,"bvt","","The optimization structure used by this compound shape.",104,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"bounding_volumes","","The shapes bounding volumes.",104,null],[11,"aabb_at","","The AABB of the i-th shape compositing this compound.",104,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"new","","Creates a new ball from its radius and center.",94,{"inputs":[{"name":"n"}],"output":{"name":"ball"}}],[11,"radius","","The ball radius.",94,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is implicit, this is done in constant time.",113,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"annotatedminkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",113,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",113,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",113,{"inputs":[{"name":"self"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",113,{"inputs":[{"name":"self"}],"output":{"name":"g2"}}],[11,"new","","Builds a new mesh.",103,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"base_mesh","","The base representation of this mesh.",103,{"inputs":[{"name":"self"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",103,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",103,null],[11,"indices","","The indices of this mesh.",103,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",103,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"segment_at","","Gets the i-th mesh element.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"segment"}}],[11,"new","","Creates a new cylinder.",98,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"cylinder"}}],[11,"half_height","","The cylinder half length along the `y` axis.",98,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cylinder along all but the `y` axis.",98,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"new","","Builds a new plane from its center and its normal.",107,{"inputs":[{"name":"v"}],"output":{"name":"plane"}}],[11,"new_normalized","","Builds a new plane from its center and its normal.",107,{"inputs":[{"name":"v"}],"output":{"name":"plane"}}],[11,"normal","","The plane normal.",107,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"new","","Creates a triangle from three points.",101,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"triangle"}}],[11,"a","","The fist point of this triangle.",101,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"b","","The second point of this triangle.",101,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"c","","The third point of this triangle.",101,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is implicit, this is done in constant time.",112,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"minkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",112,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",112,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",112,{"inputs":[{"name":"self"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",112,{"inputs":[{"name":"self"}],"output":{"name":"g2"}}],[11,"new","ncollide::bounding_volume","Creates a new AABB.",105,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"aabb"}}],[11,"mins","","Reference to the AABB point with the smallest components along each axis.",105,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"maxs","","Reference to the AABB point with the biggest components along each axis.",105,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"center","","The center of this AABB.",105,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"half_extents","","The half extents of this AABB.",105,null],[11,"new","","Creates a new bounding sphere.",106,null],[11,"center","","The bounding sphere center.",106,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"radius","","The bounding sphere radius.",106,null],[11,"transform_by","","Transforms this bounding sphere by `m`.",106,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"new","","Creates a new `BoundingVolumeInterferencesCollector`.",115,{"inputs":[{"name":"bv"},{"name":"vec"}],"output":{"name":"boundingvolumeinterferencescollector"}}],[11,"new","ncollide::partitioning","Creates a new `BoundingVolumeInterferencesCollector`.",116,{"inputs":[{"name":"bv"},{"name":"vec"}],"output":{"name":"boundingvolumeinterferencescollector"}}],[11,"new","","Creates a new leaf.",18,{"inputs":[{"name":"bv"},{"name":"b"}],"output":{"name":"dbvtleaf"}}],[11,"is_root","","Tests if this node is the root.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_detached","","Tests if this node has no parent.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new_with_partitioner","","Builds a bounding volume tree using an user-defined construction function.",120,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"bvt"}}],[11,"visit","","Traverses this tree using an object implementing the `BVTVisitor`trait.",120,null],[11,"visit_bvtt","","Visits the bounding volume traversal tree implicitely formed with `other`.",120,null],[11,"best_first_search","","Performs a best-fist-search on the tree.",120,{"inputs":[{"name":"self"},{"name":"bfs"}],"output":{"name":"option"}}],[11,"root_bounding_volume","","Reference to the bounding volume of the tree root.",120,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"depth","","Computes the depth of this tree.",120,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_balanced","","Creates a balanced `BVT`.",120,{"inputs":[{"name":"vec"}],"output":{"name":"bvt"}}],[11,"median_partitioner_with_centers","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",120,null],[11,"median_partitioner","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",120,null],[11,"bounding_volume","","The bounding volume of this node.",20,{"inputs":[{"name":"self"}],"output":{"name":"bv"}}],[11,"new","","Creates a new Dynamic Bounding Volume Tree.",127,{"inputs":[],"output":{"name":"dbvt"}}],[11,"remove","","Removes a leaf from the tree. Fails if the tree is empty.",127,null],[11,"insert_new","","Creates, inserts, and returns a new leaf with the given content.",127,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bv"}],"output":{"name":"rc"}}],[11,"insert","","Inserts a leaf to the tree.",127,null],[11,"visit","","Traverses this tree using an object implementing the `BVTVisitor`trait.",127,null],[11,"new","ncollide::query::algorithms::johnson_simplex","Creates a new, empty, Johnson simplex.",121,{"inputs":[{"name":"arc"}],"output":{"name":"johnsonsimplex"}}],[11,"new_w_tls","","Creates a new, empty Johnson simplex. The recursion template uses the thread-local one.",121,{"inputs":[],"output":{"name":"johnsonsimplex"}}],[11,"new","","Creates a new set of Recursion simplex sharable between any Johnson simplex having a dimension inferior or equal to `dimension`.",119,{"inputs":[{"name":"usize"}],"output":{"name":"arc"}}],[11,"new","ncollide::query","Creates a new contact.",23,null],[11,"flip","","Reverts the contact normal and swaps `world1` and `world2`.",23,null],[11,"new","","Creates a new ray starting from `origin` and with the direction `dir`. `dir` must be normalized.",26,null],[11,"transform_by","","Transforms this ray by the given isometry.",26,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"ray"}}],[11,"inverse_transform_by","","Transforms this ray by the inverse of the given isometry.",26,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"ray"}}],[11,"translate_by","","Translates this ray by the given vector. Its direction is left unchanged.",26,null],[11,"new_with_uvs","","Creates a new `RayIntersection`.",25,null],[11,"new","","Creates a new `RayIntersection`.",25,null],[11,"toi_with_ray","","Computes the time of impact between this transform shape and a ray.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","Computes time of impact, normal, and texture coordinates (uv) between this transformed shape and a ray.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","Tests whether a ray intersects this transformed shape.",27,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `BestRayInterferenceSearch`.",110,{"inputs":[{"name":"ray"},{"name":"bool"},{"name":"bool"}],"output":{"name":"rayintersectioncostfn"}}],[11,"new","","Creates a new `RayInterferencesCollector`.",117,{"inputs":[{"name":"ray"},{"name":"vec"}],"output":{"name":"rayinterferencescollector"}}],[11,"new","","Initializes a new `PointProjection`.",29,{"inputs":[{"name":"bool"},{"name":"p"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","Computes the minimal distance between a point and `self` transformed by `m`.",28,null],[11,"contains_point","","Tests if the given point is inside of `self` transformed by `m`.",28,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `PointInterferencesCollector`.",118,{"inputs":[{"name":"p"},{"name":"vec"}],"output":{"name":"pointinterferencescollector"}}],[11,"new","ncollide::narrow_phase","Creates a new collision detector between a shape and a concave shape.",78,{"inputs":[],"output":{"name":"shapecompositeshapecontactgenerator"}}],[11,"new","","Creates a new basic collision dispatcher.",89,{"inputs":[],"output":{"name":"defaultcontactdispatcher"}}],[11,"new","","Creates a new incremental contact manifold generator.",75,{"inputs":[{"name":"cd"}],"output":{"name":"incrementalcontactmanifoldgenerator"}}],[11,"get_sub_collision","","Gets a collision from the sub-detector used by this manifold generator. This does not update the manifold itself.",75,null],[11,"add_new_contacts","","Updates the current manifold by adding one point.",75,null],[11,"update_contacts","","Updates the contacts already existing on this manifold.",75,null],[11,"new","","Creates a new collision detector between a concave shape and another shape.",77,{"inputs":[],"output":{"name":"compositeshapeshapecontactgenerator"}}],[11,"new","","Creates a new persistent collision detector between a plane and a shape with a support mapping function.",73,{"inputs":[],"output":{"name":"supportmapplanecontactgenerator"}}],[11,"new","","Creates a new persistent collision detector between a plane and a shape with a support mapping function.",72,{"inputs":[],"output":{"name":"planesupportmapcontactgenerator"}}],[11,"new","","Creates a new persistant collision detector between two shapes with support mapping functions.",74,{"inputs":[{"name":"s"}],"output":{"name":"supportmapsupportmapcontactgenerator"}}],[11,"new","","Creates a new persistent collision detector between two balls.",71,{"inputs":[],"output":{"name":"ballballcontactgenerator"}}],[11,"new","","Creates a new one shot contact manifold generator.",76,{"inputs":[{"name":"cd"}],"output":{"name":"oneshotcontactmanifoldgenerator"}}],[11,"new","","Creates a new persistent collision detector between two balls.",85,{"inputs":[],"output":{"name":"ballballproximitydetector"}}],[11,"new","","Creates a new proximity detector between a concave shape and another shape.",90,{"inputs":[],"output":{"name":"compositeshapeshapeproximitydetector"}}],[11,"new","","Creates a new persistent proximity detector between a plane and a shape with a support mapping function.",86,{"inputs":[],"output":{"name":"planesupportmapproximitydetector"}}],[11,"new","","Creates a new persistant proximity detector between two shapes with support mapping functions.",88,{"inputs":[{"name":"s"}],"output":{"name":"supportmapsupportmapproximitydetector"}}],[11,"new","","Creates a new basic proximity dispatcher.",79,{"inputs":[],"output":{"name":"defaultproximitydispatcher"}}],[11,"new","","Creates a new collision detector between a shape and a concave shape.",91,{"inputs":[],"output":{"name":"shapecompositeshapeproximitydetector"}}],[11,"new","","Creates a new persistent proximity detector between a plane and a shape with a support mapping function.",87,{"inputs":[],"output":{"name":"supportmapplaneproximitydetector"}}],[11,"contacts","","Transforms contact-pairs iterator to an iterator through each individual contact.",82,{"inputs":[{"name":"self"}],"output":{"name":"contacts"}}],[11,"new","","Creates a new `ContactSignal` with no event handler registered.",128,{"inputs":[],"output":{"name":"contactsignal"}}],[11,"register_contact_handler","","Registers an event handler.",128,null],[11,"unregister_contact_handler","","Unregisters an event handler.",128,null],[11,"trigger_contact_started_signal","","Activates the contact started signal, executing all the event handlers.",128,null],[11,"trigger_contact_stopped_signal","","Activates the contact stopped signal, executing all the event handlers.",128,null],[11,"new","","Creates a new `ProximitySignal` with no event handler registered.",129,{"inputs":[],"output":{"name":"proximitysignal"}}],[11,"register_proximity_handler","","Registers an event handler.",129,null],[11,"unregister_proximity_handler","","Unregisters an event handler.",129,null],[11,"trigger_proximity_signal","","Activates the proximity signal, executing all the event handlers.",129,null],[11,"new","","Creates a new `DefaultNarrowPhase`.",93,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"defaultnarrowphase"}}],[11,"new","ncollide::broad_phase","Creates a new set of collision filters.",130,{"inputs":[],"output":{"name":"broadphasepairfilters"}}],[11,"register_collision_filter","","Registers a collision filter.",130,null],[11,"unregister_collision_filter","","Unregisters a collision filter.",130,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_pair_valid","","Tells if the collision between `b1` and `b2` is to be handled by the narrow-phase.",130,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"}],"output":{"name":"bool"}}],[11,"new","","Creates a new brute-force broad phase.",80,{"inputs":[{"name":"n"},{"name":"bool"}],"output":{"name":"bruteforcebroadphase"}}],[11,"new","","Creates a new broad phase based on a Dynamic Bounding Volume Tree.",81,null],[11,"num_interferences","","Number of interferences detected by this broad phase.",81,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","ncollide::world","Creates a new collision object.",39,{"inputs":[{"name":"usize"},{"name":"m"},{"name":"shapehandle"},{"name":"collisiongroups"},{"name":"geometricquerytype"},{"name":"t"}],"output":{"name":"collisionobject"}}],[11,"new","","Creates a new collision filter based collision groups.",92,{"inputs":[],"output":{"name":"collisiongroupspairfilter"}}],[11,"new","","Creates a new `CollisionGroups` that enables interactions with everything except self-interaction.",70,{"inputs":[],"output":{"name":"collisiongroups"}}],[11,"max_group_id","","The maximum allowed group identifier.",70,{"inputs":[],"output":{"name":"usize"}}],[11,"modify_membership","","Adds or removes this entity from the given group.",70,null],[11,"modify_whitelist","","Adds or removes the given group from this entity whitelist.",70,null],[11,"modify_blacklist","","Adds or removes this entity from the given group.",70,null],[11,"set_membership","","Make this object member of the given groups only.",70,null],[11,"set_whitelist","","Whitelists the given groups only (others will be un-whitelisted).",70,null],[11,"set_blacklist","","Blacklists the given groups only (others will be un-blacklisted).",70,null],[11,"copy_membership","","Copies the membership of another collision groups.",70,null],[11,"copy_whitelist","","Copies the whitelist of another collision groups.",70,null],[11,"copy_blacklist","","Copies the blacklist of another collision groups.",70,null],[11,"enable_self_interaction","","Allows the object to interact with itself.",70,null],[11,"disable_self_interaction","","Prevents the object from interacting with itself.",70,null],[11,"is_member_of","","Tests if this entity is part of the given group.",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_group_whitelisted","","Tests if the given group is whitelisted.",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_group_blacklisted","","Tests if the given group is blacklisted.",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"can_interact_with","","Tests whether interactinos with a given group is possible.",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"can_interact_with_groups","","Tests whether two collision groups have at least one group in common.",70,{"inputs":[{"name":"self"},{"name":"collisiongroups"}],"output":{"name":"bool"}}],[11,"can_interact_with_self","","Tests whether self-interaction is enabled.",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"query_limit","","The numerical limit of relevance for this query.",40,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"is_contacts_query","","Returns `true` if this is a contacts query type.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_proximity_query","","Returns `true` if this is a proximity query type.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new collision world.",131,null],[11,"deferred_add","","Adds a collision object to the world.",131,null],[11,"update","","Updates the collision world.",131,null],[11,"deferred_remove","","Marks a collision object for removal from the world during the next update.",131,null],[11,"deferred_set_position","","Sets the position the collision object attached to the specified object will have during the next update.",131,null],[11,"register_broad_phase_pair_filter","","Adds a filter that tells if a potential collision pair should be ignored or not.",131,null],[11,"unregister_broad_phase_pair_filter","","Removes the pair filter named `name`.",131,null],[11,"register_contact_handler","","Registers a handler for contact start/stop events.",131,null],[11,"unregister_contact_handler","","Unregisters a handler for contact start/stop events.",131,null],[11,"register_proximity_handler","","Registers a handler for proximity status change events.",131,null],[11,"unregister_proximity_handler","","Unregisters a handler for proximity status change events.",131,null],[11,"perform_position_update","","Executes the position updates.",131,null],[11,"perform_additions_removals_and_broad_phase","","Actually adds or removes all the objects marked by `.deferred_add(...)` or `.deferred_remove(...)` and updates the broad phase.",131,null],[11,"perform_broad_phase","","Executes the broad phase of the collision detection pipeline.",131,null],[11,"perform_narrow_phase","","Executes the narrow phase of the collision detection pipeline.",131,null],[11,"set_narrow_phase","","Sets a new narrow phase and returns the previous one.",131,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"box"}}],[11,"contact_pairs","","Iterates through all the contact pairs detected since the last update.",131,{"inputs":[{"name":"self"}],"output":{"name":"contactpairs"}}],[11,"proximity_pairs","","Iterates through all the proximity pairs detected since the last update.",131,{"inputs":[{"name":"self"}],"output":{"name":"proximitypairs"}}],[11,"contacts","","Iterates through every contact detected since the last update.",131,{"inputs":[{"name":"self"}],"output":{"name":"contacts"}}],[11,"collision_objects","","Iterates through all collision objects.",131,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"collision_object","","Returns a reference to the collision object identified by `uid`.",131,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"interferences_with_ray","","Computes the interferences between every rigid bodies on this world and a ray.",131,{"inputs":[{"name":"self"},{"name":"ray"},{"name":"collisiongroups"}],"output":{"name":"interferenceswithray"}}],[11,"interferences_with_point","","Computes the interferences between every rigid bodies of a given broad phase, and a point.",131,{"inputs":[{"name":"self"},{"name":"p"},{"name":"collisiongroups"}],"output":{"name":"interferenceswithpoint"}}],[11,"interferences_with_aabb","","Computes the interferences between every rigid bodies of a given broad phase, and a aabb.",131,{"inputs":[{"name":"self"},{"name":"aabb"},{"name":"collisiongroups"}],"output":{"name":"interferenceswithaabb"}}],[11,"new","ncollide::procedural::path","Creates a new polyline-based path.",52,{"inputs":[{"name":"polyline"}],"output":{"name":"polylinepath"}}],[11,"new","","Creates a cap that looks like an arrow.",50,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"arrowheadcap"}}],[11,"new","","Creates a new polyline pattern.",51,{"inputs":[{"name":"polyline"},{"name":"bool"},{"name":"c1"},{"name":"c2"}],"output":{"name":"polylinepattern"}}],[11,"new","","Creates a new `NoCap`.",49,{"inputs":[],"output":{"name":"nocap"}}],[11,"new","ncollide::procedural","Creates a new polyline.",53,{"inputs":[{"name":"vec"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"unwrap","","Moves the polyline data out of it.",53,null],[11,"coords","","The coordinates of this polyline vertices.",53,null],[11,"coords_mut","","The mutable coordinates of this polyline vertices.",53,null],[11,"normals","","The normals of this polyline vertices.",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"normals_mut","","The mutable normals of this polyline vertices.",53,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"translate_by","","Translates each vertex of this polyline.",53,null],[11,"rotate_by","","Rotates each vertex and normal of this polyline.",53,null],[11,"transform_by","","Transforms each vertex and rotates each normal of this polyline.",53,null],[11,"scale_by_scalar","","Scales each vertex of this polyline.",53,null],[11,"scale_by","","Scales each vertex of this mesh.",53,null],[11,"unwrap_unified","","Returns the unified index buffer data or fails.",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"unwrap_split","","Returns the split index buffer data or fails.",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","","Creates a new `TriMesh`.",46,{"inputs":[{"name":"vec"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"has_normals","","Whether or not this triangle mesh has normals.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_uvs","","Whether or not this triangle mesh has texture coordinates.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"translate_by","","Translates each vertex of this mesh.",46,null],[11,"transform_by","","Transforms each vertex and rotates each normal of this mesh.",46,null],[11,"num_triangles","","The number of triangles on this mesh.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rotate_by","","Rotates each vertex and normal of this mesh.",46,null],[11,"recompute_normals","","Recomputes the mesh normals using its vertex coordinates and adjascency informations infered from the index buffer.",46,null],[11,"scale_by","","Scales each vertex of this mesh.",46,null],[11,"scale_by_scalar","","Scales each vertex of this mesh.",46,null],[11,"unify_index_buffer","","Force the mesh to use the same index for vertices, normals and uvs.",46,null],[11,"split_index_buffer","","Forces the mesh to use a different index for the vertices, normals and uvs.",46,null]],"paths":[[8,"Vector"],[8,"Point"],[8,"Isometry"],[3,"Pair"],[8,"HashFun"],[3,"Entry"],[3,"RefWithCost"],[4,"Entry"],[8,"AsBytes"],[8,"Shape"],[8,"SupportMap"],[8,"BaseMeshElement"],[8,"CompositeShape"],[8,"BoundingVolume"],[8,"HasBoundingVolume"],[4,"BinaryPartition"],[8,"BVTTVisitor"],[8,"BVTVisitor"],[3,"DBVTLeaf"],[8,"BVTCostFn"],[4,"BVTNode"],[8,"Simplex"],[4,"GJKResult"],[3,"Contact"],[4,"Proximity"],[3,"RayIntersection"],[3,"Ray"],[8,"RayCast"],[8,"PointQuery"],[3,"PointProjection"],[8,"ProximityDispatcher"],[8,"NarrowPhase"],[8,"ProximityDetector"],[8,"ContactDispatcher"],[8,"ProximityHandler"],[8,"ContactHandler"],[8,"ContactGenerator"],[8,"BroadPhase"],[8,"BroadPhasePairFilter"],[3,"CollisionObject"],[4,"GeometricQueryType"],[8,"CurveSampler"],[8,"PolylineCompatibleCap"],[4,"PathSample"],[8,"StrokePattern"],[4,"IndexBuffer"],[3,"TriMesh"],[8,"ToTriMesh"],[8,"ToPolyline"],[3,"NoCap"],[3,"ArrowheadCap"],[3,"PolylinePattern"],[3,"PolylinePath"],[3,"Polyline"],[3,"FastKey"],[3,"HashablePartialEq"],[3,"PairTWHash"],[3,"UintPairTWHash"],[3,"UintTWHash"],[3,"UidRemap"],[3,"VecMap"],[3,"HashMap"],[3,"FastKeys"],[3,"FastKeysAndValues"],[3,"FastKeysAndValuesMut"],[3,"Keys"],[3,"Values"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"CollisionGroups"],[3,"BallBallContactGenerator"],[3,"PlaneSupportMapContactGenerator"],[3,"SupportMapPlaneContactGenerator"],[3,"SupportMapSupportMapContactGenerator"],[3,"IncrementalContactManifoldGenerator"],[3,"OneShotContactManifoldGenerator"],[3,"CompositeShapeShapeContactGenerator"],[3,"ShapeCompositeShapeContactGenerator"],[3,"DefaultProximityDispatcher"],[3,"BruteForceBroadPhase"],[3,"DBVTBroadPhase"],[3,"ContactPairs"],[3,"Contacts"],[3,"ProximityPairs"],[3,"BallBallProximityDetector"],[3,"PlaneSupportMapProximityDetector"],[3,"SupportMapPlaneProximityDetector"],[3,"SupportMapSupportMapProximityDetector"],[3,"DefaultContactDispatcher"],[3,"CompositeShapeShapeProximityDetector"],[3,"ShapeCompositeShapeProximityDetector"],[3,"CollisionGroupsPairFilter"],[3,"DefaultNarrowPhase"],[3,"Ball"],[3,"Capsule"],[3,"Cone"],[3,"Cuboid"],[3,"Cylinder"],[3,"Reflection"],[3,"Segment"],[3,"Triangle"],[3,"TriMesh"],[3,"Polyline"],[3,"Compound"],[3,"AABB"],[3,"BoundingSphere"],[3,"Plane"],[3,"ConvexHull"],[3,"BaseMesh"],[3,"RayIntersectionCostFn"],[3,"ShapeHandle"],[3,"MinkowskiSum"],[3,"AnnotatedMinkowskiSum"],[3,"Torus"],[3,"BoundingVolumeInterferencesCollector"],[3,"BoundingVolumeInterferencesCollector"],[3,"RayInterferencesCollector"],[3,"PointInterferencesCollector"],[3,"RecursionTemplate"],[3,"BVT"],[3,"JohnsonSimplex"],[3,"OwnedAllocationCache"],[3,"VecSlice"],[3,"VecSliceMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"DBVT"],[3,"ContactSignal"],[3,"ProximitySignal"],[3,"BroadPhasePairFilters"],[3,"CollisionWorld"]]};
searchIndex["ncollide_geometry"] = {"doc":"Geometric entities manipulated by ncollide and operations on them.","items":[[0,"shape","ncollide_geometry","Collision shapes supported by ncollide.",null,null],[3,"Ball","ncollide_geometry::shape","A Ball shape.",null,null],[3,"Plane","","SupportMap description of a plane.",null,null],[3,"Cuboid","","Shape of a box.",null,null],[3,"Capsule","","SupportMap description of a capsule shape with its principal axis aligned with the `y` axis.",null,null],[3,"Cone","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"Cylinder","","SupportMap description of a cylinder shape with its principal axis aligned with the `y` axis.",null,null],[3,"ConvexHull","","The implicit convex hull of a set of points.",null,null],[3,"MinkowskiSum","","SupportMap representation of the Minkowski sum of two shapes.",null,null],[3,"AnnotatedMinkowskiSum","","Same as the MinkowskiSum but with a support mapping which keeps track of the original supports points from the two wrapped shapes.",null,null],[3,"Reflection","","SupportMap representation of the reflection of a shape.",null,null],[3,"Compound","","A compound shape with an aabb bounding volume.",null,null],[3,"BaseMesh","","A mesh generic wrt. the contained mesh elements characterized by vertices.",null,null],[3,"TriMesh","","Shape commonly known as a 2d line strip or a 3d triangle mesh.",null,null],[3,"Polyline","","Shape commonly known as a 2d line strip or a 3d segment mesh.",null,null],[3,"Segment","","A segment shape.",null,null],[3,"Triangle","","A triangle shape.",null,null],[3,"Torus","","A torus.",null,null],[3,"ShapeHandle","","A shared immutable handle to an abstract shape.",null,null],[5,"cso_support_point","","Computes the support point of the CSO `g1 - g2` on a given direction.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"shapehandle"}}],[11,"new","","Creates a sharable shape handle from a shape.",0,{"inputs":[{"name":"s"}],"output":{"name":"shapehandle"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"plane"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__sv"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"new","","Builds a new plane from its center and its normal.",1,{"inputs":[{"name":"v"}],"output":{"name":"plane"}}],[11,"new_normalized","","Builds a new plane from its center and its normal.",1,{"inputs":[{"name":"v"}],"output":{"name":"plane"}}],[11,"normal","","The plane normal.",1,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"cuboid"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cuboid"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__sv"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"new","","Creates a new box from its half-extents. Half-extents are the box half-width along each axis. Each half-extent must be greater than 0.04.",2,{"inputs":[{"name":"v"}],"output":{"name":"cuboid"}}],[11,"half_extents","","The half-extents of this box. Half-extents are the box half-width along each axis.",2,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"support_point","","",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is implicit, this is done in constant time.",3,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"minkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",3,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",3,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",3,{"inputs":[{"name":"self"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",3,{"inputs":[{"name":"self"}],"output":{"name":"g2"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds the Minkowski sum of two shapes. Since the representation is implicit, this is done in constant time.",4,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"}],"output":{"name":"annotatedminkowskisum"}}],[11,"m1","","The transformation matrix of the first shape of this Minkowski Sum.",4,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"m2","","The transformation matrix of the second shape of this Minkowski Sum.",4,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"g1","","The first shape of this Minkowski Sum.",4,{"inputs":[{"name":"self"}],"output":{"name":"g1"}}],[11,"g2","","The second shape of this Minkowski Sum.",4,{"inputs":[{"name":"self"}],"output":{"name":"g2"}}],[11,"support_point","","",3,null],[11,"support_point","","",4,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"segment"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"segment"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"new","","Creates a new segment from two points.",5,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"segment"}}],[11,"a","","The first point of this segment.",5,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"b","","The second point of this segment.",5,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"new_with_vertices_and_indices","","",5,null],[11,"support_point","","",5,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"triangle"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"triangle"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"new","","Creates a triangle from three points.",6,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"triangle"}}],[11,"a","","The fist point of this triangle.",6,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"b","","The second point of this triangle.",6,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"c","","The third point of this triangle.",6,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"new_with_vertices_and_indices","","",6,null],[11,"support_point","","",6,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"basemesh"}}],[11,"new","","Builds a new mesh.",7,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",7,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"len","","The number of primitives on thes mesh.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",7,null],[11,"indices","","The indices of this mesh.",7,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",7,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"element_at","","Gets the i-th mesh element.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"e"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"trimesh"}}],[11,"new","","Builds a new mesh.",8,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"base_mesh","","The base representation of this mesh.",8,{"inputs":[{"name":"self"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",8,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",8,null],[11,"indices","","The indices of this mesh.",8,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",8,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"triangle_at","","Gets the i-th mesh element.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"triangle"}}],[11,"map_part_at","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"map_transformed_part_at","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"m"},{"name":"fnmut"}],"output":null}],[11,"aabb_at","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"polyline"}}],[11,"new","","Builds a new mesh.",9,{"inputs":[{"name":"arc"},{"name":"arc"},{"name":"option"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"base_mesh","","The base representation of this mesh.",9,{"inputs":[{"name":"self"}],"output":{"name":"basemesh"}}],[11,"vertices","","The vertices of this mesh.",9,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"bounding_volumes","","Bounding volumes of the subsimplices.",9,null],[11,"indices","","The indices of this mesh.",9,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"uvs","","The texture coordinates of this mesh.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"normals","","The normals of this mesh.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bvt","","The acceleration structure used for efficient collision detection and ray casting.",9,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"segment_at","","Gets the i-th mesh element.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"segment"}}],[11,"map_part_at","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"map_transformed_part_at","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"m"},{"name":"fnmut"}],"output":null}],[11,"aabb_at","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"ball"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"ball"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ball"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"new","","Creates a new ball from its radius and center.",10,{"inputs":[{"name":"n"}],"output":{"name":"ball"}}],[11,"radius","","The ball radius.",10,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"support_point","","",10,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"capsule"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"capsule"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"new","","Creates a new capsule.",11,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"capsule"}}],[11,"half_height","","The capsule half length along the `y` axis.",11,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"radius","","The radius of the capsule's rounded part.",11,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"support_point","","",11,null],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"cone"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"cone"}}],[11,"encode","","",12,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"new","","Creates a new cone.",12,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"cone"}}],[11,"half_height","","The cone half length along the `y` axis.",12,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cone along all but the `y` axis.",12,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"support_point","","",12,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"cylinder"}}],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"new","","Creates a new cylinder.",13,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"cylinder"}}],[11,"half_height","","The cylinder half length along the `y` axis.",13,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"radius","","The radius of the cylinder along all but the `y` axis.",13,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"support_point","","",13,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Build the reflection of a shape. Since the representation is implicit, the reflection computation is done in constant time.",14,{"inputs":[{"name":"g"}],"output":{"name":"reflection"}}],[11,"shape","","The reflected shape.",14,{"inputs":[{"name":"self"}],"output":{"name":"g"}}],[11,"support_point","","",14,null],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"torus"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"torus"}}],[11,"encode","","",15,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"new","","Creates a new torus with the given radiuses.",15,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"torus"}}],[11,"minor_radius","","The torus minor radius.",15,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"major_radius","","The torus major radius.",15,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"compound"}}],[11,"new","","Builds a new compound shape.",16,{"inputs":[{"name":"vec"}],"output":{"name":"compound"}}],[11,"shapes","","The shapes of this compound shape.",16,null],[11,"bvt","","The optimization structure used by this compound shape.",16,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"bounding_volumes","","The shapes bounding volumes.",16,null],[11,"aabb_at","","The AABB of the i-th shape compositing this compound.",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"map_part_at","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[11,"map_transformed_part_at","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"m"},{"name":"fnmut"}],"output":null}],[11,"aabb_at","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"aabb"}}],[11,"bvt","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"convexhull"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"convexhull"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"convexhull"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"new","","Creates a polytope from a set of point.",17,{"inputs":[{"name":"vec"}],"output":{"name":"convexhull"}}],[11,"points","","The list of points of this convex polytope.",17,null],[11,"support_point","","",17,null],[11,"aabb","","",6,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",6,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",5,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",5,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",10,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",10,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",2,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",2,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",13,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",13,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",12,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",12,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",17,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",17,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",16,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",16,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_composite_shape","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_composite_shape","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",8,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",8,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_composite_shape","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_composite_shape","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_composite_shape","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_composite_shape","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"aabb","","",1,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","",1,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"CSO","","Type of an implicit representation of the Configuration Space Obstacle formed by two geometric objects.",null,null],[6,"AnnotatedCSO","","Type of an implicit representation of the Configuration Space Obstacle formed by two geometric objects. Uses return `AnnotatedPoint` instead of regular points, i.e., keeps tracks of the original points that yielded a given CSO support point.",null,null],[6,"Ball2","","A 2D ball.",null,null],[6,"Plane2","","A 2D plane.",null,null],[6,"Cuboid2","","A 2D cuboid.",null,null],[6,"Capsule2","","A 2D capsule.",null,null],[6,"Cone2","","A 2D cone.",null,null],[6,"Cylinder2","","A 2D cylinder.",null,null],[6,"ConvexHull2","","A 2D convex polytope.",null,null],[6,"Segment2","","A 2D segment.",null,null],[6,"Triangle2","","A 2D triangle.",null,null],[6,"Polyline2","","A 2D polyline.",null,null],[6,"Compound2","","A 2D compound shape.",null,null],[6,"CompositeShape2","","A 2D abstract composite shape.",null,null],[6,"SupportMap2","","A 2D abstract support mapping.",null,null],[6,"Shape2","","A 2D dynamic shape.",null,null],[6,"ShapeHandle2","","A 2D shared dynamic shape handle.",null,null],[6,"Ball3","","A 3D ball.",null,null],[6,"Plane3","","A 3D plane.",null,null],[6,"Cuboid3","","A 3D cuboid.",null,null],[6,"Capsule3","","A 3D capsule.",null,null],[6,"Cone3","","A 3D cone.",null,null],[6,"Cylinder3","","A 3D cylinder.",null,null],[6,"ConvexHull3","","A 3D convex polytope.",null,null],[6,"Segment3","","A 3D segment.",null,null],[6,"Triangle3","","A 3D triangle.",null,null],[6,"Polyline3","","A 3D polyline.",null,null],[6,"TriMesh3","","A 3D triangle mesh.",null,null],[6,"Compound3","","A 3D compound shape.",null,null],[6,"CompositeShape3","","A 3D abstract composite shape.",null,null],[6,"SupportMap3","","A 3D abstract support mapping.",null,null],[6,"Shape3","","A 3D dynamic shape.",null,null],[6,"ShapeHandle3","","A 3D shared dynamic shape handle.",null,null],[8,"BaseMeshElement","","Trait implemented by elements usable on the Mesh.",null,null],[10,"new_with_vertices_and_indices","","Creates a new mesh element from a set of vertices and indices.",18,null],[8,"CompositeShape","","Trait implemented by shapes composed of multiple simpler shapes.",null,null],[10,"map_part_at","","Applies a function to each sub-shape of this concave shape.",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"fnmut"}],"output":null}],[10,"map_transformed_part_at","","Applies a transformation matrix and a function to each sub-shape of this concave shape.",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"m"},{"name":"fnmut"}],"output":null}],[10,"aabb_at","","Gets the AABB of the shape identified by the index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"aabb"}}],[10,"bvt","","Gets the acceleration structure of the concave shape.",19,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[8,"SupportMap","","Traits of convex shapes representable by a support mapping function.",null,null],[10,"support_point","","Evaluates the support function of the object. A support function is a function associating a vector to the shape point which maximizes their dot product. This does not include the `margin` of the object. Margins are shape-dependent. Use `support_point` to sample the complete shape.",20,null],[8,"Shape","","Trait implemented by all shapes supported by ncollide.",null,null],[10,"aabb","","The AABB of `self`.",21,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_sphere","","The bounding sphere of `self`.",21,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","The `RayCast` implementation of `self`.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","The `PointQuery` implementation of `self`.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","The support mapping of `self` if applicable.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_composite_shape","","The composite shape representation of `self` if applicable.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","Whether `self` uses a supportmapping-based representation.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_composite_shape","","Whether `self` uses a composite shape-based representation.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"bounding_volume","ncollide_geometry","Bounding volumes.",null,null],[3,"AABB","ncollide_geometry::bounding_volume","An Axis Aligned Bounding Box.",null,null],[3,"BoundingSphere","","A Bounding Sphere.",null,null],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[5,"aabb","","Computes the axis-aligned bounding box of a shape `g` transformed by `m`.",null,{"inputs":[{"name":"g"},{"name":"m"}],"output":{"name":"aabb"}}],[5,"bounding_sphere","","Computes the bounding sphere of a shape `g` transformed by `m`.",null,{"inputs":[{"name":"g"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[5,"support_map_aabb","","Computes the AABB of an support mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"}],"output":{"name":"aabb"}}],[5,"point_cloud_aabb","","Computes the AABB of a set of point.",null,null],[5,"ball_aabb","","Computes the Axis-Aligned Bounding Box of a ball.",null,null],[5,"point_cloud_bounding_sphere_with_center","","Computes the bounding sphere of a set of point, given its center.",null,null],[5,"point_cloud_bounding_sphere","","Computes a bounding sphere of the specified set of point.",null,null],[11,"new","","Creates a new `BoundingVolumeInterferencesCollector`.",22,{"inputs":[{"name":"bv"},{"name":"vec"}],"output":{"name":"boundingvolumeinterferencescollector"}}],[11,"visit_internal","","",22,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",22,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bv"}],"output":null}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"aabb"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"new","","Creates a new AABB.",23,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"aabb"}}],[11,"mins","","Reference to the AABB point with the smallest components along each axis.",23,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"maxs","","Reference to the AABB point with the biggest components along each axis.",23,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"center","","The center of this AABB.",23,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"half_extents","","The half extents of this AABB.",23,null],[11,"center","","",23,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"intersects","","",23,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"contains","","",23,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":{"name":"bool"}}],[11,"merge","","",23,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":null}],[11,"merged","","",23,{"inputs":[{"name":"self"},{"name":"aabb"}],"output":{"name":"aabb"}}],[11,"loosen","","",23,null],[11,"loosened","","",23,null],[11,"tighten","","",23,null],[11,"tightened","","",23,null],[11,"bounding_volume","ncollide_geometry::shape","",2,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",12,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",13,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",11,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",6,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",5,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",10,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",1,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",17,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",16,{"inputs":[{"name":"self"},{"name":"m2"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",7,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",8,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"bounding_volume","","",21,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"fmt","ncollide_geometry::bounding_volume","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"boundingsphere"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"new","","Creates a new bounding sphere.",24,null],[11,"center","","The bounding sphere center.",24,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"radius","","The bounding sphere radius.",24,null],[11,"transform_by","","Transforms this bounding sphere by `m`.",24,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"center","","",24,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"intersects","","",24,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"contains","","",24,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":{"name":"bool"}}],[11,"merge","","",24,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":null}],[11,"merged","","",24,{"inputs":[{"name":"self"},{"name":"boundingsphere"}],"output":{"name":"boundingsphere"}}],[11,"loosen","","",24,null],[11,"loosened","","",24,null],[11,"tighten","","",24,null],[11,"tightened","","",24,null],[11,"bounding_volume","ncollide_geometry::shape","",2,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",12,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",10,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",13,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",11,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",1,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",17,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",16,{"inputs":[{"name":"self"},{"name":"m2"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",6,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",5,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",7,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",8,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",9,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",21,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[6,"BoundingSphere2","ncollide_geometry::bounding_volume","A 2D bounding sphere.",null,null],[6,"AABB2","","A 2D AABB.",null,null],[6,"BoundingSphere3","","A 3D bounding sphere:",null,null],[6,"AABB3","","A 3D AABB.",null,null],[8,"HasBoundingVolume","","Traits of objects having a bounding volume.",null,null],[10,"bounding_volume","","The bounding volume of `self` transformed by `m`.",25,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"bv"}}],[8,"BoundingVolume","","Trait of bounding volumes.",null,null],[10,"center","","Returns a point inside of this bounding volume. This is ideally its center.",26,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[10,"intersects","","Checks if this bounding volume intersect with another one.",26,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"contains","","Checks if this bounding volume contains another one.",26,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"merge","","Merges this bounding volume with another one. The merge is done in-place.",26,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[10,"merged","","Merges this bounding volume with another one.",26,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"loosen","","Enlarges this bounding volume.",26,null],[10,"loosened","","Creates a new, enlarged version, of this bounding volume.",26,null],[10,"tighten","","Tighten this bounding volume.",26,null],[10,"tightened","","Creates a new, tightened version, of this bounding volume.",26,null],[0,"partitioning","ncollide_geometry","Spatial partitioning tools.",null,null],[3,"DBVT","ncollide_geometry::partitioning","A Dynamic Bounding Volume Tree.",null,null],[3,"DBVTLeaf","","Leaf of a Dynamic Bounding Volume Tree.",null,null],[12,"bounding_volume","","The bounding volume of this node.",27,null],[12,"center","","The center of this node bounding volume.",27,null],[12,"object","","An user-defined object.",27,null],[3,"BVT","","AÂ Boundig Volume Tree.",null,null],[3,"BoundingVolumeInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given bounding volume.",null,null],[4,"BinaryPartition","","Result of a binary partition.",null,null],[13,"Part","","Result of the partitioning of one element.",28,null],[13,"Parts","","Result of the partitioning of several elements.",28,null],[4,"BVTNode","","A node of the bounding volume tree.",null,null],[13,"Internal","","An internal node.",29,null],[13,"Leaf","","A leaf.",29,null],[11,"new","","Creates a new Dynamic Bounding Volume Tree.",30,{"inputs":[],"output":{"name":"dbvt"}}],[11,"remove","","Removes a leaf from the tree. Fails if the tree is empty.",30,{"inputs":[{"name":"self"},{"name":"rc"}],"output":null}],[11,"insert_new","","Creates, inserts, and returns a new leaf with the given content.",30,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bv"}],"output":{"name":"rc"}}],[11,"insert","","Inserts a leaf to the tree.",30,{"inputs":[{"name":"self"},{"name":"rc"}],"output":null}],[11,"visit","","Traverses this tree using an object implementing the `BVTVisitor`trait.",30,{"inputs":[{"name":"self"},{"name":"vis"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"dbvtleaf"}}],[11,"new","","Creates a new leaf.",27,{"inputs":[{"name":"bv"},{"name":"b"}],"output":{"name":"dbvtleaf"}}],[11,"is_root","","Tests if this node is the root.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_detached","","Tests if this node has no parent.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bvt"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__sbbv"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__dbbv"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bvtnode"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__sbbv"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"__dbbv"}],"output":{"name":"result"}}],[11,"new_with_partitioner","","Builds a bounding volume tree using an user-defined construction function.",31,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"bvt"}}],[11,"visit","","Traverses this tree using an object implementing the `BVTVisitor`trait.",31,{"inputs":[{"name":"self"},{"name":"vis"}],"output":null}],[11,"visit_bvtt","","Visits the bounding volume traversal tree implicitely formed with `other`.",31,{"inputs":[{"name":"self"},{"name":"bvt"},{"name":"vis"}],"output":null}],[11,"best_first_search","","Performs a best-fist-search on the tree.",31,{"inputs":[{"name":"self"},{"name":"bfs"}],"output":{"name":"option"}}],[11,"root_bounding_volume","","Reference to the bounding volume of the tree root.",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"depth","","Computes the depth of this tree.",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_balanced","","Creates a balanced `BVT`.",31,{"inputs":[{"name":"vec"}],"output":{"name":"bvt"}}],[11,"median_partitioner_with_centers","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",31,null],[11,"median_partitioner","","Construction function for a kdree to be used with `BVT::new_with_partitioner`.",31,null],[11,"bounding_volume","","The bounding volume of this node.",29,{"inputs":[{"name":"self"}],"output":{"name":"bv"}}],[11,"new","","Creates a new `BoundingVolumeInterferencesCollector`.",32,{"inputs":[{"name":"bv"},{"name":"vec"}],"output":{"name":"boundingvolumeinterferencescollector"}}],[11,"visit_internal","","",32,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",32,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bv"}],"output":null}],[8,"BVTVisitor","","Visitor of Bounding Volume Trees.",null,null],[10,"visit_internal","","Visits an internal node. Returns `true` if the internal node children have to be visited too.",33,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf","","Visits a leaf.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bv"}],"output":null}],[8,"BVTTVisitor","","Visitor for the Bounding Volume Traversal Tree.",null,null],[10,"visit_internal_internal","","Visit two internal nodes.",34,{"inputs":[{"name":"self"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_leaf","","Visit two leaves.",34,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bv"},{"name":"b"},{"name":"bv"}],"output":null}],[10,"visit_internal_leaf","","Visit one internal node and one leaf.",34,{"inputs":[{"name":"self"},{"name":"bv"},{"name":"b"},{"name":"bv"}],"output":{"name":"bool"}}],[10,"visit_leaf_internal","","Visit one leaf and on internal node.",34,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bv"},{"name":"bv"}],"output":{"name":"bool"}}],[8,"BVTCostFn","","Trait implemented by cost functions used by the best-first search on a `BVT`.",null,null],[16,"UserData","","User-defined data attached to each BVT leaf.",35,null],[10,"compute_bv_cost","","Computes the cost of a bounding volume.",35,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"option"}}],[10,"compute_b_cost","","Computes the cost of an object, and the result to be returned if it is the best one.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"option"}}],[0,"query","ncollide_geometry","Non-persistant pairwise geometric queries.",null,null],[3,"Contact","ncollide_geometry::query","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",36,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",36,null],[12,"normal","","Contact normal",36,null],[12,"depth","","Penetration depth",36,null],[3,"Ray","","A Ray.",null,null],[12,"origin","","Starting point of the ray.",37,null],[12,"dir","","Direction of the ray.",37,null],[3,"RayIntersection","","Structure containing the result of a successful ray cast.",null,null],[12,"toi","","The time of impact of the ray with the object.  The exact contact point can be computed with: `origin + dir * toi` where `origin` is the origin of the ray; `dir` is its direction and `toi` is the value of this field.",38,null],[12,"normal","","The normal at the intersection point.",38,null],[12,"uvs","","The textures coordinates at the intersection point.  This is an `Option` because some shape do not support texture coordinates.",38,null],[3,"RayInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given ray.",null,null],[3,"RayIntersectionCostFn","","A search thet selects the objects that has the smallest time of impact with a given ray.",null,null],[3,"PointProjection","","Description of the projection of a point on a shape.",null,null],[12,"is_inside","","Whether or not the point to project was inside of the shape.",39,null],[12,"point","","The projection result.",39,null],[3,"PointInterferencesCollector","","Bounding Volume Tree visitor collecting nodes that may contain a given point.",null,null],[4,"Proximity","","Proximity information.",null,null],[13,"Intersecting","","The two objects are intersecting.",40,null],[13,"WithinMargin","","The two objects are non-intersecting but closer than a given distance.",40,null],[13,"Disjoint","","The two objects are non-intersecting and further than a given distance.",40,null],[5,"contact","","Computes one contact point between two shapes.",null,null],[5,"proximity","","Tests whether two shapes are in intersecting or separated by a distance smaller than `margin`.",null,null],[5,"distance","","Computes the minimum distance separating two shapes.",null,null],[5,"time_of_impact","","Computes the smallest time of impact of two shapes under translational movement.",null,null],[0,"algorithms","","Algorithms needed for distance and penetration depth computation.",null,null],[0,"simplex","ncollide_geometry::query::algorithms","Abstract definition of a simplex usable by the GJK algorithm.",null,null],[8,"Simplex","ncollide_geometry::query::algorithms::simplex","Trait of a simplex usable by the GJK algorithm.",null,null],[10,"reset","","Replace the point of the simplex by a single one. The simplex is reduced to be 0-dimensional.",41,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"add_point","","Adds a point to the simplex.",41,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[10,"project_origin_and_reduce","","Project the origin on the simplex and remove any sub-simplex which does not contain the projection.",41,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[10,"project_origin","","Projection the origin on the simplex. The simplex itself is unchanged, although it is mutable for optimization purpose.",41,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[10,"contains_point","","Checks whether a given point is already part of the simplex points.",41,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[10,"dimension","","Dimension of the simplex. A simplex with `n` must be a `n - 1`-dimensional simplex.",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"max_sq_len","","The maximum among the simplex point squared lengths.",41,null],[10,"modify_pnts","","Modifies the points contained by this simplex.",41,{"inputs":[{"name":"self"},{"name":"fn"}],"output":null}],[0,"johnson_simplex","ncollide_geometry::query::algorithms","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[3,"JohnsonSimplex","ncollide_geometry::query::algorithms::johnson_simplex","Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex.",null,null],[3,"RecursionTemplate","","Set of indices to explain to the JohnsonSimplex how to do its work. Building this is very time consuming, and thus should be shared between all instances of the Johnson simplex.",null,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"johnsonsimplex"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"recursiontemplate"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"recursiontemplate"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","Creates a new set of Recursion simplex sharable between any Johnson simplex having a dimension inferior or equal to `dimension`.",43,{"inputs":[{"name":"usize"}],"output":{"name":"arc"}}],[11,"new","","Creates a new, empty, Johnson simplex.",42,{"inputs":[{"name":"arc"}],"output":{"name":"johnsonsimplex"}}],[11,"new_w_tls","","Creates a new, empty Johnson simplex. The recursion template uses the thread-local one.",42,{"inputs":[],"output":{"name":"johnsonsimplex"}}],[11,"reset","","",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"dimension","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_sq_len","","",42,null],[11,"contains_point","","",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"add_point","","",42,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"project_origin_and_reduce","","",42,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"project_origin","","",42,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"modify_pnts","","",42,{"inputs":[{"name":"self"},{"name":"fn"}],"output":null}],[0,"gjk","ncollide_geometry::query::algorithms","The Gilbertâ€“Johnsonâ€“Keerthi distance algorithm.",null,null],[4,"GJKResult","ncollide_geometry::query::algorithms::gjk","Results of the GJK algorithm.",null,null],[13,"Intersection","","Result of the GJK algorithm when the origin is inside of the polytope.",44,null],[13,"Projection","","Result of the GJK algorithm when a projection of the origin on the polytope is found.",44,null],[13,"Proximity","","Result of the GJK algorithm when the origin is to close to the polytope but not inside of it.",44,null],[13,"NoIntersection","","Result of the GJK algorithm when the origin is too far away from the polytope.",44,null],[5,"closest_points","","Computes the closest points between two convex shapes unsing the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"closest_points_with_max_dist","","Computes the closest points between two convex shapes unsing the GJK algorithm.",null,null],[5,"distance","","Computes the exact distance separating two convex shapes unsing the GJK. algorithm.",null,null],[5,"proximity","","Computes the closest points between two convex shapes unsing the GJK algorithm.",null,null],[5,"project_origin","","Projects the origin on a shape unsing the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin_with_max_dist","","Projects the origin on a shape using the Separating Axis GJK algorithm. The algorithm will stop as soon as the polytope can be proven to be at least `max_dist` away from the origin.",null,null],[5,"cast_ray","","Casts a ray on a support map using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"}],"output":{"name":"option"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__spv"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__dpv"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"gjkresult"}}],[0,"minkowski_sampling","ncollide_geometry::query::algorithms","Penetration depth computation algorithm approximating the Minkowskis sum.",null,null],[5,"closest_points","ncollide_geometry::query::algorithms::minkowski_sampling","Computes the closest points between two implicit inter-penetrating shapes. Returns None if the shapes are not in penetration. This can be used as a fallback algorithm for the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g1"},{"name":"m"},{"name":"g2"},{"name":"s"}],"output":{"name":"option"}}],[5,"project_origin","","Projects the origin on a support-mapped shape.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"}],"output":{"name":"option"}}],[0,"contacts_internal","ncollide_geometry::query","Implementation details of the `contact` and `contacts` functions.",null,null],[3,"Contact","ncollide_geometry::query::contacts_internal","Geometric description of a contact.",null,null],[12,"world1","","Position of the contact on the first object. The position is expressed in world space.",36,null],[12,"world2","","Position of the contact on the second object. The position is expressed in world space.",36,null],[12,"normal","","Contact normal",36,null],[12,"depth","","Penetration depth",36,null],[5,"ball_against_ball","","Contact between balls.",null,null],[5,"support_map_against_support_map","","Contact between support-mapped shapes (`Cuboid`, `ConvexHull`, etc.)",null,null],[5,"support_map_against_support_map_with_params","","Contact between support-mapped shapes (`Cuboid`, `ConvexHull`, etc.)",null,null],[5,"plane_against_support_map","","Contact between a plane and a support-mapped shape (Cuboid, ConvexHull, etc.)",null,null],[5,"support_map_against_plane","","Contact between a support-mapped shape (Cuboid, ConvexHull, etc.) and a plane.",null,null],[5,"contact_internal","","Computes one contact point between two shapes.",null,null],[5,"composite_shape_against_shape","","Best contact between a composite shape (`Mesh`, `Compound`) and any other shape.",null,null],[5,"shape_against_composite_shape","","Best contact between a shape and a composite (`Mesh`, `Compound`) shape.",null,null],[11,"fmt","ncollide_geometry::query","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"contact"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"contact"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"new","","Creates a new contact.",36,null],[11,"flip","","Reverts the contact normal and swaps `world1` and `world2`.",36,{"inputs":[{"name":"self"}],"output":null}],[0,"distance_internal","","Implementation details of the `distance` function.",null,null],[5,"ball_against_ball","ncollide_geometry::query::distance_internal","Distance between balls.",null,null],[5,"support_map_against_support_map","","Distance between support-mapped shapes.",null,null],[5,"support_map_against_support_map_with_params","","Distance between support-mapped shapes.",null,null],[5,"plane_against_support_map","","Distance between a plane and a support-mapped shape.",null,null],[5,"support_map_against_plane","","Distance between a support-mapped shape and a plane.",null,null],[5,"distance","","Computes the minimum distance separating two shapes.",null,null],[5,"composite_shape_against_shape","","Smallest distance between a composite shape and any other shape.",null,null],[5,"shape_against_composite_shape","","Smallest distance between a shape and a composite shape.",null,null],[0,"proximity_internal","ncollide_geometry::query","Implementation details of the `proximity` function.",null,null],[4,"Proximity","ncollide_geometry::query::proximity_internal","Proximity information.",null,null],[13,"Intersecting","","The two objects are intersecting.",40,null],[13,"WithinMargin","","The two objects are non-intersecting but closer than a given distance.",40,null],[13,"Disjoint","","The two objects are non-intersecting and further than a given distance.",40,null],[5,"ball_against_ball","","Proximity between balls.",null,null],[5,"support_map_against_support_map","","Proximity between support-mapped shapes (`Cuboid`, `ConvexHull`, etc.)",null,null],[5,"support_map_against_support_map_with_params","","Proximity between support-mapped shapes (`Cuboid`, `ConvexHull`, etc.)",null,null],[5,"plane_against_support_map","","Proximity between a plane and a support-mapped shape (Cuboid, ConvexHull, etc.)",null,null],[5,"support_map_against_plane","","Proximity between a support-mapped shape (Cuboid, ConvexHull, etc.) and a plane.",null,null],[5,"proximity_internal","","Tests whether two shapes are in intersecting or separated by a distance smaller than `margin`.",null,null],[5,"composite_shape_against_shape","","Proximity between a composite shape (`Mesh`, `Compound`) and any other shape.",null,null],[5,"shape_against_composite_shape","","Proximity between a shape and a composite (`Mesh`, `Compound`) shape.",null,null],[11,"fmt","ncollide_geometry::query","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"proximity"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[0,"time_of_impact_internal","","Implementation details of the `time_of_impact` function.",null,null],[5,"ball_against_ball","ncollide_geometry::query::time_of_impact_internal","Time Of Impact of two balls under translational movement.",null,null],[5,"support_map_against_support_map","","Time of impacts between two support-mapped shapes under translational movement.",null,null],[5,"plane_against_support_map","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,null],[5,"support_map_against_plane","","Time Of Impact of a plane with a support-mapped shape under translational movement.",null,null],[5,"time_of_impact","","Computes the smallest time of impact of two shapes under translational movement.",null,null],[5,"composite_shape_against_shape","","Time Of Impact of a composite shape with any other shape, under translational movement.",null,null],[5,"shape_against_composite_shape","","Time Of Impact of any shape with a composite shape, under translational movement.",null,null],[0,"ray_internal","ncollide_geometry::query","Ray-casting related definitions and implementations.",null,null],[3,"Ray","ncollide_geometry::query::ray_internal","A Ray.",null,null],[12,"origin","","Starting point of the ray.",37,null],[12,"dir","","Direction of the ray.",37,null],[3,"RayIntersection","","Structure containing the result of a successful ray cast.",null,null],[12,"toi","","The time of impact of the ray with the object.  The exact contact point can be computed with: `origin + dir * toi` where `origin` is the origin of the ray; `dir` is its direction and `toi` is the value of this field.",38,null],[12,"normal","","The normal at the intersection point.",38,null],[12,"uvs","","The textures coordinates at the intersection point.  This is an `Option` because some shape do not support texture coordinates.",38,null],[3,"RayIntersectionCostFn","","A search thet selects the objects that has the smallest time of impact with a given ray.",null,null],[3,"RayInterferencesCollector","","Bounding Volume Tree visitor collecting interferences with a given ray.",null,null],[5,"plane_toi_with_ray","","Computes the toi of a ray with a plane described by its center and normal.",null,null],[5,"triangle_ray_intersection","","Computes the intersection between a triangle and a ray.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"ray"}],"output":{"name":"option"}}],[5,"implicit_toi_and_normal_with_ray","","Cast a ray on a shape using the GJK algorithm.",null,{"inputs":[{"name":"m"},{"name":"g"},{"name":"s"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[5,"ball_toi_with_ray","","Computes the time of impact of a ray on a ball.",null,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__sp"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__dp"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ray"}}],[11,"new","","Creates a new ray starting from `origin` and with the direction `dir`. `dir` must be normalized.",37,null],[11,"transform_by","","Transforms this ray by the given isometry.",37,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"inverse_transform_by","","Transforms this ray by the inverse of the given isometry.",37,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[11,"translate_by","","Translates this ray by the given vector. Its direction is left unchanged.",37,null],[11,"new_with_uvs","","Creates a new `RayIntersection`.",38,null],[11,"new","","Creates a new `RayIntersection`.",38,null],[11,"toi_and_normal_with_ray","ncollide_geometry::shape","",1,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",10,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",10,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",10,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",2,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",2,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",2,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_geometry::bounding_volume","",23,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",23,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",23,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",24,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",24,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",24,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",24,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"toi_and_normal_with_ray","ncollide_geometry::shape","",13,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",12,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",11,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",17,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",5,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",3,{"inputs":[{"name":"self"},{"name":"m2"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",6,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",16,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",16,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",7,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",7,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",7,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",8,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",8,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",8,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_with_ray","","",21,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_with_ray","","",21,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","",21,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","",21,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"new","ncollide_geometry::query","Creates a new `BestRayInterferenceSearch`.",45,{"inputs":[{"name":"ray"},{"name":"bool"},{"name":"bool"}],"output":{"name":"rayintersectioncostfn"}}],[11,"compute_bv_cost","","",45,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"option"}}],[11,"compute_b_cost","","",45,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"option"}}],[11,"new","","Creates a new `RayInterferencesCollector`.",46,{"inputs":[{"name":"ray"},{"name":"vec"}],"output":{"name":"rayinterferencescollector"}}],[11,"visit_internal","","",46,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",46,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bv"}],"output":null}],[6,"Ray3","ncollide_geometry::query::ray_internal","A 3D ray.",null,null],[6,"Ray2","","A 2D ray.",null,null],[6,"RayIntersection3","","A 3D ray intersection.",null,null],[6,"RayIntersection2","","A 2D ray intersection.",null,null],[8,"RayCast","","Traits of objects which can be transformed and tested for intersection with a ray.",null,null],[11,"toi_with_ray","","Computes the time of impact between this transform shape and a ray.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[10,"toi_and_normal_with_ray","","Computes the time of impact, and normal between this transformed shape and a ray.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","Computes time of impact, normal, and texture coordinates (uv) between this transformed shape and a ray.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","Tests whether a ray intersects this transformed shape.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[0,"point_internal","ncollide_geometry::query","Point inclusion and projection.",null,null],[3,"PointProjection","ncollide_geometry::query::point_internal","Description of the projection of a point on a shape.",null,null],[12,"is_inside","","Whether or not the point to project was inside of the shape.",39,null],[12,"point","","The projection result.",39,null],[3,"PointInterferencesCollector","","Bounding Volume Tree visitor collecting nodes that may contain a given point.",null,null],[11,"new","","Initializes a new `PointProjection`.",39,{"inputs":[{"name":"bool"},{"name":"p"}],"output":{"name":"pointprojection"}}],[11,"project_point","ncollide_geometry::shape","",1,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",1,null],[11,"contains_point","","",1,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",10,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",10,null],[11,"contains_point","","",10,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",2,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",2,null],[11,"contains_point","","",2,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_geometry::bounding_volume","",23,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",23,null],[11,"contains_point","","",23,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",24,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",24,null],[11,"contains_point","","",24,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","ncollide_geometry::shape","",13,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",12,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",11,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",17,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",5,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",6,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"project_point","","",16,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"contains_point","","",16,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",7,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"contains_point","","",7,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",8,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",8,null],[11,"contains_point","","",8,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",9,null],[11,"contains_point","","",9,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"project_point","","",21,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","",21,null],[11,"contains_point","","",21,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"new","ncollide_geometry::query","Creates a new `PointInterferencesCollector`.",48,{"inputs":[{"name":"p"},{"name":"vec"}],"output":{"name":"pointinterferencescollector"}}],[11,"visit_internal","","",48,{"inputs":[{"name":"self"},{"name":"bv"}],"output":{"name":"bool"}}],[11,"visit_leaf","","",48,{"inputs":[{"name":"self"},{"name":"b"},{"name":"bv"}],"output":null}],[8,"PointQuery","ncollide_geometry::query::point_internal","Trait of objects that can be tested for point inclusion and projection.",null,null],[10,"project_point","","Projects a point on `self` transformed by `m`.",49,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","Computes the minimal distance between a point and `self` transformed by `m`.",49,null],[11,"contains_point","","Tests if the given point is inside of `self` transformed by `m`.",49,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[6,"Ray2","ncollide_geometry::query","A 2D ray.",null,null],[6,"Ray3","","A 3D ray.",null,null],[6,"RayIntersection2","","A 2D ray intersection.",null,null],[6,"RayIntersection3","","A 3D ray intersection.",null,null],[8,"RayCast","","Traits of objects which can be transformed and tested for intersection with a ray.",null,null],[11,"toi_with_ray","","Computes the time of impact between this transform shape and a ray.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[10,"toi_and_normal_with_ray","","Computes the time of impact, and normal between this transformed shape and a ray.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","Computes time of impact, normal, and texture coordinates (uv) between this transformed shape and a ray.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","Tests whether a ray intersects this transformed shape.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[8,"PointQuery","","Trait of objects that can be tested for point inclusion and projection.",null,null],[10,"project_point","","Projects a point on `self` transformed by `m`.",49,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"},{"name":"bool"}],"output":{"name":"pointprojection"}}],[11,"distance_to_point","","Computes the minimal distance between a point and `self` transformed by `m`.",49,null],[11,"contains_point","","Tests if the given point is inside of `self` transformed by `m`.",49,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}],[11,"bounding_sphere","ncollide_geometry::shape","The bounding sphere of `self`.",21,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"as_ray_cast","","The `RayCast` implementation of `self`.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_point_query","","The `PointQuery` implementation of `self`.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_support_map","","The support mapping of `self` if applicable.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_composite_shape","","The composite shape representation of `self` if applicable.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_support_map","","Whether `self` uses a supportmapping-based representation.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_composite_shape","","Whether `self` uses a composite shape-based representation.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shape","","Tests if this shape has a specific type `T`.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_shape","","Performs the cast.",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"toi_with_ray","ncollide_geometry::query","Computes the time of impact between this transform shape and a ray.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"toi_and_normal_and_uv_with_ray","","Computes time of impact, normal, and texture coordinates (uv) between this transformed shape and a ray.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"},{"name":"bool"}],"output":{"name":"option"}}],[11,"intersects_ray","","Tests whether a ray intersects this transformed shape.",47,{"inputs":[{"name":"self"},{"name":"m"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"distance_to_point","","Computes the minimal distance between a point and `self` transformed by `m`.",49,null],[11,"contains_point","","Tests if the given point is inside of `self` transformed by `m`.",49,{"inputs":[{"name":"self"},{"name":"m"},{"name":"p"}],"output":{"name":"bool"}}]],"paths":[[3,"ShapeHandle"],[3,"Plane"],[3,"Cuboid"],[3,"MinkowskiSum"],[3,"AnnotatedMinkowskiSum"],[3,"Segment"],[3,"Triangle"],[3,"BaseMesh"],[3,"TriMesh"],[3,"Polyline"],[3,"Ball"],[3,"Capsule"],[3,"Cone"],[3,"Cylinder"],[3,"Reflection"],[3,"Torus"],[3,"Compound"],[3,"ConvexHull"],[8,"BaseMeshElement"],[8,"CompositeShape"],[8,"SupportMap"],[8,"Shape"],[3,"BoundingVolumeInterferencesCollector"],[3,"AABB"],[3,"BoundingSphere"],[8,"HasBoundingVolume"],[8,"BoundingVolume"],[3,"DBVTLeaf"],[4,"BinaryPartition"],[4,"BVTNode"],[3,"DBVT"],[3,"BVT"],[3,"BoundingVolumeInterferencesCollector"],[8,"BVTVisitor"],[8,"BVTTVisitor"],[8,"BVTCostFn"],[3,"Contact"],[3,"Ray"],[3,"RayIntersection"],[3,"PointProjection"],[4,"Proximity"],[8,"Simplex"],[3,"JohnsonSimplex"],[3,"RecursionTemplate"],[4,"GJKResult"],[3,"RayIntersectionCostFn"],[3,"RayInterferencesCollector"],[8,"RayCast"],[3,"PointInterferencesCollector"],[8,"PointQuery"]]};
searchIndex["ncollide_math"] = {"doc":"Trait implemented by the primitive algebraic types used by ncollide.","items":[[8,"Point","ncollide_math","Trait implemented by point types usable by ncollide.",null,null],[16,"Vector","","",0,null],[8,"Vector","","Trait implemented by vector types usable by ncollide.",null,null],[10,"sample_sphere","","Iterate through the samples.",1,{"inputs":[{"name":"f"}],"output":null}],[8,"Isometry","","Trait implemented by isometry types usable by ncollide.",null,null],[10,"absolute_rotate_vector","","Computes the product `abs(rot) * v` where `abs(self)` is the absolute value of the matrix representation of `self.rotation()`.",2,null]],"paths":[[8,"Point"],[8,"Vector"],[8,"Isometry"]]};
searchIndex["ncollide_pipeline"] = {"doc":"Persistent and time-coherent collision detection.","items":[[0,"broad_phase","ncollide_pipeline","Broad phases.",null,null],[3,"BruteForceBroadPhase","ncollide_pipeline::broad_phase","A broad phase testing explicitly all bounding volume pairs.",null,null],[3,"DBVTBroadPhase","","Broad phase based on a Dynamic Bounding Volume Tree.",null,null],[3,"BroadPhasePairFilters","","Filters deciding whether a proximity is to be further investigated by the narrow phase or not.",null,null],[11,"new","","Creates a new brute-force broad phase.",0,{"inputs":[{"name":"n"},{"name":"bool"}],"output":{"name":"bruteforcebroadphase"}}],[11,"deferred_add","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bv"},{"name":"t"}],"output":null}],[11,"deferred_remove","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"deferred_set_bounding_volume","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bv"}],"output":null}],[11,"deferred_recompute_all_proximities","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","",0,{"inputs":[{"name":"self"},{"name":"fnmut"},{"name":"fnmut"}],"output":null}],[11,"interferences_with_bounding_volume","","",0,{"inputs":[{"name":"self"},{"name":"bv"},{"name":"vec"}],"output":null}],[11,"interferences_with_ray","","",0,{"inputs":[{"name":"self"},{"name":"ray"},{"name":"vec"}],"output":null}],[11,"interferences_with_point","","",0,{"inputs":[{"name":"self"},{"name":"p"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new broad phase based on a Dynamic Bounding Volume Tree.",1,null],[11,"num_interferences","","Number of interferences detected by this broad phase.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"deferred_add","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bv"},{"name":"t"}],"output":null}],[11,"deferred_remove","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"update","","",1,{"inputs":[{"name":"self"},{"name":"fnmut"},{"name":"fnmut"}],"output":null}],[11,"deferred_set_bounding_volume","","",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bv"}],"output":null}],[11,"deferred_recompute_all_proximities","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"interferences_with_bounding_volume","","",1,{"inputs":[{"name":"self"},{"name":"bv"},{"name":"vec"}],"output":null}],[11,"interferences_with_ray","","",1,{"inputs":[{"name":"self"},{"name":"ray"},{"name":"vec"}],"output":null}],[11,"interferences_with_point","","",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new set of collision filters.",2,{"inputs":[],"output":{"name":"broadphasepairfilters"}}],[11,"register_collision_filter","","Registers a collision filter.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"box"}],"output":null}],[11,"unregister_collision_filter","","Unregisters a collision filter.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_pair_valid","","Tells if the collision between `b1` and `b2` is to be handled by the narrow-phase.",2,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"}],"output":{"name":"bool"}}],[8,"BroadPhase","","Trait all broad phase must implement.",null,null],[10,"deferred_add","","Tells the broad phase to add an element during the next update.",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bv"},{"name":"t"}],"output":null}],[10,"deferred_remove","","Tells the broad phase to remove an element during the next update.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"deferred_set_bounding_volume","","Sets the next bounding volume to be used during the update of this broad phase.",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bv"}],"output":null}],[10,"deferred_recompute_all_proximities","","Forces the broad-phase to recompute and re-report all the proximities.",3,{"inputs":[{"name":"self"}],"output":null}],[10,"update","","Updates the object additions, removals, and interferences detection.",3,{"inputs":[{"name":"self"},{"name":"fnmut"},{"name":"fnmut"}],"output":null}],[10,"interferences_with_bounding_volume","","Collects every object which might intersect a given bounding volume.",3,{"inputs":[{"name":"self"},{"name":"bv"},{"name":"vec"}],"output":null}],[10,"interferences_with_ray","","Collects every object which might intersect a given ray.",3,{"inputs":[{"name":"self"},{"name":"ray"},{"name":"vec"}],"output":null}],[10,"interferences_with_point","","Collects every object which might contain a given point.",3,{"inputs":[{"name":"self"},{"name":"p"},{"name":"vec"}],"output":null}],[8,"BroadPhasePairFilter","","A signal handler for contact detection.",null,null],[10,"is_pair_valid","","Activate an action for when two objects start or stop to be close to each other.",4,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"}],"output":{"name":"bool"}}],[0,"narrow_phase","ncollide_pipeline","Persistent collision detection algorithms to compute contact points.",null,null],[3,"ContactPairs","ncollide_pipeline::narrow_phase","Iterator through contact pairs.",null,null],[3,"Contacts","","An iterator through contacts.",null,null],[3,"ProximityPairs","","Iterator through proximity pairs.",null,null],[3,"DefaultNarrowPhase","","Collision detector dispatcher for collision objects.",null,null],[3,"DefaultContactDispatcher","","Collision dispatcher for shapes defined by `ncollide_entities`.",null,null],[3,"BallBallContactGenerator","","Collision detector between two balls.",null,null],[3,"PlaneSupportMapContactGenerator","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"SupportMapPlaneContactGenerator","","Collision detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"SupportMapSupportMapContactGenerator","","Persistent collision detector between two shapes having a support mapping function.",null,null],[3,"CompositeShapeShapeContactGenerator","","Collision detector between a concave shape and another shape.",null,null],[3,"ShapeCompositeShapeContactGenerator","","Collision detector between a shape and a concave shape.",null,null],[3,"IncrementalContactManifoldGenerator","","Contact manifold generator which keeps track of several contacts.",null,null],[3,"OneShotContactManifoldGenerator","","Contact manifold generator producing a full manifold at the first update.",null,null],[3,"DefaultProximityDispatcher","","Proximity dispatcher for shapes defined by `ncollide_entities`.",null,null],[3,"BallBallProximityDetector","","Proximity detector between two balls.",null,null],[3,"PlaneSupportMapProximityDetector","","Proximity detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"SupportMapPlaneProximityDetector","","Proximity detector between a plane and a shape implementing the `SupportMap` trait.",null,null],[3,"SupportMapSupportMapProximityDetector","","Persistent proximity detector between two shapes having a support mapping function.",null,null],[3,"CompositeShapeShapeProximityDetector","","Proximity detector between a concave shape and another shape.",null,null],[3,"ShapeCompositeShapeProximityDetector","","Proximity detector between a shape and a concave shape.",null,null],[3,"ContactSignal","","Signal for contact start/stop.",null,null],[3,"ProximitySignal","","Signal for proximity start/stop.",null,null],[11,"new","","Creates a new basic collision dispatcher.",5,{"inputs":[],"output":{"name":"defaultcontactdispatcher"}}],[11,"get_contact_algorithm","","",5,{"inputs":[{"name":"self"},{"name":"shape"},{"name":"shape"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ballballcontactgenerator"}}],[11,"new","","Creates a new persistent collision detector between two balls.",6,{"inputs":[],"output":{"name":"ballballcontactgenerator"}}],[11,"update","","",6,null],[11,"num_contacts","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",6,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"planesupportmapcontactgenerator"}}],[11,"new","","Creates a new persistent collision detector between a plane and a shape with a support mapping function.",7,{"inputs":[],"output":{"name":"planesupportmapcontactgenerator"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"supportmapplanecontactgenerator"}}],[11,"new","","Creates a new persistent collision detector between a plane and a shape with a support mapping function.",8,{"inputs":[],"output":{"name":"supportmapplanecontactgenerator"}}],[11,"update","","",7,null],[11,"num_contacts","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",7,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"update","","",8,null],[11,"num_contacts","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",8,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"supportmapsupportmapcontactgenerator"}}],[11,"new","","Creates a new persistant collision detector between two shapes with support mapping functions.",9,{"inputs":[{"name":"s"}],"output":{"name":"supportmapsupportmapcontactgenerator"}}],[11,"update","","",9,null],[11,"num_contacts","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",9,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"incrementalcontactmanifoldgenerator"}}],[11,"new","","Creates a new incremental contact manifold generator.",10,{"inputs":[{"name":"cd"}],"output":{"name":"incrementalcontactmanifoldgenerator"}}],[11,"get_sub_collision","","Gets a collision from the sub-detector used by this manifold generator. This does not update the manifold itself.",10,null],[11,"add_new_contacts","","Updates the current manifold by adding one point.",10,null],[11,"update_contacts","","Updates the contacts already existing on this manifold.",10,null],[11,"update","","",10,null],[11,"num_contacts","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",10,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"oneshotcontactmanifoldgenerator"}}],[11,"new","","Creates a new one shot contact manifold generator.",11,{"inputs":[{"name":"cd"}],"output":{"name":"oneshotcontactmanifoldgenerator"}}],[11,"update","","",11,null],[11,"num_contacts","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",11,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new collision detector between a concave shape and another shape.",12,{"inputs":[],"output":{"name":"compositeshapeshapecontactgenerator"}}],[11,"new","","Creates a new collision detector between a shape and a concave shape.",13,{"inputs":[],"output":{"name":"shapecompositeshapecontactgenerator"}}],[11,"update","","",12,null],[11,"num_contacts","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",12,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"update","","",13,null],[11,"num_contacts","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contacts","","",13,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ballballproximitydetector"}}],[11,"new","","Creates a new persistent collision detector between two balls.",14,{"inputs":[],"output":{"name":"ballballproximitydetector"}}],[11,"update","","",14,null],[11,"proximity","","",14,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"planesupportmapproximitydetector"}}],[11,"new","","Creates a new persistent proximity detector between a plane and a shape with a support mapping function.",15,{"inputs":[],"output":{"name":"planesupportmapproximitydetector"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"supportmapplaneproximitydetector"}}],[11,"new","","Creates a new persistent proximity detector between a plane and a shape with a support mapping function.",16,{"inputs":[],"output":{"name":"supportmapplaneproximitydetector"}}],[11,"update","","",15,null],[11,"proximity","","",15,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"update","","",16,null],[11,"proximity","","",16,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"supportmapsupportmapproximitydetector"}}],[11,"new","","Creates a new persistant proximity detector between two shapes with support mapping functions.",17,{"inputs":[{"name":"s"}],"output":{"name":"supportmapsupportmapproximitydetector"}}],[11,"update","","",17,null],[11,"proximity","","",17,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"new","","Creates a new proximity detector between a concave shape and another shape.",18,{"inputs":[],"output":{"name":"compositeshapeshapeproximitydetector"}}],[11,"new","","Creates a new collision detector between a shape and a concave shape.",19,{"inputs":[],"output":{"name":"shapecompositeshapeproximitydetector"}}],[11,"update","","",18,null],[11,"proximity","","",18,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"update","","",19,null],[11,"proximity","","",19,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[11,"new","","Creates a new basic proximity dispatcher.",20,{"inputs":[],"output":{"name":"defaultproximitydispatcher"}}],[11,"get_proximity_algorithm","","",20,{"inputs":[{"name":"self"},{"name":"shape"},{"name":"shape"}],"output":{"name":"option"}}],[11,"contacts","","Transforms contact-pairs iterator to an iterator through each individual contact.",21,{"inputs":[{"name":"self"}],"output":{"name":"contacts"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new `DefaultNarrowPhase`.",24,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"defaultnarrowphase"}}],[11,"update","","",24,{"inputs":[{"name":"self"},{"name":"uidremap"},{"name":"contactsignal"},{"name":"proximitysignal"},{"name":"usize"}],"output":null}],[11,"handle_interaction","","",24,{"inputs":[{"name":"self"},{"name":"contactsignal"},{"name":"proximitysignal"},{"name":"uidremap"},{"name":"fastkey"},{"name":"fastkey"},{"name":"bool"}],"output":null}],[11,"contact_pairs","","",24,{"inputs":[{"name":"self"},{"name":"uidremap"}],"output":{"name":"contactpairs"}}],[11,"proximity_pairs","","",24,{"inputs":[{"name":"self"},{"name":"uidremap"}],"output":{"name":"proximitypairs"}}],[11,"new","","Creates a new `ContactSignal` with no event handler registered.",25,{"inputs":[],"output":{"name":"contactsignal"}}],[11,"register_contact_handler","","Registers an event handler.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"box"}],"output":null}],[11,"unregister_contact_handler","","Unregisters an event handler.",25,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"trigger_contact_started_signal","","Activates the contact started signal, executing all the event handlers.",25,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"},{"name":"contactalgorithm"}],"output":null}],[11,"trigger_contact_stopped_signal","","Activates the contact stopped signal, executing all the event handlers.",25,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"}],"output":null}],[11,"new","","Creates a new `ProximitySignal` with no event handler registered.",26,{"inputs":[],"output":{"name":"proximitysignal"}}],[11,"register_proximity_handler","","Registers an event handler.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"box"}],"output":null}],[11,"unregister_proximity_handler","","Unregisters an event handler.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"trigger_proximity_signal","","Activates the proximity signal, executing all the event handlers.",26,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"},{"name":"proximity"},{"name":"proximity"}],"output":null}],[6,"ContactAlgorithm","","",null,null],[6,"ProximityAlgorithm","","",null,null],[6,"ContactAlgorithm2","","Trait-object for 2-dimensional contact generation.",null,null],[6,"ContactAlgorithm3","","Trait-object for 3-dimensional contact generation.",null,null],[8,"NarrowPhase","","Trait implemented by the narrow phase manager.",null,null],[10,"update","","Updates this narrow phase.",27,{"inputs":[{"name":"self"},{"name":"uidremap"},{"name":"contactsignal"},{"name":"proximitysignal"},{"name":"usize"}],"output":null}],[10,"handle_interaction","","Called when the broad phase detects that two objects are, or stop to be, in close proximity.",27,{"inputs":[{"name":"self"},{"name":"contactsignal"},{"name":"proximitysignal"},{"name":"uidremap"},{"name":"fastkey"},{"name":"fastkey"},{"name":"bool"}],"output":null}],[10,"contact_pairs","","Returns all the potential contact pairs found during the broad phase, and validated by the narrow phase.",27,{"inputs":[{"name":"self"},{"name":"uidremap"}],"output":{"name":"contactpairs"}}],[10,"proximity_pairs","","Returns all the potential proximity pairs found during the broad phase, and validated by the narrow phase.",27,{"inputs":[{"name":"self"},{"name":"uidremap"}],"output":{"name":"proximitypairs"}}],[8,"ContactGenerator","","Trait implemented algorithms that compute contact points, normals and penetration depths.",null,null],[10,"update","","Runs the collision detection on two objects. It is assumed that the same collision detector (the same structure) is always used with the same pair of object.",28,null],[10,"num_contacts","","The number of contacts generated the last update.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"contacts","","Collects the contacts generated during the last update.",28,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[8,"ContactDispatcher","","",null,null],[10,"get_contact_algorithm","","Allocate a collision algorithm corresponding to the given pair of shapes.",29,{"inputs":[{"name":"self"},{"name":"shape"},{"name":"shape"}],"output":{"name":"option"}}],[8,"ProximityDetector","","Trait implemented by algorithms that determine if two objects are in close proximity.",null,null],[10,"update","","Runs the proximity detection on two objects. It is assumed that the same proximity detector (the same structure) is always used with the same pair of object.",30,null],[10,"proximity","","The number of collision detected during the last update.",30,{"inputs":[{"name":"self"}],"output":{"name":"proximity"}}],[8,"ProximityDispatcher","","",null,null],[10,"get_proximity_algorithm","","Allocate a collision algorithm corresponding to the given pair of shapes.",31,{"inputs":[{"name":"self"},{"name":"shape"},{"name":"shape"}],"output":{"name":"option"}}],[8,"ContactHandler","","A signal handler for contact detection.",null,null],[10,"handle_contact_started","","Activate an action for when two objects start being in contact.",32,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"},{"name":"contactalgorithm"}],"output":null}],[10,"handle_contact_stopped","","Activate an action for when two objects stop being in contact.",32,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"}],"output":null}],[8,"ProximityHandler","","A signal handler for proximity detection.",null,null],[10,"handle_proximity","","Activate an action for when two objects start or stop to be close to each other.",33,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"},{"name":"proximity"},{"name":"proximity"}],"output":null}],[0,"world","ncollide_pipeline","High level API to detect collisions in large, complex scenes.",null,null],[3,"CollisionObject","ncollide_pipeline::world","A stand-alone object that has a position and a shape.",null,null],[12,"uid","","The collsion object unique identifier.",34,null],[12,"position","","The collision object position.",34,null],[12,"shape","","The collision object shape.",34,null],[12,"collision_groups","","The collision groups of the collision object.",34,null],[12,"query_type","","The kind of queries this collision object is expected to .",34,null],[12,"data","","The user-defined data associated to this object.",34,null],[3,"CollisionGroups","","Groups of collision used to filter which object interact with which other one.",null,null],[3,"CollisionGroupsPairFilter","","A collision filter based collision groups.",null,null],[3,"CollisionWorld","","A world that handles collision objects.",null,null],[4,"GeometricQueryType","","The kind of query a CollisionObject may be involved on.",null,null],[13,"Contacts","","This objects can respond to both contact point computation and proximity queries.",35,null],[13,"Proximity","","This object can respond to proximity tests only.",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"geometricquerytype"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"geometricquerytype"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"geometricquerytype"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"query_limit","","The numerical limit of relevance for this query.",35,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"is_contacts_query","","Returns `true` if this is a contacts query type.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_proximity_query","","Returns `true` if this is a proximity query type.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new collision object.",34,{"inputs":[{"name":"usize"},{"name":"m"},{"name":"shapehandle"},{"name":"collisiongroups"},{"name":"geometricquerytype"},{"name":"t"}],"output":{"name":"collisionobject"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"collisiongroups"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `CollisionGroups` that enables interactions with everything except self-interaction.",36,{"inputs":[],"output":{"name":"collisiongroups"}}],[11,"max_group_id","","The maximum allowed group identifier.",36,{"inputs":[],"output":{"name":"usize"}}],[11,"modify_membership","","Adds or removes this entity from the given group.",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"modify_whitelist","","Adds or removes the given group from this entity whitelist.",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"modify_blacklist","","Adds or removes this entity from the given group.",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_membership","","Make this object member of the given groups only.",36,null],[11,"set_whitelist","","Whitelists the given groups only (others will be un-whitelisted).",36,null],[11,"set_blacklist","","Blacklists the given groups only (others will be un-blacklisted).",36,null],[11,"copy_membership","","Copies the membership of another collision groups.",36,{"inputs":[{"name":"self"},{"name":"collisiongroups"}],"output":null}],[11,"copy_whitelist","","Copies the whitelist of another collision groups.",36,{"inputs":[{"name":"self"},{"name":"collisiongroups"}],"output":null}],[11,"copy_blacklist","","Copies the blacklist of another collision groups.",36,{"inputs":[{"name":"self"},{"name":"collisiongroups"}],"output":null}],[11,"enable_self_interaction","","Allows the object to interact with itself.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_self_interaction","","Prevents the object from interacting with itself.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"is_member_of","","Tests if this entity is part of the given group.",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_group_whitelisted","","Tests if the given group is whitelisted.",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_group_blacklisted","","Tests if the given group is blacklisted.",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"can_interact_with","","Tests whether interactinos with a given group is possible.",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"can_interact_with_groups","","Tests whether two collision groups have at least one group in common.",36,{"inputs":[{"name":"self"},{"name":"collisiongroups"}],"output":{"name":"bool"}}],[11,"can_interact_with_self","","Tests whether self-interaction is enabled.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new collision filter based collision groups.",37,{"inputs":[],"output":{"name":"collisiongroupspairfilter"}}],[11,"is_pair_valid","","",37,{"inputs":[{"name":"self"},{"name":"collisionobject"},{"name":"collisionobject"}],"output":{"name":"bool"}}],[11,"new","","Creates a new collision world.",38,null],[11,"deferred_add","","Adds a collision object to the world.",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"m"},{"name":"shapehandle"},{"name":"collisiongroups"},{"name":"geometricquerytype"},{"name":"t"}],"output":null}],[11,"update","","Updates the collision world.",38,{"inputs":[{"name":"self"}],"output":null}],[11,"deferred_remove","","Marks a collision object for removal from the world during the next update.",38,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"deferred_set_position","","Sets the position the collision object attached to the specified object will have during the next update.",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"m"}],"output":null}],[11,"register_broad_phase_pair_filter","","Adds a filter that tells if a potential collision pair should be ignored or not.",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"unregister_broad_phase_pair_filter","","Removes the pair filter named `name`.",38,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"register_contact_handler","","Registers a handler for contact start/stop events.",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"h"}],"output":null}],[11,"unregister_contact_handler","","Unregisters a handler for contact start/stop events.",38,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"register_proximity_handler","","Registers a handler for proximity status change events.",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"h"}],"output":null}],[11,"unregister_proximity_handler","","Unregisters a handler for proximity status change events.",38,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"perform_position_update","","Executes the position updates.",38,{"inputs":[{"name":"self"}],"output":null}],[11,"perform_additions_removals_and_broad_phase","","Actually adds or removes all the objects marked by `.deferred_add(...)` or `.deferred_remove(...)` and updates the broad phase.",38,{"inputs":[{"name":"self"}],"output":null}],[11,"perform_broad_phase","","Executes the broad phase of the collision detection pipeline.",38,{"inputs":[{"name":"self"}],"output":null}],[11,"perform_narrow_phase","","Executes the narrow phase of the collision detection pipeline.",38,{"inputs":[{"name":"self"}],"output":null}],[11,"set_narrow_phase","","Sets a new narrow phase and returns the previous one.",38,{"inputs":[{"name":"self"},{"name":"box"}],"output":{"name":"box"}}],[11,"contact_pairs","","Iterates through all the contact pairs detected since the last update.",38,{"inputs":[{"name":"self"}],"output":{"name":"contactpairs"}}],[11,"proximity_pairs","","Iterates through all the proximity pairs detected since the last update.",38,{"inputs":[{"name":"self"}],"output":{"name":"proximitypairs"}}],[11,"contacts","","Iterates through every contact detected since the last update.",38,{"inputs":[{"name":"self"}],"output":{"name":"contacts"}}],[11,"collision_objects","","Iterates through all collision objects.",38,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"collision_object","","Returns a reference to the collision object identified by `uid`.",38,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"interferences_with_ray","","Computes the interferences between every rigid bodies on this world and a ray.",38,{"inputs":[{"name":"self"},{"name":"ray"},{"name":"collisiongroups"}],"output":{"name":"interferenceswithray"}}],[11,"interferences_with_point","","Computes the interferences between every rigid bodies of a given broad phase, and a point.",38,{"inputs":[{"name":"self"},{"name":"p"},{"name":"collisiongroups"}],"output":{"name":"interferenceswithpoint"}}],[11,"interferences_with_aabb","","Computes the interferences between every rigid bodies of a given broad phase, and a aabb.",38,{"inputs":[{"name":"self"},{"name":"aabb"},{"name":"collisiongroups"}],"output":{"name":"interferenceswithaabb"}}],[6,"BroadPhaseObject","","Type of the broad phase trait-object used by the collision world.",null,null],[6,"NarrowPhaseObject","","Type of the narrow phase trait-object used by the collision world.",null,null],[6,"CollisionWorld3","","A 3D collision world associating collision objects to user-defined data of type `T`.",null,null],[6,"CollisionWorld2","","A 2D collision world associating collision objects to user-defined data of type `T`.",null,null],[6,"CollisionObject3","","A 3D collision object with user-defined data of type `T`.",null,null],[6,"CollisionObject2","","A 2D collision object with user-defined data of type `T`.",null,null]],"paths":[[3,"BruteForceBroadPhase"],[3,"DBVTBroadPhase"],[3,"BroadPhasePairFilters"],[8,"BroadPhase"],[8,"BroadPhasePairFilter"],[3,"DefaultContactDispatcher"],[3,"BallBallContactGenerator"],[3,"PlaneSupportMapContactGenerator"],[3,"SupportMapPlaneContactGenerator"],[3,"SupportMapSupportMapContactGenerator"],[3,"IncrementalContactManifoldGenerator"],[3,"OneShotContactManifoldGenerator"],[3,"CompositeShapeShapeContactGenerator"],[3,"ShapeCompositeShapeContactGenerator"],[3,"BallBallProximityDetector"],[3,"PlaneSupportMapProximityDetector"],[3,"SupportMapPlaneProximityDetector"],[3,"SupportMapSupportMapProximityDetector"],[3,"CompositeShapeShapeProximityDetector"],[3,"ShapeCompositeShapeProximityDetector"],[3,"DefaultProximityDispatcher"],[3,"ContactPairs"],[3,"Contacts"],[3,"ProximityPairs"],[3,"DefaultNarrowPhase"],[3,"ContactSignal"],[3,"ProximitySignal"],[8,"NarrowPhase"],[8,"ContactGenerator"],[8,"ContactDispatcher"],[8,"ProximityDetector"],[8,"ProximityDispatcher"],[8,"ContactHandler"],[8,"ProximityHandler"],[3,"CollisionObject"],[4,"GeometricQueryType"],[3,"CollisionGroups"],[3,"CollisionGroupsPairFilter"],[3,"CollisionWorld"]]};
searchIndex["ncollide_procedural"] = {"doc":"Procedural mesh generation.","items":[[3,"TriMesh","ncollide_procedural","Geometric description of a mesh.",null,null],[12,"coords","","Coordinates of the mesh vertices.",0,null],[12,"normals","","Coordinates of the mesh normals.",0,null],[12,"uvs","","Textures coordinates of the mesh.",0,null],[12,"indices","","Index buffer of the mesh.",0,null],[3,"Polyline","","Geometric description of a polyline.",null,null],[4,"IndexBuffer","","Different representations of the index buffer.",null,null],[13,"Unified","","The vertex, normal, and uvs share the same indices.",1,null],[13,"Split","","The vertex, normal, and uvs have different indices.",1,null],[5,"bezier_surface","","Given a set of control points, generates a (non-rational) Bezier surface.",null,null],[5,"bezier_curve","","Given a set of control points, generates a (non-rational) Bezier curve.",null,null],[5,"capsule","","Generates a capsule.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"unit_cone","","Generates a cone with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cone","","Generates a cone with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"trimesh"}}],[5,"unit_cuboid","","Generates a cuboid shape with a split index buffer.",null,{"inputs":[],"output":{"name":"trimesh"}}],[5,"rectangle","","The contour of a cuboid lying on the x-y plane.",null,null],[5,"unit_rectangle","","The contour of a unit cuboid lying on the x-y plane.",null,{"inputs":[],"output":{"name":"polyline"}}],[5,"unit_cylinder","","Generates a cylinder with unit height and diameter.",null,{"inputs":[{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"cylinder","","Generates a cylinder with a given height and diameter.",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"u32"}],"output":{"name":"trimesh"}}],[5,"quad","","Adds a double-sided quad to the scene.",null,null],[5,"unit_quad","","Adds a double-sided quad with unit size to the scene.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"trimesh"}}],[5,"quad_with_vertices","","Adds a double-sided quad with the specified grid of vertices.",null,null],[5,"sphere","","Generates a UV sphere.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"unit_sphere","","Generates a UV sphere centered at the origin and with a unit diameter.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"bool"}],"output":{"name":"trimesh"}}],[5,"circle","","Creates a circle lying on the `(x,y)` plane.",null,null],[5,"unit_circle","","Creates a circle lying on the `(x,y)` plane.",null,{"inputs":[{"name":"u32"}],"output":{"name":"polyline"}}],[5,"unit_hemisphere","","Creates an hemisphere with a diameter of 1.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"trimesh"}}],[0,"utils","","Utilities useful for various generations tasks.",null,null],[5,"push_circle","ncollide_procedural::utils","Pushes a discretized counterclockwise circle to a buffer.",null,{"inputs":[{"name":"n"},{"name":"u32"},{"name":"n"},{"name":"n"},{"name":"vec"}],"output":null}],[5,"push_xy_arc","","Pushes a discretized counterclockwise circle to a buffer. The circle is contained on the plane spanned by the `x` and `y` axis.",null,null],[5,"push_ring_indices","","Creates the faces from two circles with the same discretization.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_open_ring_indices","","Creates the faces from two circles with the same discretization.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_degenerate_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_degenerate_open_top_ring_indices","","Creates the faces from a circle and a point that is shared by all triangle.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_filled_circle_indices","","Pushes indices so that a circle is filled with triangles. Each triangle will have the `base_circle` point in common. Pushes `nsubdiv - 2` elements to `out`.",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":null}],[5,"push_rectangle_indices","","Given four corner points, pushes to two counterclockwise triangles to `out`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"vec"}],"output":null}],[5,"reverse_clockwising","","Reverses the clockwising of a set of faces.",null,null],[5,"split_index_buffer","","Duplicates the indices of each triangle on the given index buffer.",null,null],[5,"split_index_buffer_and_recover_topology","","Duplicates the indices of each triangle on the given index buffer, giving the same id to each identical vertex.",null,null],[5,"compute_normals","","Computes the normals of a set of vertices.",null,null],[0,"path","ncollide_procedural","Path generation.",null,null],[3,"PolylinePattern","ncollide_procedural::path","A pattern composed of polyline and two caps.",null,null],[3,"PolylinePath","","A path with its sample points given by a polyline.",null,null],[3,"ArrowheadCap","","A cap that looks like an arrow.",null,null],[3,"NoCap","","A cap that renders nothing.",null,null],[4,"PathSample","","A sample point and its associated tangent.",null,null],[13,"StartPoint","","A point that starts a new path.",2,null],[13,"InnerPoint","","A point that is inside of the path currently generated.",2,null],[13,"EndPoint","","A point that ends the path currently generated.",2,null],[13,"EndOfSample","","Used when the sampler does not have any other points to generate.",2,null],[11,"new","","Creates a new `NoCap`.",3,{"inputs":[],"output":{"name":"nocap"}}],[11,"gen_start_cap","","",3,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"polyline"},{"name":"point3"},{"name":"vector3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"gen_end_cap","","",3,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"polyline"},{"name":"point3"},{"name":"vector3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"new","","Creates a cap that looks like an arrow.",4,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"arrowheadcap"}}],[11,"gen_end_cap","","",4,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"polyline"},{"name":"point3"},{"name":"vector3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"gen_start_cap","","",4,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"polyline"},{"name":"point3"},{"name":"vector3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new polyline pattern.",5,{"inputs":[{"name":"polyline"},{"name":"bool"},{"name":"c1"},{"name":"c2"}],"output":{"name":"polylinepattern"}}],[11,"stroke","","",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"trimesh"}}],[11,"new","","Creates a new polyline-based path.",6,{"inputs":[{"name":"polyline"}],"output":{"name":"polylinepath"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"pathsample"}}],[8,"CurveSampler","","A curve sampler.",null,null],[10,"next","","Returns the next sample point.",7,{"inputs":[{"name":"self"}],"output":{"name":"pathsample"}}],[8,"StrokePattern","","A pattern that is replicated along a path.",null,null],[10,"stroke","","Generates the mesh using this pattern and the curve sampled by `sampler`.",8,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"trimesh"}}],[8,"PolylineCompatibleCap","","Trait to be implemented by caps compatible with a `PolylinePattern`.",null,null],[10,"gen_start_cap","","Generates the mesh for the cap at the beginning of a path.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"polyline"},{"name":"point3"},{"name":"vector3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[10,"gen_end_cap","","Generates the mesh for the cap at the end of a path.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"polyline"},{"name":"point3"},{"name":"vector3"},{"name":"bool"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"clone","ncollide_procedural","",1,{"inputs":[{"name":"self"}],"output":{"name":"indexbuffer"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unwrap_unified","","Returns the unified index buffer data or fails.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"unwrap_split","","Returns the split index buffer data or fails.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trimesh"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `TriMesh`.",0,{"inputs":[{"name":"vec"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"trimesh"}}],[11,"has_normals","","Whether or not this triangle mesh has normals.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_uvs","","Whether or not this triangle mesh has texture coordinates.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"translate_by","","Translates each vertex of this mesh.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"transform_by","","Transforms each vertex and rotates each normal of this mesh.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"num_triangles","","The number of triangles on this mesh.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rotate_by","","Rotates each vertex and normal of this mesh.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"recompute_normals","","Recomputes the mesh normals using its vertex coordinates and adjascency informations infered from the index buffer.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"scale_by","","Scales each vertex of this mesh.",0,null],[11,"scale_by_scalar","","Scales each vertex of this mesh.",0,null],[11,"unify_index_buffer","","Force the mesh to use the same index for vertices, normals and uvs.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"split_index_buffer","","Forces the mesh to use a different index for the vertices, normals and uvs.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"polyline"}}],[11,"new","","Creates a new polyline.",10,{"inputs":[{"name":"vec"},{"name":"option"}],"output":{"name":"polyline"}}],[11,"unwrap","","Moves the polyline data out of it.",10,null],[11,"coords","","The coordinates of this polyline vertices.",10,null],[11,"coords_mut","","The mutable coordinates of this polyline vertices.",10,null],[11,"normals","","The normals of this polyline vertices.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"normals_mut","","The mutable normals of this polyline vertices.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"translate_by","","Translates each vertex of this polyline.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rotate_by","","Rotates each vertex and normal of this polyline.",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"transform_by","","Transforms each vertex and rotates each normal of this polyline.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"scale_by_scalar","","Scales each vertex of this polyline.",10,null],[11,"scale_by","","Scales each vertex of this mesh.",10,null],[6,"TriMesh3","","A 3D triangle mesh.",null,null],[6,"Polyline3","","A 3D polyline.",null,null],[6,"TriMesh2","","A 2D triangle mesh.",null,null],[6,"Polyline2","","A 2D polyline.",null,null]],"paths":[[3,"TriMesh"],[4,"IndexBuffer"],[4,"PathSample"],[3,"NoCap"],[3,"ArrowheadCap"],[3,"PolylinePattern"],[3,"PolylinePath"],[8,"CurveSampler"],[8,"StrokePattern"],[8,"PolylineCompatibleCap"],[3,"Polyline"]]};
searchIndex["ncollide_transformation"] = {"doc":"Transformation, simplification and decomposition of meshes.","items":[[5,"hacd","ncollide_transformation","Approximate convex decomposition of a triangle mesh.",null,null],[5,"convex_hull3","","Computes the convex hull of a set of 3d points.",null,null],[5,"convex_hull2","","Computes the convex hull of a set of 2d points.",null,null],[5,"convex_hull2_idx","","Computes the convex hull of a set of 2d points and returns only the indices of the hull vertices.",null,null],[5,"triangulate","","Triangulates a set of point (sort of) lying on the same 2d plane.",null,null],[8,"ToTriMesh","","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_trimesh","","Builds a triangle mesh from this shape.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"trimesh"}}],[8,"ToPolyline","","Trait implemented by shapes that can be approximated by a triangle mesh.",null,null],[10,"to_polyline","","Builds a triangle mesh from this shape.",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"polyline"}}]],"paths":[[8,"ToTriMesh"],[8,"ToPolyline"]]};
searchIndex["ncollide_utils"] = {"doc":"Miscelaneous elementary geometric utilities.","items":[[3,"HashablePartialEq","ncollide_utils","A structure that implements `Eq` and is hashable even if the wrapped data implements only `PartialEq`.",null,null],[5,"center","","Computes the center of a set of point.",null,null],[5,"circumcircle","","Computes the circumcircle of a triangle.",null,null],[5,"is_affinely_dependent_triangle3","","Tests if three 3D points are approximately aligned.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"is_point_in_triangle","","Tests if a point is inside of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[5,"triangle_area","","Computes the area of a triangle.",null,null],[5,"triangle_center","","Computes the center of a triangle.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"triangle_perimeter","","Computes the perimeter of a triangle.",null,null],[5,"tetrahedron_volume","","Computes the volume of a tetrahedron.",null,null],[5,"tetrahedron_signed_volume","","Computes the signed volume of a tetrahedron.",null,null],[5,"tetrahedron_center","","Computes the center of a tetrahedron.",null,{"inputs":[{"name":"p"},{"name":"p"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"remove_unused_points","","Given an index buffer, remove from `points` every point that is not indexed.",null,null],[5,"dcos","","Computes the n-th derivative of the cosinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"dsin","","Computes the n-th derivative of the sinus function.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"binom","","Computes the binomial coefficient C^k_n (\"k among n\").",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"median","","Computes the median of a set of values.",null,null],[5,"sort3","","Sorts a set of three values in increasing order.",null,null],[5,"cross3","","A 3d cross product that do not require the `Cross<Self, Self>` trait impl.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"v"}}],[5,"point_cloud_support_point","","Computes the support point of a cloud of points.",null,null],[5,"repeat","","Creates a vector with all its components equal to `e`.",null,null],[0,"data","","Data structure utilities.",null,null],[0,"pair","ncollide_utils::data","Hashable pair of objects implementing `HasUid`.",null,null],[3,"Pair","ncollide_utils::data::pair","An unordered pair of elements implementing `HasUid`.",null,null],[12,"first","","first object of the pair",0,null],[12,"second","","second object of the pair",0,null],[3,"PairTWHash","","Tomas Wang based hash function for a `Pair` object.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"pair"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","Builds a new `Pair`.",0,{"inputs":[{"name":"fastkey"},{"name":"fastkey"}],"output":{"name":"pair"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"pair"}],"output":{"name":"bool"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","Creates a new PairTWHash",1,{"inputs":[],"output":{"name":"pairtwhash"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"pair"}],"output":{"name":"usize"}}],[0,"hash","ncollide_utils::data","Trait for hash functions.",null,null],[3,"UintPairTWHash","ncollide_utils::data::hash","Hash function for pairs of `usize`, using the Tomas Wang hash.",null,null],[3,"UintTWHash","","Hash function for `usize`.",null,null],[5,"key_from_pair","","Combines two `usize` on a single one.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[5,"tomas_wang_hash","","Tomas Wang integer hash function.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[8,"HashFun","","Hash function.",null,null],[10,"hash","","Hash function.",2,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"usize"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uintpairtwhash"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","Creates a new UintPairTWHash.",3,{"inputs":[],"output":{"name":"uintpairtwhash"}}],[11,"hash","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"uinttwhash"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","Creates a new UintTWHash.",4,{"inputs":[],"output":{"name":"uinttwhash"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"hash_map","ncollide_utils::data","An hash map with a customizable hash function.",null,null],[3,"Entry","ncollide_utils::data::hash_map","Entry of an `HashMap`.",null,null],[12,"key","","The key of the entry.",5,null],[12,"value","","The value of the entry.",5,null],[3,"HashMap","","Alternative implementation of `HashMap`.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"__skv"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"__dkv"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"__skvh"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"__dkvh"}],"output":{"name":"result"}}],[11,"new","","Creates a new hash map.",6,{"inputs":[{"name":"h"}],"output":{"name":"hashmap"}}],[11,"new_with_capacity","","Creates a new hash map with a given capacity.",6,{"inputs":[{"name":"usize"},{"name":"h"}],"output":{"name":"hashmap"}}],[11,"elements","","The elements added to this hash map.",6,null],[11,"elements_mut","","The elements added to this hash map.",6,null],[11,"len","","The number of elements contained by this hashmap.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this hashmap is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Removes everything from this hashmap.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"remove_elem_at","","Removes the element at the specified position of the element array.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_and_remove","","Removes an element and returns its value if it existed.",6,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"find_or_insert_lazy","","Same as `self.insert_or_replace(key, value, false)` but with `value` a function which is called iff. the value does not exist yet. If the functions returns `None`, nothing is inserted.",6,{"inputs":[{"name":"self"},{"name":"k"},{"name":"f"}],"output":{"name":"option"}}],[11,"insert_or_replace","","Inserts or replace an element.",6,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"},{"name":"bool"}],"output":{"name":"v"}}],[11,"contains_key","","Checks whether this hashmap contains a specific key.",6,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find","","Finds a reference to the element with a given key.",6,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element on the hash map.",6,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"bool"}}],[11,"remove","","Remove an element from the hash map.",6,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"find_mut","","Gets a mutable reference to an element of the hashmap.",6,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[0,"owned_allocation_cache","ncollide_utils::data","Allocation cache for owned objects.",null,null],[3,"OwnedAllocationCache","ncollide_utils::data::owned_allocation_cache","Cache for owned objects.",null,null],[11,"new","","Initializes the cache.",7,{"inputs":[],"output":{"name":"ownedallocationcache"}}],[11,"alloc","","Box a value into a potentially already allocated box.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"box"}}],[11,"retain","","Retains a box which can be re-used by the `box` method.",7,{"inputs":[{"name":"self"},{"name":"box"}],"output":null}],[11,"clear","","Clears the cache, destroying any stored pointer.",7,{"inputs":[{"name":"self"}],"output":null}],[0,"vec_slice","ncollide_utils::data","Slicing on non-contiguous data.",null,null],[3,"VecSlice","ncollide_utils::data::vec_slice","A vector slice with a specific length and stride.",null,null],[3,"VecSliceMut","","A mutable vector slice with a specific length and stride.",null,null],[11,"new","","Creates a new immutable slice.",8,null],[11,"new_unsafe","","Creates a new immutable slice. The size of the data buffer is not checked.",8,null],[11,"len","","The length of this slice.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Gets the i-th element of the slice.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","Creates a new mutable slice.",9,null],[11,"new_unsafe","","Creates a new mutable slice. The size of the data buffer is not checked.",9,null],[11,"len","","The length of this slice.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Whether or not this slice is empty.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_slice","","Creates an immutable slice from this mutable slice.",9,{"inputs":[{"name":"self"}],"output":{"name":"vecslice"}}],[11,"get","","Gets the i-th element of the slice.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked","","Gets the i-th element of the slice without bound-checking.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get_unchecked_mut","","Gets a mutable reference to the i-th element of the slice without bound-checking.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"copy_from","","Copy the content of another slice. Both slices must have the same length.",9,{"inputs":[{"name":"self"},{"name":"vecslice"}],"output":null}],[0,"ref_with_cost","ncollide_utils::data","A reference packed with a cost value.",null,null],[3,"RefWithCost","ncollide_utils::data::ref_with_cost","A reference packed with a cost value.",null,null],[12,"object","","The reference to an object.",10,null],[12,"cost","","The cost of the object.",10,null],[11,"new","","Creates a new reference packed with a cost value.",10,{"inputs":[{"name":"t"},{"name":"n"}],"output":{"name":"refwithcost"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"refwithcost"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"refwithcost"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"refwithcost"}],"output":{"name":"ordering"}}],[0,"uid_remap","ncollide_utils::data","A map allowing a slow lookup for arbitrary `usize` and fast lookup for small ones.",null,null],[3,"FastKey","ncollide_utils::data::uid_remap","A special type of key used by `UidRemap` to perform faster lookups than with the user-defined id of type `usize`.",null,null],[3,"UidRemap","","A set of values having large usize key.",null,null],[3,"FastKeys","","An iterator through a `UidRemap` fast keys in use.",null,null],[3,"FastKeysAndValues","","An iterator through a `UidRemap` fast keys and values.",null,null],[3,"FastKeysAndValuesMut","","An iterator through a `UidRemap` fast keys and values.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"fastkey"}}],[11,"hash","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"ordering"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new_invalid","","Creates a new invalid key that won't be used by the `UidRemap` structure, ever.",11,{"inputs":[],"output":{"name":"fastkey"}}],[11,"uid","","The small uid contained by this key.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"uidremap"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"uidremap"}}],[11,"new","","Creates an empty `UidRemap`.",12,{"inputs":[{"name":"bool"}],"output":{"name":"uidremap"}}],[11,"get_fast_key","","Gets the fast key associated to the given key.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Return the number of elements in the map.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Return true if the map contains no elements.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",12,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast","","Returns a reference to the value corresponding to the fast key.",12,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"contains_fast_key","","Returns true if the map contains a value for the specified fast key.",12,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_fast_mut","","Returns a mutable reference to the value corresponding to the fast key.",12,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair to the map. If the key already had a value present in the map, that value and its fast key are returned. Otherwise, `None` is returned.",12,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key exists.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"keys","","Returns an iterator visiting all keys.",12,{"inputs":[{"name":"self"}],"output":{"name":"fastkeys"}}],[11,"values","","Returns an iterator visiting all values. The iterator's element type is `&'r O`.",12,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs.",12,{"inputs":[{"name":"self"}],"output":{"name":"fastkeysandvalues"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs with mutable references to the values.",12,{"inputs":[{"name":"self"}],"output":{"name":"fastkeysandvaluesmut"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"update","","Updates a value in the map. If the key already exists in the map, modifies the value with `ff` taking `oldval, newval`. Otherwise, sets the value to `newval`. Returns `true` if the key did not already exist in the map.",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"update_with_key","","Updates a value in the map. If the key already exists in the map, modifies the value with `ff` taking `key, oldval, newval`. Otherwise, sets the value to `newval`. Returns `true` if the key did not already exist in the map.",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"o"},{"name":"f"}],"output":{"name":"bool"}}],[11,"from_iter","","",12,{"inputs":[{"name":"i"}],"output":{"name":"uidremap"}}],[11,"extend","","",12,{"inputs":[{"name":"self"},{"name":"iter"}],"output":null}],[11,"index","","",12,{"inputs":[{"name":"self"},{"name":"fastkey"}],"output":{"name":"o"}}],[0,"vec_map","ncollide_utils::data","A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).",null,null],[3,"VecMap","ncollide_utils::data::vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",16,null],[13,"Occupied","","An occupied Entry",16,null],[11,"default","","",17,{"inputs":[],"output":{"name":"vecmap"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",17,{"inputs":[{"name":"self"},{"name":"vecmap"}],"output":null}],[11,"hash","","",17,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",17,{"inputs":[],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",17,{"inputs":[{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",17,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",17,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",17,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",17,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"split_off","","Splits the collection into two at the given key.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"len","","Returns the number of elements in the map.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",17,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",19,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",19,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",19,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",19,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",17,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","ncollide_utils","",25,{"inputs":[{"name":"self"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"hashablepartialeq"}],"output":{"name":"bool"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"hashablepartialeq"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `HashablePartialEq`. This is unsafe because you must be sure that you really want to transform the wrapped object's partial equality to an equivalence relation.",25,{"inputs":[{"name":"t"}],"output":{"name":"hashablepartialeq"}}],[11,"unwrap","","Gets the wrapped value.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"hash","","",25,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[8,"AsBytes","","Trait that transforms thing to a slice of u8.",null,null],[10,"as_bytes","","",26,null]],"paths":[[3,"Pair"],[3,"PairTWHash"],[8,"HashFun"],[3,"UintPairTWHash"],[3,"UintTWHash"],[3,"Entry"],[3,"HashMap"],[3,"OwnedAllocationCache"],[3,"VecSlice"],[3,"VecSliceMut"],[3,"RefWithCost"],[3,"FastKey"],[3,"UidRemap"],[3,"FastKeys"],[3,"FastKeysAndValues"],[3,"FastKeysAndValuesMut"],[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"IntoIter"],[3,"HashablePartialEq"],[8,"AsBytes"]]};
searchIndex["nitro"] = {"doc":"","items":[[3,"App","nitro","This structure represents a game instance.",null,null],[12,"input","","",0,null],[12,"camera","","",0,null],[12,"world","","",0,null],[12,"audio","","",0,null],[3,"GameObject","","GameObjects are the primary descriptor for things that are visible in the game world. Players, items, enemies, and whatever else exists in your game world are typically GameObjects.",null,null],[12,"transform","","",1,null],[12,"sprite","","",1,null],[12,"body","","",1,null],[3,"Camera","","Describes a viewpoint into the world.",null,null],[12,"transform","","",2,null],[4,"OptionLoaned","","Special variant of Option that indicates a value may exist but is currently loaned out in a &mut.",null,null],[13,"Some","","",3,null],[13,"Loaned","","",3,null],[13,"None","","",3,null],[11,"new","","Constructs a new App using the given name for the window title.",0,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"run","","Begin execution of the game.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"quit","","Exit the game",0,{"inputs":[{"name":"self"}],"output":null}],[11,"camera","","",0,{"inputs":[{"name":"self"}],"output":{"name":"camera"}}],[11,"camera_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"camera"}}],[11,"world_mouse_pos","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"new_gameobject","","Creates a new GameObject",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u64"}}],[11,"game_object_by_id","","Retrieves a reference to an existing GameObject by the GameObject's id.",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"optionloaned"}}],[11,"game_object_by_id_mut","","Retrieves a mutable reference to an existing GameObject by the GameObject's id.",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"optionloaned"}}],[11,"fetch_texture","","Loads a texture and returns it for use.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[0,"audio","","",null,null],[3,"Audio","nitro::audio","Responsible for controlling audio playback in the game.",null,null],[12,"playlist","","",4,null],[3,"Playlist","","Allows you to create and control playlists for music playback.",null,null],[12,"shuffle","","If this is true playlist will be shuffled on start and on loop",5,null],[12,"loop_music","","If this is true playlist will loop back to start when music is finished.",5,null],[11,"id","nitro","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"send_message_to_component","","",1,{"inputs":[{"name":"self"},{"name":"app"},{"name":"message"},{"name":"i32"}],"output":null}],[11,"receive_message","","",1,{"inputs":[{"name":"self"},{"name":"app"},{"name":"message"}],"output":null}],[11,"update","","",1,{"inputs":[{"name":"self"},{"name":"app"},{"name":"f32"}],"output":null}],[11,"component_keys","","",1,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"component_keys_with_type","","",1,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"remove_component","","",1,{"inputs":[{"name":"self"},{"name":"app"},{"name":"i32"}],"output":{"name":"optionloaned"}}],[11,"component","","",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"optionloaned"}}],[11,"component_mut","","",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"optionloaned"}}],[11,"component_with_type","","",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"component_mut_with_type","","",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"insert_component","","",1,{"inputs":[{"name":"self"},{"name":"app"},{"name":"t"},{"name":"i32"}],"output":{"name":"option"}}],[11,"add_component","","",1,{"inputs":[{"name":"self"},{"name":"app"},{"name":"t"}],"output":{"name":"i32"}}],[11,"set_rigid_body","","",1,{"inputs":[{"name":"self"},{"name":"app"},{"name":"rigidbody"}],"output":null}],[0,"component","","",null,null],[4,"Message","nitro::component","",null,null],[13,"Start","","Sent to Components the instant they are attached to a GameObject.",6,null],[12,"key","nitro::component::Message","",6,null],[13,"Update","nitro::component","Sent to Components every frame, delta_time is the time elapsed since last frame in seconds.",6,null],[12,"delta_time","nitro::component::Message","",6,null],[13,"OnDestroy","nitro::component","Sent to all components on a GameObject prior to the GameObject being destroyed.",6,null],[13,"OnDetach","","Sent when this component is removed from the GameObject.",6,null],[13,"UserMessage","","Whatever you want it to be!  You can send and receive this message type as much as you like, Nitro will never send these.",6,null],[8,"Component","","Allows GameObjects to be extended with additional behavior.",null,null],[10,"receive_message","","This function is called whenever the app has a message for your Component.  By using a match statement on the message you can make your component respond to a variety of events generated by the engine.",7,{"inputs":[{"name":"self"},{"name":"app"},{"name":"gameobject"},{"name":"message"}],"output":null}],[10,"render_gui","","Called whenever the game is ready for you to render a gui.  If you have no gui to render then do nothing in this function.  This will be called for every component on every GameObject every frame.",7,{"inputs":[{"name":"self"},{"name":"canvas"},{"name":"gameobject"}],"output":null}],[8,"ComponentAny","","Helper trait for Components, any struct that implements Component and Any automatically implements this trait.  Needed to allow components of a specific type to be queried for on a GameObject.",null,null],[10,"as_any","","",8,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[10,"as_any_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[0,"graphics","nitro","",null,null],[3,"Texture","nitro::graphics","A static handle to a texture whose data is managed by Nitro.",null,null],[12,"flip_vertical","","",9,null],[12,"flip_horizontal","","",9,null],[3,"SpriteSheet","","An animation given by a SpriteSheet.",null,null],[12,"animations","","",10,null],[12,"current_animation","","",10,null],[12,"current_frame","","",10,null],[3,"Canvas","","A canvas that can be drawn on.  Provided for open ended \"draw what you want to here\" operations.",null,null],[4,"Sprite","","Something which can be displayed on screen.  This can optionally be animated.",null,null],[13,"Texture","","A static image.  No animation is available.",11,null],[13,"SpriteSheet","","An animation given by a SpriteSheet.",11,null],[0,"math","nitro","",null,null],[3,"PolarCoords","nitro::math","Polar coordinates, can be converted to and from nitro::math::Vector.",null,null],[12,"rotation","","",12,null],[12,"radius","","",12,null],[3,"Rect","","",null,null],[12,"xy","","",13,null],[12,"size","","",13,null],[3,"IntRect","","",null,null],[12,"xy","","",14,null],[12,"width","","",14,null],[12,"height","","",14,null],[5,"check_and_use","","",null,{"inputs":[{"name":"t"},{"name":"k"}],"output":{"name":"bool"}}],[6,"Vector","","",null,null],[6,"Transform","","",null,null],[6,"IntVector","","",null,null],[8,"VecConvert","","",null,null],[10,"to_int_vec","","",15,{"inputs":[{"name":"self"}],"output":{"name":"intvector"}}],[8,"TransformDirections","","",null,null],[10,"right","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[10,"up","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[8,"IntVecConvert","","",null,null],[10,"to_vec","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[0,"input","nitro","",null,null],[3,"Axis","nitro::input","An input axis, could be bound to W and S, A and D, up and down, or left and right.",null,null],[3,"Input","","Allows you to query user input, and save and load keybindings and axes.",null,null],[12,"mouse","","",18,null],[4,"Button","","A digital input, can be made to behave like an analog axis using nitro::input::Axis.",null,null],[13,"Keyboard","","",19,null],[13,"Mouse","","",19,null],[0,"keyboard","","",null,null],[4,"Key","nitro::input::keyboard","Definitions for keys on a keyboard.  Intended to be used with nitro::input::Input.",null,null],[13,"Unknown","","",20,null],[13,"A","","",20,null],[13,"B","","",20,null],[13,"C","","",20,null],[13,"D","","",20,null],[13,"E","","",20,null],[13,"F","","",20,null],[13,"G","","",20,null],[13,"H","","",20,null],[13,"I","","",20,null],[13,"J","","",20,null],[13,"K","","",20,null],[13,"L","","",20,null],[13,"M","","",20,null],[13,"N","","",20,null],[13,"O","","",20,null],[13,"P","","",20,null],[13,"Q","","",20,null],[13,"R","","",20,null],[13,"S","","",20,null],[13,"T","","",20,null],[13,"U","","",20,null],[13,"V","","",20,null],[13,"W","","",20,null],[13,"X","","",20,null],[13,"Y","","",20,null],[13,"Z","","",20,null],[13,"One","","",20,null],[13,"Two","","",20,null],[13,"Three","","",20,null],[13,"Four","","",20,null],[13,"Five","","",20,null],[13,"Six","","",20,null],[13,"Seven","","",20,null],[13,"Eight","","",20,null],[13,"Nine","","",20,null],[13,"Zero","","",20,null],[13,"Return","","",20,null],[13,"Escape","","",20,null],[13,"Backspace","","",20,null],[13,"Tab","","",20,null],[13,"Space","","",20,null],[13,"Minus","","",20,null],[13,"Equals","","",20,null],[13,"Leftbracket","","",20,null],[13,"Rightbracket","","",20,null],[13,"Backslash","","",20,null],[13,"Nonushash","","",20,null],[13,"Semicolon","","",20,null],[13,"Apostrophe","","",20,null],[13,"Grave","","",20,null],[13,"Comma","","",20,null],[13,"Period","","",20,null],[13,"Slash","","",20,null],[13,"Capslock","","",20,null],[13,"F1","","",20,null],[13,"F2","","",20,null],[13,"F3","","",20,null],[13,"F4","","",20,null],[13,"F5","","",20,null],[13,"F6","","",20,null],[13,"F7","","",20,null],[13,"F8","","",20,null],[13,"F9","","",20,null],[13,"F10","","",20,null],[13,"F11","","",20,null],[13,"F12","","",20,null],[13,"Printscreen","","",20,null],[13,"Scrolllock","","",20,null],[13,"Pause","","",20,null],[13,"Insert","","",20,null],[13,"Home","","",20,null],[13,"Pageup","","",20,null],[13,"Delete","","",20,null],[13,"End","","",20,null],[13,"Pagedown","","",20,null],[13,"Right","","",20,null],[13,"Left","","",20,null],[13,"Down","","",20,null],[13,"Up","","",20,null],[13,"Numlockclear","","",20,null],[13,"KpDivide","","",20,null],[13,"KpMultiply","","",20,null],[13,"KpMinus","","",20,null],[13,"KpPlus","","",20,null],[13,"KpEnter","","",20,null],[13,"Kp1","","",20,null],[13,"Kp2","","",20,null],[13,"Kp3","","",20,null],[13,"Kp4","","",20,null],[13,"Kp5","","",20,null],[13,"Kp6","","",20,null],[13,"Kp7","","",20,null],[13,"Kp8","","",20,null],[13,"Kp9","","",20,null],[13,"Kp0","","",20,null],[13,"KpPeriod","","",20,null],[13,"Nonusbackslash","","",20,null],[13,"Application","","",20,null],[13,"Power","","",20,null],[13,"KpEquals","","",20,null],[13,"F13","","",20,null],[13,"F14","","",20,null],[13,"F15","","",20,null],[13,"F16","","",20,null],[13,"F17","","",20,null],[13,"F18","","",20,null],[13,"F19","","",20,null],[13,"F20","","",20,null],[13,"F21","","",20,null],[13,"F22","","",20,null],[13,"F23","","",20,null],[13,"F24","","",20,null],[13,"Execute","","",20,null],[13,"Help","","",20,null],[13,"Menu","","",20,null],[13,"Select","","",20,null],[13,"Stop","","",20,null],[13,"Again","","",20,null],[13,"Undo","","",20,null],[13,"Cut","","",20,null],[13,"Copy","","",20,null],[13,"Paste","","",20,null],[13,"Find","","",20,null],[13,"Mute","","",20,null],[13,"Volumeup","","",20,null],[13,"Volumedown","","",20,null],[13,"KpComma","","",20,null],[13,"KpEqualsas400","","",20,null],[13,"International1","","",20,null],[13,"International2","","",20,null],[13,"International3","","",20,null],[13,"International4","","",20,null],[13,"International5","","",20,null],[13,"International6","","",20,null],[13,"International7","","",20,null],[13,"International8","","",20,null],[13,"International9","","",20,null],[13,"Lang1","","",20,null],[13,"Lang2","","",20,null],[13,"Lang3","","",20,null],[13,"Lang4","","",20,null],[13,"Lang5","","",20,null],[13,"Lang6","","",20,null],[13,"Lang7","","",20,null],[13,"Lang8","","",20,null],[13,"Lang9","","",20,null],[13,"Alterase","","",20,null],[13,"Sysreq","","",20,null],[13,"Cancel","","",20,null],[13,"Clear","","",20,null],[13,"Prior","","",20,null],[13,"Return2","","",20,null],[13,"Separator","","",20,null],[13,"Out","","",20,null],[13,"Oper","","",20,null],[13,"Clearagain","","",20,null],[13,"Crsel","","",20,null],[13,"Exsel","","",20,null],[13,"Kp00","","",20,null],[13,"Kp000","","",20,null],[13,"Thousandsseparator","","",20,null],[13,"Decimalseparator","","",20,null],[13,"Currencyunit","","",20,null],[13,"Currencysubunit","","",20,null],[13,"KpLeftparen","","",20,null],[13,"KpRightparen","","",20,null],[13,"KpLeftbrace","","",20,null],[13,"KpRightbrace","","",20,null],[13,"KpTab","","",20,null],[13,"KpBackspace","","",20,null],[13,"KpA","","",20,null],[13,"KpB","","",20,null],[13,"KpC","","",20,null],[13,"KpD","","",20,null],[13,"KpE","","",20,null],[13,"KpF","","",20,null],[13,"KpXor","","",20,null],[13,"KpPower","","",20,null],[13,"KpPercent","","",20,null],[13,"KpLess","","",20,null],[13,"KpGreater","","",20,null],[13,"KpAmpersand","","",20,null],[13,"KpDblampersand","","",20,null],[13,"KpVerticalbar","","",20,null],[13,"KpDblverticalbar","","",20,null],[13,"KpColon","","",20,null],[13,"KpHash","","",20,null],[13,"KpSpace","","",20,null],[13,"KpAt","","",20,null],[13,"KpExclam","","",20,null],[13,"KpMemstore","","",20,null],[13,"KpMemrecall","","",20,null],[13,"KpMemclear","","",20,null],[13,"KpMemadd","","",20,null],[13,"KpMemsubtract","","",20,null],[13,"KpMemmultiply","","",20,null],[13,"KpMemdivide","","",20,null],[13,"KpPlusminus","","",20,null],[13,"KpClear","","",20,null],[13,"KpClearentry","","",20,null],[13,"KpBinary","","",20,null],[13,"KpOctal","","",20,null],[13,"KpDecimal","","",20,null],[13,"KpHexadecimal","","",20,null],[13,"Lctrl","","",20,null],[13,"Lshift","","",20,null],[13,"Lalt","","",20,null],[13,"Lgui","","",20,null],[13,"Rctrl","","",20,null],[13,"Rshift","","",20,null],[13,"Ralt","","",20,null],[13,"Rgui","","",20,null],[13,"Mode","","",20,null],[13,"Audionext","","",20,null],[13,"Audioprev","","",20,null],[13,"Audiostop","","",20,null],[13,"Audioplay","","",20,null],[13,"Audiomute","","",20,null],[13,"Mediaselect","","",20,null],[13,"Www","","",20,null],[13,"Mail","","",20,null],[13,"Calculator","","",20,null],[13,"Computer","","",20,null],[13,"AcSearch","","",20,null],[13,"AcHome","","",20,null],[13,"AcBack","","",20,null],[13,"AcForward","","",20,null],[13,"AcStop","","",20,null],[13,"AcRefresh","","",20,null],[13,"AcBookmarks","","",20,null],[13,"Brightnessdown","","",20,null],[13,"Brightnessup","","",20,null],[13,"Displayswitch","","",20,null],[13,"Kbdillumtoggle","","",20,null],[13,"Kbdillumdown","","",20,null],[13,"Kbdillumup","","",20,null],[13,"Eject","","",20,null],[13,"Sleep","","",20,null],[13,"App1","","",20,null],[13,"App2","","",20,null],[0,"mouse","nitro::input","",null,null],[3,"Mouse","nitro::input::mouse","Used to get input from the player's mouse, access from nitro::App.input.mouse",null,null],[4,"MouseButton","","Definitions for mouse buttons.  Intended to be used with nitro::input::Input.",null,null],[13,"Unknown","","",21,null],[13,"Left","","",21,null],[13,"Right","","",21,null],[13,"Middle","","",21,null],[13,"X1","","",21,null],[13,"X2","","",21,null],[13,"Button6","","",21,null],[13,"Button7","","",21,null],[13,"Button8","","",21,null],[5,"new","","",null,{"inputs":[{"name":"mouseutil"}],"output":{"name":"mouse"}}],[5,"process_event","","",null,{"inputs":[{"name":"mouse"},{"name":"event"}],"output":null}],[11,"from","nitro","",3,{"inputs":[{"name":"option"}],"output":{"name":"optionloaned"}}],[11,"from","","",3,{"inputs":[{"name":"option"}],"output":{"name":"optionloaned"}}],[11,"from","","",3,{"inputs":[{"name":"option"}],"output":{"name":"optionloaned"}}],[11,"new","nitro::audio","Creates a new playlist with no tracks, and shuffle and loop_music set to false.",5,{"inputs":[],"output":{"name":"playlist"}}],[11,"start","","Start playing this playlist.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","Stops music playback",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next_track","","Advance to the next track in the playlist",5,{"inputs":[{"name":"self"}],"output":null}],[11,"play_track","","Returns err if track is not a valid index into self.tracks",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"current_track","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_track","","Adds a new track to the playlist.  The first track added will be track 0 the second track will be track 1, so on so forth.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"track_count","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"play_sound","","Plays a sound at a volume between 1.0 and 0.0",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f32"}],"output":{"name":"result"}}],[11,"play_sound_on_channel","","Play a sound on a user sound channel.",4,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_channel_volume","","Set the volume for a user sound channel. Volume is between 0.0 and 1.0",4,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"f32"}],"output":{"name":"result"}}],[11,"get_channel_volume","","Get the volume for a user sound channel. Volume is between 0.0 and 1.0",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"pause_channel","","Pause audio output on a user sound channel.",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"resume_channel","","Resume paused audio output on a user sound channel.",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"channel_idle","","Returns true if a channel is not playing anything. This will still return false if the channel has a sound to play but is paused.",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"new","nitro::graphics","",22,{"inputs":[{"name":"renderer"}],"output":{"name":"canvas"}}],[11,"draw_texture","","",22,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"option"},{"name":"option"},{"name":"f64"},{"name":"option"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"to_int_vec","nitro::math","",23,{"inputs":[{"name":"self"}],"output":{"name":"intvector"}}],[11,"right","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"up","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"from","","",12,{"inputs":[{"name":"vector"}],"output":{"name":"polarcoords"}}],[11,"from","","",23,{"inputs":[{"name":"polarcoords"}],"output":{"name":"vector"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"new","","",13,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"rect"}}],[11,"x","","",13,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"y","","",13,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"width","","",13,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"height","","",13,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"intrect"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"intrect"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"intrect"}}],[11,"x","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"y","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"width","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from","","",14,{"inputs":[{"name":"sdlrect"}],"output":{"name":"intrect"}}],[11,"to_vec","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"clone","nitro::input","",26,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"new","","",26,{"inputs":[{"name":"button"},{"name":"button"}],"output":{"name":"axis"}}],[11,"get_value","","",26,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"f32"}}],[11,"load_bindings","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"save_bindings","","",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"add_axis","","",18,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"i32"}],"output":null}],[11,"get_axis_value","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"add_action","","",18,{"inputs":[{"name":"self"},{"name":"button"},{"name":"i32"}],"output":null}],[11,"action_pressed","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"action_down","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"action_released","","",18,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"is_button_pressed","","",18,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"is_button_down","","",18,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"is_button_released","","",18,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"eq","nitro::input::keyboard","",20,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",20,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","nitro::input::mouse","",21,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",21,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",21,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"pos","","",27,{"inputs":[{"name":"self"}],"output":{"name":"intvector"}}],[11,"set_show_cursor","","",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"eq","nitro::input","",19,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"App"],[3,"GameObject"],[3,"Camera"],[4,"OptionLoaned"],[3,"Audio"],[3,"Playlist"],[4,"Message"],[8,"Component"],[8,"ComponentAny"],[3,"Texture"],[3,"SpriteSheet"],[4,"Sprite"],[3,"PolarCoords"],[3,"Rect"],[3,"IntRect"],[8,"VecConvert"],[8,"TransformDirections"],[8,"IntVecConvert"],[3,"Input"],[4,"Button"],[4,"Key"],[4,"MouseButton"],[3,"Canvas"],[6,"Vector"],[6,"Transform"],[6,"IntVector"],[3,"Axis"],[3,"Mouse"]]};
searchIndex["nphysics2d"] = {"doc":"nphysics ======== **nphysics** is a 2 and 3-dimensional physics engine for games and animations. It uses ncollide for collision detection, and nalgebra for vector/matrix math. 2D and 3D implementations both share the same code!","items":[[0,"aliases","nphysics2d","Aliases for complicated parameterized types.",null,null],[6,"DefaultBroadPhase","nphysics2d::aliases","The type of the broad phase used by the world by default.",null,null],[0,"integration","nphysics2d","Position and orientation update of rigid bodies.",null,null],[3,"BodyExpEulerIntegrator","nphysics2d::integration","An explicit Euler integrator.",null,null],[3,"BodySmpEulerIntegrator","","A semi-implicit Euler integrator.",null,null],[3,"BodyForceGenerator","","A constant linear and angular force generator.",null,null],[3,"BodyDamping","","A linear and angular velocity damper.",null,null],[3,"TranslationalCCDMotionClamping","","Handles Continuous Collision Detection.",null,null],[0,"integrator","","Trait implemented by every integrators.",null,null],[8,"Integrator","nphysics2d::integration::integrator","Trait implemented by every integrator.",null,null],[10,"update","","Updates the position and orientation of the object `o` after a time step of `dt`.",0,{"inputs":[{"name":"self"},{"name":"n"},{"name":"o"}],"output":null}],[11,"new","nphysics2d::integration","Creates a new `BodyExpEulerIntegrator`.",1,{"inputs":[],"output":{"name":"bodyexpeulerintegrator"}}],[11,"update","","",1,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `BodySmpEulerIntegrator`.",2,{"inputs":[],"output":{"name":"bodysmpeulerintegrator"}}],[11,"update","","",2,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `BodyForceGenerator`.",3,{"inputs":[{"name":"vector"},{"name":"orientation"}],"output":{"name":"bodyforcegenerator"}}],[11,"lin_acc","","The linear acceleration applied by this force generator.",3,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"set_lin_acc","","Sets the linear acceleration applied by this force generator.",3,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"ang_acc","","The angular acceleration applied by this force generator.",3,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"set_ang_acc","","Sets the angular acceleration applied by this force generator.",3,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[11,"update","","",3,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `BodyDamping`.",4,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"bodydamping"}}],[11,"update","","",4,{"inputs":[{"name":"self"},{"name":"n"},{"name":"rigidbody"}],"output":null}],[11,"new","","Creates a new `TranslationalCCDMotionClamping` to enable continuous collision detection to fast-moving rigid bodies.",5,{"inputs":[],"output":{"name":"translationalccdmotionclamping"}}],[11,"add_ccd_to","","Enables continuous collision for the given rigid body.",5,{"inputs":[{"name":"self"},{"name":"rigidbodyhandle"},{"name":"n"},{"name":"bool"}],"output":null}],[11,"remove_ccd_from","","Enables continuous collision for the given rigid body.",5,{"inputs":[{"name":"self"},{"name":"rigidbodyhandle"}],"output":null}],[11,"update","","Update the time of impacts and apply motion clamping when necessary.",5,{"inputs":[{"name":"self"},{"name":"rigidbodycollisionworld"}],"output":{"name":"bool"}}],[0,"euler","","Euler integration functions.",null,null],[5,"explicit_integrate","nphysics2d::integration::euler","Explicit Euler integrator.",null,null],[5,"explicit_integrate_wo_rotation","","Explicit Euler integrator. This will not update the rotational components.",null,null],[5,"semi_implicit_integrate","","Semi-implicit Euler integrator.",null,null],[5,"semi_implicit_integrate_wo_rotation","","Semi-implicit Euler integrator. This will not update the rotational components.",null,null],[5,"displacement","","Computes the transformation matrix required to move an object with a `lin_vel` linear velocity, a `ang_vil` angular velocity, and a center of mass `center_of_mass`, during the time step `dt`.",null,{"inputs":[{"name":"n"},{"name":"isometry"},{"name":"point"},{"name":"vector"},{"name":"orientation"}],"output":{"name":"isometry"}}],[0,"detection","nphysics2d","Collision detection and joints.",null,null],[3,"ActivationManager","nphysics2d::detection","Structure that monitors island-based activation/deactivation of objects.",null,null],[0,"constraint","","Data structure to describe a constraint between two rigid bodies.",null,null],[4,"Constraint","nphysics2d::detection::constraint","A constraint between two rigid bodies.",null,null],[13,"RBRB","","A contact.",6,null],[13,"BallInSocket","","A ball-in-socket joint.",6,null],[13,"Fixed","","A fixed joint.",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"constraint"}}],[0,"detector","nphysics2d::detection","Collision detector.",null,null],[8,"Detector","nphysics2d::detection::detector","Trait implemented by collision detectors.",null,null],[10,"update","","Updates the collision detector, given an (already updated) broad-phase, and an activation manager.",7,{"inputs":[{"name":"self"},{"name":"bf"},{"name":"activationmanager"}],"output":null}],[10,"interferences","","Collects every interferences detected by this collision detector.",7,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"bf"}],"output":null}],[0,"joint","nphysics2d::detection","Joint handling.",null,null],[3,"Anchor","nphysics2d::detection::joint","One of the two end points of a joint.",null,null],[12,"body","","The body attached to this anchor.",8,null],[12,"position","","The attach position, in local coordinates of the attached body.",8,null],[3,"BallInSocket","","A ball-in-socket joint.",null,null],[3,"Fixed","","A joint that prevents any relative movement (linear and angular) between two objects.",null,null],[3,"JointManager","","Structure that handles creation and removal of joints.",null,null],[11,"new","","Creates a new `JointManager`.",9,{"inputs":[],"output":{"name":"jointmanager"}}],[11,"joints","","Joints handled by this manager.",9,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"joints_with_body","","List of joints attached to a specific body.",9,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"option"}}],[11,"add_ball_in_socket","","Add a `BallInSocket` joint to this manager.",9,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"remove_ball_in_socket","","Removes a `BallInSocket` joint from this manager.",9,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"add_fixed","","Add a `Fixed` joint to this manager.",9,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"remove_joint","","Removes a joint from this manager.",9,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"remove","","Removes every joint attached to a given rigid body.",9,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"activationmanager"}],"output":null}],[11,"update","","Activates the objects that interact with an activated object through a joint.",9,{"inputs":[{"name":"self"},{"name":"activationmanager"}],"output":null}],[11,"constraints","","Collects all the constraints caused by joints.",9,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"new","","Creates a new `Anchor` at a given `position` on a `body` local space.",8,{"inputs":[{"name":"option"},{"name":"p"}],"output":{"name":"anchor"}}],[11,"center_of_mass","","The center of mass of the body attached to this anchor.",8,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"new","","Creates a ball-in-socket joint.",10,{"inputs":[{"name":"anchor"},{"name":"anchor"}],"output":{"name":"ballinsocket"}}],[11,"up_to_date","","Tells if this joint has been modified by the user.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_local1","","Sets the the second anchor position.",10,{"inputs":[{"name":"self"},{"name":"point"}],"output":null}],[11,"set_local2","","Sets the the second anchor position.",10,{"inputs":[{"name":"self"},{"name":"point"}],"output":null}],[11,"anchor1","","The first anchor affected by this joint.",10,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"anchor2","","The second anchor affected by this joint.",10,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"anchor1_pos","","The first attach point in global coordinates.",10,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"anchor2_pos","","The second attach point in global coordinates.",10,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"new","","Creates a new `Fixed` joint.",11,{"inputs":[{"name":"anchor"},{"name":"anchor"}],"output":{"name":"fixed"}}],[11,"up_to_date","","Tells if the joint has been modified by the user.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_local1","","Sets the the second anchor position.",11,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"set_local2","","Sets the the second anchor position.",11,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"anchor1","","The first anchor affected by this joint.",11,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"anchor2","","The second anchor affected by this joint.",11,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"anchor1_pos","","The first attach point in global coordinates.",11,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"anchor2_pos","","The second attach point in global coordinates.",11,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[0,"joint","","",null,null],[8,"Joint","nphysics2d::detection::joint::joint","Trait implemented by every joint.",null,null],[10,"anchor1","","The first anchor affected by this joint.",12,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[10,"anchor2","","The second anchor affected by this joint.",12,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[10,"anchor1_pos","","The first attach point in global coordinates.",12,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[10,"anchor2_pos","","The second attach point in global coordinates.",12,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"new","nphysics2d::detection","Creates a new `ActivationManager`.",13,{"inputs":[{"name":"n"}],"output":{"name":"activationmanager"}}],[11,"deferred_activate","","Notify the `ActivationManager` that is has to activate an object at the next update.",13,{"inputs":[{"name":"self"},{"name":"rigidbodyhandle"}],"output":null}],[11,"update","","Update the activation manager, activating and deactivating objects when needed.",13,{"inputs":[{"name":"self"},{"name":"rigidbodycollisionworld"},{"name":"jointmanager"},{"name":"hashmap"}],"output":null}],[0,"resolution","nphysics2d","Constraint resolution.",null,null],[3,"AccumulatedImpulseSolver","nphysics2d::resolution","Constraint solver using the projected gauss seidel algorithm and warm-starting.",null,null],[3,"Velocities","","Structure holding the result of the projected gauss seidel solver.",null,null],[12,"lv","","Linear velocity.",14,null],[12,"av","","Angular velocity.",14,null],[3,"ImpulseCache","","",null,null],[3,"ContactIdentifier","","The identifier of a contact stored in the impulse cache.",null,null],[3,"VelocityConstraint","","A constraint of velocity at a point of contact.",null,null],[12,"normal","","The contact normal.",15,null],[12,"weighted_normal1","","The contact normal multiplied by the first body's inverse mass.",15,null],[12,"weighted_normal2","","The contact normal multiplied by the second body's inverse mass.",15,null],[12,"rot_axis1","","The first body rotation axis.",15,null],[12,"weighted_rot_axis1","","The first body rotation axis multiplied by its inverse inertia.",15,null],[12,"rot_axis2","","The second body rotation axis.",15,null],[12,"weighted_rot_axis2","","The second body rotation axis multiplied by its inverse inertia.",15,null],[12,"inv_projected_mass","","The inverse of the sum of linear and angular inertia of both bodies.",15,null],[12,"impulse","","The total impulse applied.",15,null],[12,"lobound","","The lower bound of the impulse.",15,null],[12,"hibound","","The upper bound of the impulse.",15,null],[12,"objective","","The target delta velocity.",15,null],[12,"id1","","The id of the first body.",15,null],[12,"id2","","The id of the second body.",15,null],[12,"friction_limit_id","","The id of the friction constraint.",15,null],[12,"friction_coeff","","The friction coefficient on this contact.",15,null],[4,"CorrectionMode","","The correction coefficient used by the constraint solver.",null,null],[13,"Velocity","","Penetration are solved by the penalty method.",16,null],[13,"VelocityAndPosition","","Penetration are solved by the penalty method together with a hard repositioning.",16,null],[13,"VelocityAndPositionThresold","","Penetration are solved by the penalty method together with a hard repositioning.",16,null],[5,"projected_gauss_seidel_solve","","Solve a set of velocity constraints using the projected gauss seidel solver.",null,null],[0,"solver","","",null,null],[8,"Solver","nphysics2d::resolution::solver","Trait implemented by constraint solvers.",null,null],[10,"solve","","Solve the set of constraints of type `I`.",17,null],[11,"eq","nphysics2d::resolution","",18,{"inputs":[{"name":"self"},{"name":"contactidentifier"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"contactidentifier"}],"output":{"name":"bool"}}],[11,"hash","","",18,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","",18,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"point"},{"name":"n"}],"output":{"name":"contactidentifier"}}],[11,"new","","",19,{"inputs":[{"name":"n"},{"name":"usize"}],"output":{"name":"impulsecache"}}],[11,"insert","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"point"}],"output":null}],[11,"hash","","",19,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"hash_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"push_impulsions","","",19,null],[11,"reserved_impulse_offset","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"impulsions_at","","",19,null],[11,"len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"swap","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `AccumulatedImpulseSolver`.",20,{"inputs":[{"name":"n"},{"name":"correctionmode"},{"name":"n"},{"name":"n"},{"name":"usize"},{"name":"usize"}],"output":{"name":"accumulatedimpulsesolver"}}],[11,"num_first_order_iter","","Gets the number of iteration done by the penetration depth correction solver.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_num_first_order_iter","","Sets the number of iteration done by the penetration depth correction solver.",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"num_second_order_iter","","Gets the number of iteration done by the velocity constraint solver.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_num_second_order_iter","","Sets the number of iteration done by the velocity constraint solver.",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"solve","","",20,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"velocities"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"velocities"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"velocities"}}],[11,"new","","Creates a new `Velocities`.",14,{"inputs":[],"output":{"name":"velocities"}}],[11,"reset","","Reset this structure to zero.",14,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"velocityconstraint"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"velocityconstraint"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"velocityconstraint"}}],[11,"new","","Creates a new velocity constraint with all terms initialized to zero.",15,{"inputs":[],"output":{"name":"velocityconstraint"}}],[11,"vel_corr_factor","","The velocity correction coefficient.",16,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"pos_corr_factor","","The position correction coefficient.",16,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"min_depth_for_pos_corr","","The minimum penetration depth required to switch on the hard repositioning based method.",16,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"max_depth_for_vel_corr","","The max penetration depth the velocity correction will attempt to correct.",16,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[0,"world","nphysics2d","The physics world.",null,null],[3,"World","nphysics2d::world","The physical world.",null,null],[11,"new","","Creates a new physics world.",21,{"inputs":[],"output":{"name":"world"}}],[11,"step","","Updates the physics world.",21,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"add_rigid_body","","Adds a rigid body to the physics world.",21,{"inputs":[{"name":"self"},{"name":"rigidbody"}],"output":{"name":"rigidbodyhandle"}}],[11,"add_sensor","","Adds a sensor to the physics world.",21,{"inputs":[{"name":"self"},{"name":"sensor"}],"output":{"name":"sensorhandle"}}],[11,"remove_rigid_body","","Remove a rigid body from the physics world.",21,{"inputs":[{"name":"self"},{"name":"rigidbodyhandle"}],"output":null}],[11,"remove_sensor","","Remove a sensor from the physics world.",21,{"inputs":[{"name":"self"},{"name":"sensorhandle"}],"output":null}],[11,"forces_generator","","Gets a mutable reference to the force generator.",21,{"inputs":[{"name":"self"}],"output":{"name":"bodyforcegenerator"}}],[11,"integrator","","Gets a mutable reference to the position and orientation integrator.",21,{"inputs":[{"name":"self"}],"output":{"name":"bodysmpeulerintegrator"}}],[11,"ccd_manager","","Gets a mutable reference to the CCD manager.",21,{"inputs":[{"name":"self"}],"output":{"name":"translationalccdmotionclamping"}}],[11,"joint_manager","","Gets a mutable reference to the joint manager.",21,{"inputs":[{"name":"self"}],"output":{"name":"jointmanager"}}],[11,"constraints_solver","","Gets a mutable reference to the constraint solver.",21,{"inputs":[{"name":"self"}],"output":{"name":"accumulatedimpulsesolver"}}],[11,"collision_world","","Gets the underlying collision world.",21,{"inputs":[{"name":"self"}],"output":{"name":"rigidbodycollisionworld"}}],[11,"set_gravity","","Sets the linear acceleration afecting every dynamic rigid body.",21,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"gravity","","Gets the linear acceleration afecting every dynamic rigid body.",21,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"add_ccd_to","","Adds continuous collision detection to the given rigid body.",21,{"inputs":[{"name":"self"},{"name":"rigidbodyhandle"},{"name":"n"},{"name":"bool"}],"output":null}],[11,"add_ball_in_socket","","Adds a ball-in-socket joint to the world.",21,{"inputs":[{"name":"self"},{"name":"ballinsocket"}],"output":{"name":"rc"}}],[11,"remove_ball_in_socket","","Removes a ball-in-socket joint from the world.",21,{"inputs":[{"name":"self"},{"name":"rc"}],"output":null}],[11,"add_fixed","","Adds a fixed joint to the world.",21,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"rc"}}],[11,"remove_fixed","","Removes a fixed joint from the world.",21,{"inputs":[{"name":"self"},{"name":"rc"}],"output":null}],[11,"constraints","","Collects every constraincts detected since the last update.",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"rigid_bodies","","An iterator visiting all rigid bodies on this world.",21,{"inputs":[{"name":"self"}],"output":{"name":"rigidbodies"}}],[11,"sensors","","An iterator visiting all sensors on this world.",21,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"register_broad_phase_pair_filter","","Adds a filter that tells if a potential collision pair should be ignored or not.",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"unregister_broad_phase_pair_filter","","Removes the pair filter named `name`.",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"register_contact_handler","","Registers a handler for contact start/stop events.",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"h"}],"output":null}],[11,"unregister_contact_handler","","Unregisters a handler for contact start/stop events.",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"register_proximity_handler","","Registers a handler for proximity status change events.",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"h"}],"output":null}],[11,"unregister_proximity_handler","","Unregisters a handler for proximity status change events.",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[6,"WorldBroadPhase","","The default broad phase.",null,null],[6,"RigidBodies","","An iterator visiting rigid bodies.",null,null],[6,"RigidBodyCollisionWorld","","Type of the collision world containing rigid bodies.",null,null],[6,"WorldCollisionObject","","Type of a collision object containing `WorldObject` body as its data.",null,null],[0,"object","nphysics2d","Objects that may be added to the physical world.",null,null],[3,"RigidBody","nphysics2d::object","The rigid body structure.",null,null],[3,"Sensor","","An object capable of detecting interferances with other entities without interacting with them.",null,null],[3,"RigidBodyCollisionGroups","","Groups of collision used to filter which object collide with which other one. nphysics use a specific group for its own purposes (i.e. the group of static objects). The `group 29` is reserved and you cannot use it.",null,null],[3,"SensorCollisionGroups","","Groups of collision used to filter which object collide with which other one. nphysics use a specific group for its own purposes (i.e. the group of static objects). The `group 29` is reserved and you cannot use it.",null,null],[4,"ActivationState","","The activation state of a rigid body.",null,null],[13,"Active","","The rigid body is active with a not-zero energy.",22,null],[13,"Inactive","","The rigid body is inactive.",22,null],[13,"Deleted","","The rigid body has been removed from the physics engine.",22,null],[4,"RigidBodyState","","The movement state of a rigid body.",null,null],[13,"Static","","The rigid body cannot move.",23,null],[13,"Dynamic","","The rigid body can move.",23,null],[4,"WorldObject","","An object that has been added to a World.",null,null],[13,"RigidBody","","A rigid body handle.",24,null],[13,"Sensor","","A sensor handle.",24,null],[4,"WorldObjectBorrowed","","Reference to a world object.",null,null],[13,"RigidBody","","A borrowed rigid body handle.",25,null],[13,"Sensor","","A borrowed sensor handle.",25,null],[4,"WorldObjectBorrowedMut","","Mutable reference to a world object.",null,null],[13,"RigidBody","","A mutably borrowed rigid body handle.",26,null],[13,"Sensor","","A mutably borrowed sensor handle.",26,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"rigidbodystate"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"rigidbodystate"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"activationstate"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"activationstate"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"activationstate"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__sn"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"energy","","The energy accumulated other several frames.",22,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"clone","","Clones this rigid body but not its associated user-data.",27,{"inputs":[{"name":"self"}],"output":{"name":"rigidbody"}}],[11,"position","","Gets a reference to this body's transform.",27,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"position_center","","The center given by this object's position. May not be the same as its center of mass.",27,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"shape","","A reference to this body's shape handle.",27,{"inputs":[{"name":"self"}],"output":{"name":"shapehandle"}}],[11,"margin","","The margin surrounding this object's shape.",27,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"set_margin","","Sets the margin surrounding this object's shape.",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"center_of_mass","","Gets a reference to this body's center of mass.",27,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"mass","","Gets this body's mass, if it has one.",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"restitution","","Gets this body's restitution coefficent.",27,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"friction","","Gets this body's friction coefficient.",27,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"is_active","","Indicates whether or not this rigid body is active.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deactivation_threshold","","The velocity threshold bellow whith the rigid body might be deactivated.",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_deactivation_threshold","","Set the velocity threshold bellow whith the rigid body might be deactivated.",27,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"new_dynamic","","Creates a new rigid body that can move.",27,{"inputs":[{"name":"g"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rigidbody"}}],[11,"new_static","","Creates a new rigid body that cannot move.",27,{"inputs":[{"name":"g"},{"name":"n"},{"name":"n"}],"output":{"name":"rigidbody"}}],[11,"new","","Creates a new rigid body with a given shape.",27,{"inputs":[{"name":"shapehandle"},{"name":"option"},{"name":"n"},{"name":"n"}],"output":{"name":"rigidbody"}}],[11,"can_move","","Indicates whether this rigid body is static or dynamic.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"lin_acc_scale","","Gets the linear acceleraction scale of this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"set_lin_acc_scale","","Sets the linear acceleration scale of this rigid body.",27,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"ang_acc_scale","","Gets the angular acceleration scale of this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"set_ang_acc_scale","","Sets the angular acceleration scale of this rigid body.",27,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[11,"lin_vel","","Get the linear velocity of this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"set_lin_vel","","Sets the linear velocity of this rigid body.",27,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"lin_acc","","Gets the linear acceleration of this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"vector"}}],[11,"ang_vel","","Gets the angular velocity of this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"set_ang_vel","","Sets the angular velocity of this rigid body.",27,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[11,"ang_acc","","Gets the angular acceleration of this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"clear_forces","","Resets linear and angular force.",27,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_linear_force","","Resets linear force.",27,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_angular_force","","Resets angular force.",27,{"inputs":[{"name":"self"}],"output":null}],[11,"append_lin_force","","Adds an additional linear force.",27,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"append_ang_force","","Adds an additional angular force.",27,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[11,"append_force_wrt_point","","Adds an additional force acting at a point different to the center of mass.",27,{"inputs":[{"name":"self"},{"name":"vector"},{"name":"vector"}],"output":null}],[11,"wake_up","","Forces the body to respond to any impulses before the next tick.",27,{"inputs":[{"name":"self"}],"output":null}],[11,"apply_central_impulse","","Applies a one-time central impulse.",27,{"inputs":[{"name":"self"},{"name":"vector"}],"output":null}],[11,"apply_angular_momentum","","Applies a one-time angular impulse.",27,{"inputs":[{"name":"self"},{"name":"orientation"}],"output":null}],[11,"apply_impulse_wrt_point","","Applies a one-time impulse to a point relative to the center of mass.",27,{"inputs":[{"name":"self"},{"name":"vector"},{"name":"vector"}],"output":null}],[11,"inv_mass","","Gets the inverse mass of this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"set_inv_mass","","Sets the inverse mass of this rigid body.",27,{"inputs":[{"name":"self"},{"name":"n"}],"output":null}],[11,"inv_inertia","","Gets the inverse inertia tensor of this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"angularinertia"}}],[11,"set_inv_inertia","","Sets the inverse inertia tensor of this rigid body.",27,{"inputs":[{"name":"self"},{"name":"angularinertia"}],"output":null}],[11,"append_transformation","","Appends a transformation to this rigid body.",27,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"prepend_transformation","","Prepends a transformation to this rigid body.",27,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"set_transformation","","Sets the transformation of this rigid body.",27,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"append_translation","","Appends a translation to this rigid body.",27,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"prepend_translation","","Prepends a translation to this rigid body.",27,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"set_translation","","Stes the translation of this rigid body.",27,{"inputs":[{"name":"self"},{"name":"translation"}],"output":null}],[11,"append_rotation","","Appends a rotation to this rigid body.",27,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"prepend_rotation","","Prepends a rotation to this rigid body.",27,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"set_rotation","","Sets the rotation of this rigid body.",27,{"inputs":[{"name":"self"},{"name":"rotation"}],"output":null}],[11,"collision_groups","","Reference to the collision groups of this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"rigidbodycollisiongroups"}}],[11,"set_collision_groups","","Set the new collisions groups of this rigid body.",27,{"inputs":[{"name":"self"},{"name":"rigidbodycollisiongroups"}],"output":null}],[11,"user_data","","Reference to user-defined data attached to this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"user_data_mut","","Mutable reference to user-defined data attached to this rigid body.",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_user_data","","Attach some user-defined data to this rigid body and return the old one.",27,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"bounding_volume","","",27,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"boundingsphere"}}],[11,"bounding_volume","","",27,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"aabb"}}],[11,"new","","Creates a new sensor.",28,{"inputs":[{"name":"g"},{"name":"option"}],"output":{"name":"sensor"}}],[11,"new_with_shared_shape","","Creates a new senson with a given shared shape.",28,{"inputs":[{"name":"shapehandle"},{"name":"option"}],"output":{"name":"sensor"}}],[11,"user_data","","Reference to user-defined data attached to this sensor.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"user_data_mut","","Mutable reference to user-defined data attached to this sensor.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_user_data","","Attach some user-defined data to this sensor and return the old one.",28,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"interfering_bodies","","List of rigid bodies geometrically intersecting this sensor.",28,null],[11,"interfering_sensors","","List of sensors geometrically intersecting this sensor.",28,null],[11,"relative_position","","This sensor's position relative to `self.parent()`.",28,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"set_relative_position","","Sets the sensor position relative to `self.parent()`.",28,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"position","","This sensor's absolute position.",28,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"set_position","","Sets the sensor absolute position.",28,{"inputs":[{"name":"self"},{"name":"isometry"}],"output":null}],[11,"center","","This sensor position's translational component.",28,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"margin","","The collision margin of this sensor's shape.",28,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"proximity_with_parent_enabled","","Whether or not proximity detection between this sensor and its parent is enabled.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_proximity_with_parent","","Enables proximity detection between this sensor and its parent if it has one.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_proximity_with_parent","","Disables proximity detection between this sensor and its parent if it has one.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"parent","","The rigid body to which this sensor is kinematically attached.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"shape","","A reference of this sensor's shared shape.",28,{"inputs":[{"name":"self"}],"output":{"name":"shapehandle"}}],[11,"collision_groups","","This sensor's collision groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"sensorcollisiongroups"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"worldobject"}}],[11,"rigid_body_uid","","The unique identifier a rigid body would have if it was wrapped on a `WorldObject`.",24,{"inputs":[{"name":"rigidbodyhandle"}],"output":{"name":"usize"}}],[11,"sensor_uid","","The unique identifier a sensor would have if it was wrapped on a `WorldObject`.",24,{"inputs":[{"name":"sensorhandle"}],"output":{"name":"usize"}}],[11,"is_rigid_body","","Whether or not this is a rigid body.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sensor","","Whether or not this is a sensor.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap_sensor","","Unwraps this object as a sensor or fails.",24,{"inputs":[{"name":"self"}],"output":{"name":"sensorhandle"}}],[11,"unwrap_rigid_body","","Unwraps this object as a rigid body or fails.",24,{"inputs":[{"name":"self"}],"output":{"name":"rigidbodyhandle"}}],[11,"uid","","Returns a unique id for this world object.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"borrow","","Borrows this world object.",24,{"inputs":[{"name":"self"}],"output":{"name":"worldobjectborrowed"}}],[11,"borrow_sensor","","Borrows this world object as a sensor.",24,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"borrow_rigid_body","","Borrows this world object as a rigid body.",24,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows this world object.",24,{"inputs":[{"name":"self"}],"output":{"name":"worldobjectborrowedmut"}}],[11,"borrow_mut_sensor","","Mutably borrows this world object as a sensor.",24,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"borrow_mut_rigid_body","","Mutably borrows this world object as a rigid body.",24,{"inputs":[{"name":"self"}],"output":{"name":"refmut"}}],[11,"position","","This object's position.",25,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"shape","","A reference to this object geometrical shape.",25,{"inputs":[{"name":"self"}],"output":{"name":"shapehandle"}}],[11,"margin","","This object margin.",25,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"is_rigid_body","","Whether or not this is a rigid body.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sensor","","Whether or not this is a sensor.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"position","","This object's position.",26,{"inputs":[{"name":"self"}],"output":{"name":"isometry"}}],[11,"shape","","A reference to this object geometrical shape.",26,{"inputs":[{"name":"self"}],"output":{"name":"shapehandle"}}],[11,"margin","","This object margin.",26,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"is_rigid_body","","Whether or not this is a rigid body.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_sensor","","Whether or not this is a sensor.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"rigidbodycollisiongroups"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_dynamic","","Creates a new `RigidBodyCollisionGroups` that enables collisions with everything except self-collision.",29,{"inputs":[],"output":{"name":"rigidbodycollisiongroups"}}],[11,"new_static","","Creates a new `RigidBodyCollisionGroups` that enables collisions with every user-defined groups. Static objects and sensors are blacklisted by default and self-collision disabled.",29,{"inputs":[],"output":{"name":"rigidbodycollisiongroups"}}],[11,"is_dynamic","","Returns `true` if this object is not part of the static group.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_static","","Returns `true` if this object is part of the static group.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"max_group_id","","The maximum allowed group identifier.",29,{"inputs":[],"output":{"name":"usize"}}],[11,"as_collision_groups","","Return the internal, ncollide-compatible, `CollisionGroups`",29,{"inputs":[{"name":"self"}],"output":{"name":"collisiongroups"}}],[11,"modify_membership","","Adds or removes this entity from the given group.",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"modify_whitelist","","Adds or removes the given group from this entity whitelist.",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"modify_blacklist","","Adds or removes this entity from the given group.",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_membership","","Make this object member of the given groups only.",29,null],[11,"set_whitelist","","Whitelists the given groups only (others will be un-whitelisted).",29,null],[11,"set_blacklist","","Blacklists the given groups only (others will be un-blacklisted).",29,null],[11,"copy_membership","","Copies the membership of another collision groups.",29,{"inputs":[{"name":"self"},{"name":"rigidbodycollisiongroups"}],"output":null}],[11,"copy_whitelist","","Copies the whitelist of another collision groups.",29,{"inputs":[{"name":"self"},{"name":"rigidbodycollisiongroups"}],"output":null}],[11,"copy_blacklist","","Copies the blacklist of another collision groups.",29,{"inputs":[{"name":"self"},{"name":"rigidbodycollisiongroups"}],"output":null}],[11,"enable_interaction_with_static","","Un-blacklists static objects.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_interaction_with_static","","Blacklists any static object.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"enable_interaction_with_sensors","","Un-blacklists sensors.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_interaction_with_sensors","","Blacklists sensors.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"enable_self_interaction","","Enables self interaction detection.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_self_interaction","","Disables self interaction detection.",29,{"inputs":[{"name":"self"}],"output":null}],[11,"is_member_of","","Tests if this entity is part of the given group.",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_group_whitelisted","","Tests if the given group is whitelisted.",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_group_blacklisted","","Tests if the given group is blacklisted.",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"can_interact_with","","Tests whether collisions with a given group is possible.",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"can_interact_with_groups","","Tests whether two collision groups have at least one group in common.",29,{"inputs":[{"name":"self"},{"name":"collisiongroups"}],"output":{"name":"bool"}}],[11,"can_interact_with_self","","Tests whether self-collision is enabled.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sensorcollisiongroups"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `SensorCollisionGroups` that enables collisions with every user-defined groups. Static objects and sensors are blacklisted by default and self-collision is disabled.",30,{"inputs":[],"output":{"name":"sensorcollisiongroups"}}],[11,"max_group_id","","The maximum allowed group identifier.",30,{"inputs":[],"output":{"name":"usize"}}],[11,"as_collision_groups","","Return the internal, ncollide-compatible, `CollisionGroups`",30,{"inputs":[{"name":"self"}],"output":{"name":"collisiongroups"}}],[11,"modify_membership","","Adds or removes this entity from the given group.",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"modify_whitelist","","Adds or removes the given group from this entity whitelist.",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"modify_blacklist","","Adds or removes this entity from the given group.",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_membership","","Make this object member of the given groups only.",30,null],[11,"set_whitelist","","Whitelists the given groups only (others will be un-whitelisted).",30,null],[11,"set_blacklist","","Blacklists the given groups only (others will be un-blacklisted).",30,null],[11,"copy_membership","","Copies the membership of another collision groups.",30,{"inputs":[{"name":"self"},{"name":"sensorcollisiongroups"}],"output":null}],[11,"copy_whitelist","","Copies the whitelist of another collision groups.",30,{"inputs":[{"name":"self"},{"name":"sensorcollisiongroups"}],"output":null}],[11,"copy_blacklist","","Copies the blacklist of another collision groups.",30,{"inputs":[{"name":"self"},{"name":"sensorcollisiongroups"}],"output":null}],[11,"enable_interaction_with_static","","Un-blacklists static objects.",30,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_interaction_with_static","","Blacklists any static object.",30,{"inputs":[{"name":"self"}],"output":null}],[11,"enable_interaction_with_sensors","","Un-blacklists sensors.",30,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_interaction_with_sensors","","Blacklists sensors.",30,{"inputs":[{"name":"self"}],"output":null}],[11,"enable_self_interaction","","Enables self interaction detection.",30,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_self_interaction","","Disables self interaction detection.",30,{"inputs":[{"name":"self"}],"output":null}],[11,"is_member_of","","Tests if this entity is part of the given group.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_group_whitelisted","","Tests if the given group is whitelisted.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_group_blacklisted","","Tests if the given group is blacklisted.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"can_interact_with","","Tests whether collisions with a given group is possible.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"can_interact_with_groups","","Tests whether two collision groups have at least one group in common.",30,{"inputs":[{"name":"self"},{"name":"collisiongroups"}],"output":{"name":"bool"}}],[11,"can_interact_with_self","","Tests whether self-collision is enabled.",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"RigidBodyHandle","","A shared, mutable, rigid body.",null,null],[6,"SensorHandle","","A shared, mutable, sensor.",null,null],[17,"STATIC_GROUP_ID","","Reserved group id for static rigid bodies.",null,null],[17,"SENSOR_GROUP_ID","","Reserved group id for sensors.",null,null],[0,"utils","nphysics2d","Miscellaneous utilities.",null,null],[3,"DeterministicState","nphysics2d::utils","A hasher builder that creates `DefaultHasher` with default keys.",null,null],[0,"union_find","","The union find algorithm.",null,null],[3,"UnionFindSet","nphysics2d::utils::union_find","An element used by the union-find algorithm.",null,null],[5,"find","","Performs the `find` part of the union-find algorithm.",null,null],[5,"union","","Performs the `union` part of the union-find algorithm.",null,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"unionfindset"}}],[11,"new","","Creates a new `UnionFindSet`.",31,{"inputs":[{"name":"usize"}],"output":{"name":"unionfindset"}}],[11,"reinit","","Reinitialize this set.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"new","nphysics2d::utils","Creates a new `DeterministicState` that builds `DefaultHasher` with default keys.",32,{"inputs":[],"output":{"name":"deterministicstate"}}],[11,"build_hasher","","",32,{"inputs":[{"name":"self"}],"output":{"name":"defaulthasher"}}],[8,"GeneralizedCross","","This is a non-standard generalization of the cross product design exclusively to group the 3D cross product and the 2D perpendicular product behind the same interface.",null,null],[16,"CrossVector","","The result type of the this (non-standard) generalized cross product.",33,null],[16,"CrossMatrix","","The matrix representation of this (non-standard) generalized cross product.",33,null],[10,"gcross","","Computes this (non-standard) generalized cross product.",33,null],[10,"gcross_matrix","","Computes the matrix represenattion of this (non-standard) generalized cross product.",33,null],[0,"volumetric","nphysics2d","Volume and inertia tensor computation.",null,null],[5,"ball_volume","nphysics2d::volumetric","The volume of a ball.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"ball_area","","The area of a ball.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"n"}}],[5,"ball_center_of_mass","","The center of mass of a ball.",null,{"inputs":[],"output":{"name":"p"}}],[5,"ball_unit_angular_inertia","","The unit angular inertia of a ball.",null,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"i"}}],[5,"cylinder_volume","","The volume of a cylinder.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cylinder_area","","The area of a cylinder.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cylinder_center_of_mass","","The center of mass of a cylinder.",null,{"inputs":[],"output":{"name":"p"}}],[5,"cylinder_unit_angular_inertia","","The unit angular inertia of a cylinder.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"i"}}],[5,"cone_volume","","The volume of a cone.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cone_area","","The area of a cone.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[5,"cone_center_of_mass","","The center of mass of a cone.",null,null],[5,"cone_unit_angular_inertia","","The unit angular inertia of a cone.",null,{"inputs":[{"name":"usize"},{"name":"n"},{"name":"n"}],"output":{"name":"i"}}],[5,"cuboid_volume","","The volume of a cuboid.",null,null],[5,"cuboid_area","","The area of a cuboid.",null,null],[5,"cuboid_center_of_mass","","The center of mass of a cuboid.",null,{"inputs":[],"output":{"name":"p"}}],[5,"cuboid_unit_angular_inertia","","The unit angular inertia of a cuboid.",null,{"inputs":[{"name":"v"}],"output":{"name":"i"}}],[5,"convex_polyline_area_unchecked","","The area of a convex polyline.",null,{"inputs":[{"name":"polyline"}],"output":{"name":"n"}}],[5,"convex_polyline_area_and_center_of_mass_unchecked","","The area and center of mass of a 2D convex Polyline.",null,null],[5,"convex_polyline_mass_properties_unchecked","","The mass properties of a 2D convex Polyline.",null,null],[5,"convex_hull_area","","The area of a convex hull.",null,null],[5,"convex_hull_volume","","The volume of the convex hull of a set of points.",null,null],[5,"convex_hull_center_of_mass","","The center of mass of the convex hull of a set of points.",null,null],[5,"convex_hull_unit_angular_inertia","","The angular inertia of the convex hull of a set of points.",null,null],[8,"Volumetric","","Trait implemented by objects which have a mass, a center of mass, and an inertia tensor.",null,null],[10,"area","","Computes the area of this object.",34,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[10,"volume","","Computes the volume of this object.",34,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[10,"center_of_mass","","Computes the center of mass of this object.",34,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[10,"unit_angular_inertia","","Computes the angular inertia tensor of this object.",34,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"mass","","Given its density, this computes the mass of this object.",34,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"n"}}],[11,"angular_inertia","","Given its mass, this computes the angular inertia of this object.",34,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"i"}}],[11,"mass_properties","","Given its density, this computes the mass, center of mass, and inertia tensor of this object.",34,null],[8,"InertiaTensor","","Trait implemented by inertia tensors.",null,null],[10,"apply","","Applies this inertia tensor to a vector.",35,{"inputs":[{"name":"self"},{"name":"av"}],"output":{"name":"av"}}],[10,"to_world_space","","Transforms this inertia tensor from local space to world space.",35,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"self"}}],[10,"to_relative_wrt_point","","Computes this inertia tensor relative to a given point.",35,{"inputs":[{"name":"self"},{"name":"n"},{"name":"p"}],"output":{"name":"self"}}],[0,"math","nphysics2d","Compilation flags dependent aliases for mathematical types.",null,null],[6,"Point","nphysics2d::math","The point type.",null,null],[6,"Vector","","The vector type.",null,null],[6,"Orientation","","The orientation type.",null,null],[6,"Isometry","","The transformation matrix type.",null,null],[6,"Rotation","","The rotation matrix type.",null,null],[6,"Translation","","The translation type.",null,null],[6,"AngularInertia","","The inertia tensor type.",null,null],[11,"mass","nphysics2d::volumetric","Given its density, this computes the mass of this object.",34,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"n"}}],[11,"angular_inertia","","Given its mass, this computes the angular inertia of this object.",34,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"i"}}],[11,"mass_properties","","Given its density, this computes the mass, center of mass, and inertia tensor of this object.",34,null]],"paths":[[8,"Integrator"],[3,"BodyExpEulerIntegrator"],[3,"BodySmpEulerIntegrator"],[3,"BodyForceGenerator"],[3,"BodyDamping"],[3,"TranslationalCCDMotionClamping"],[4,"Constraint"],[8,"Detector"],[3,"Anchor"],[3,"JointManager"],[3,"BallInSocket"],[3,"Fixed"],[8,"Joint"],[3,"ActivationManager"],[3,"Velocities"],[3,"VelocityConstraint"],[4,"CorrectionMode"],[8,"Solver"],[3,"ContactIdentifier"],[3,"ImpulseCache"],[3,"AccumulatedImpulseSolver"],[3,"World"],[4,"ActivationState"],[4,"RigidBodyState"],[4,"WorldObject"],[4,"WorldObjectBorrowed"],[4,"WorldObjectBorrowedMut"],[3,"RigidBody"],[3,"Sensor"],[3,"RigidBodyCollisionGroups"],[3,"SensorCollisionGroups"],[3,"UnionFindSet"],[3,"DeterministicState"],[8,"GeneralizedCross"],[8,"Volumetric"],[8,"InertiaTensor"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",17,null],[11,"div_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"neg","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"abs","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"hash","","",18,null],[11,"hash","","",17,null],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"to_bigint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",18,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",2,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Eulerâ€™s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / Ï€`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / Ï€`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(Ï€)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `Ï€ / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `Ï€ / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `Ï€ / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `Ï€ / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `Ï€ / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedesâ€™ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `Ï‡Â²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["sdl2"] = {"doc":"","items":[[3,"Sdl","sdl2","The SDL context type. Initialize with `sdl2::init()`.",null,null],[3,"AudioSubsystem","","",null,null],[3,"GameControllerSubsystem","","",null,null],[3,"HapticSubsystem","","",null,null],[3,"JoystickSubsystem","","",null,null],[3,"VideoSubsystem","","",null,null],[3,"TimerSubsystem","","",null,null],[3,"EventSubsystem","","",null,null],[3,"EventPump","","A thread-safe type that encapsulates SDL event-pumping functions.",null,null],[4,"Error","","",null,null],[13,"NoMemError","","",0,null],[13,"ReadError","","",0,null],[13,"WriteError","","",0,null],[13,"SeekError","","",0,null],[13,"UnsupportedError","","",0,null],[4,"IntegerOrSdlError","","A given integer was so big that its representation as a C integer would be negative.",null,null],[13,"IntegerOverflows","","",1,null],[13,"SdlError","","",1,null],[5,"init","","Initializes the SDL library. This must be called before using any other SDL function.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_error","","",null,{"inputs":[],"output":{"name":"string"}}],[5,"set_error","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"set_error_from_code","","",null,{"inputs":[{"name":"error"}],"output":null}],[5,"clear_error","","",null,{"inputs":[],"output":null}],[0,"clipboard","","",null,null],[3,"ClipboardUtil","sdl2::clipboard","Clipboard utility functions. Access with `VideoSubsystem::clipboard()`.",null,null],[11,"clipboard","sdl2","",2,{"inputs":[{"name":"self"}],"output":{"name":"clipboardutil"}}],[11,"set_clipboard_text","sdl2::clipboard","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clipboard_text","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"has_clipboard_text","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"cpuinfo","sdl2","",null,null],[5,"cpu_count","sdl2::cpuinfo","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"cpu_cache_line_size","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"has_rdtsc","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_alti_vec","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_mmx","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_3d_now","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_sse","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_sse2","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_sse3","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_sse41","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_sse42","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_avx","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"system_ram","","",null,{"inputs":[],"output":{"name":"i32"}}],[17,"CACHELINESIZE","","",null,null],[0,"event","sdl2","Event Handling",null,null],[3,"EventPollIterator","sdl2::event","An iterator that calls `EventPump::poll_event()`.",null,null],[3,"EventWaitIterator","","An iterator that calls `EventPump::wait_event()`.",null,null],[3,"EventWaitTimeoutIterator","","An iterator that calls `EventPump::wait_event_timeout()`.",null,null],[4,"EventType","","Types of events that can be delivered.",null,null],[13,"First","","",4,null],[13,"Quit","","",4,null],[13,"AppTerminating","","",4,null],[13,"AppLowMemory","","",4,null],[13,"AppWillEnterBackground","","",4,null],[13,"AppDidEnterBackground","","",4,null],[13,"AppWillEnterForeground","","",4,null],[13,"AppDidEnterForeground","","",4,null],[13,"Window","","",4,null],[13,"KeyDown","","",4,null],[13,"KeyUp","","",4,null],[13,"TextEditing","","",4,null],[13,"TextInput","","",4,null],[13,"MouseMotion","","",4,null],[13,"MouseButtonDown","","",4,null],[13,"MouseButtonUp","","",4,null],[13,"MouseWheel","","",4,null],[13,"JoyAxisMotion","","",4,null],[13,"JoyBallMotion","","",4,null],[13,"JoyHatMotion","","",4,null],[13,"JoyButtonDown","","",4,null],[13,"JoyButtonUp","","",4,null],[13,"JoyDeviceAdded","","",4,null],[13,"JoyDeviceRemoved","","",4,null],[13,"ControllerAxisMotion","","",4,null],[13,"ControllerButtonDown","","",4,null],[13,"ControllerButtonUp","","",4,null],[13,"ControllerDeviceAdded","","",4,null],[13,"ControllerDeviceRemoved","","",4,null],[13,"ControllerDeviceRemapped","","",4,null],[13,"FingerDown","","",4,null],[13,"FingerUp","","",4,null],[13,"FingerMotion","","",4,null],[13,"DollarGesture","","",4,null],[13,"DollarRecord","","",4,null],[13,"MultiGesture","","",4,null],[13,"ClipboardUpdate","","",4,null],[13,"DropFile","","",4,null],[13,"User","","",4,null],[13,"Last","","",4,null],[4,"WindowEvent","","An enum of window events.",null,null],[13,"None","","",5,null],[13,"Shown","","",5,null],[13,"Hidden","","",5,null],[13,"Exposed","","",5,null],[13,"Moved","","",5,null],[13,"Resized","","",5,null],[13,"SizeChanged","","",5,null],[13,"Minimized","","",5,null],[13,"Maximized","","",5,null],[13,"Restored","","",5,null],[13,"Enter","","",5,null],[13,"Leave","","",5,null],[13,"FocusGained","","",5,null],[13,"FocusLost","","",5,null],[13,"Close","","",5,null],[13,"TakeFocus","","",5,null],[13,"HitTest","","",5,null],[4,"Event","","Different event types.",null,null],[13,"Quit","","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppTerminating","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppLowMemory","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppWillEnterBackground","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppDidEnterBackground","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppWillEnterForeground","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"AppDidEnterForeground","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"Window","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"win_event","","",6,null],[13,"KeyDown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"keycode","","",6,null],[12,"scancode","","",6,null],[12,"keymod","","",6,null],[12,"repeat","","",6,null],[13,"KeyUp","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"keycode","","",6,null],[12,"scancode","","",6,null],[12,"keymod","","",6,null],[12,"repeat","","",6,null],[13,"TextEditing","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"text","","",6,null],[12,"start","","",6,null],[12,"length","","",6,null],[13,"TextInput","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"text","","",6,null],[13,"MouseMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"which","","",6,null],[12,"mousestate","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"xrel","","",6,null],[12,"yrel","","",6,null],[13,"MouseButtonDown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"which","","",6,null],[12,"mouse_btn","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[13,"MouseButtonUp","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"which","","",6,null],[12,"mouse_btn","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[13,"MouseWheel","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"which","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"direction","","",6,null],[13,"JoyAxisMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"axis_idx","","",6,null],[12,"value","","",6,null],[13,"JoyBallMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"ball_idx","","",6,null],[12,"xrel","","",6,null],[12,"yrel","","",6,null],[13,"JoyHatMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"hat_idx","","",6,null],[12,"state","","",6,null],[13,"JoyButtonDown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"button_idx","","",6,null],[13,"JoyButtonUp","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"button_idx","","",6,null],[13,"JoyDeviceAdded","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[13,"JoyDeviceRemoved","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[13,"ControllerAxisMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"axis","","",6,null],[12,"value","","",6,null],[13,"ControllerButtonDown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"button","","",6,null],[13,"ControllerButtonUp","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[12,"button","","",6,null],[13,"ControllerDeviceAdded","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[13,"ControllerDeviceRemoved","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[13,"ControllerDeviceRemapped","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"which","","",6,null],[13,"FingerDown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"finger_id","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"dx","","",6,null],[12,"dy","","",6,null],[12,"pressure","","",6,null],[13,"FingerUp","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"finger_id","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"dx","","",6,null],[12,"dy","","",6,null],[12,"pressure","","",6,null],[13,"FingerMotion","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"finger_id","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"dx","","",6,null],[12,"dy","","",6,null],[12,"pressure","","",6,null],[13,"DollarGesture","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"gesture_id","","",6,null],[12,"num_fingers","","",6,null],[12,"error","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[13,"DollarRecord","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"gesture_id","","",6,null],[12,"num_fingers","","",6,null],[12,"error","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[13,"MultiGesture","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"touch_id","","",6,null],[12,"d_theta","","",6,null],[12,"d_dist","","",6,null],[12,"x","","",6,null],[12,"y","","",6,null],[12,"num_fingers","","",6,null],[13,"ClipboardUpdate","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[13,"DropFile","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"filename","","",6,null],[13,"User","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"window_id","","",6,null],[12,"type_","","",6,null],[12,"code","","",6,null],[12,"data1","","",6,null],[12,"data2","","",6,null],[13,"Unknown","sdl2::event","",6,null],[12,"timestamp","sdl2::event::Event","",6,null],[12,"type_","","",6,null],[11,"flush_event","sdl2","Removes all events in the event queue that match the specified event type.",7,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":null}],[11,"flush_events","","Removes all events in the event queue that match the specified type range.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"peek_events","","Reads the events at the front of the event queue, until the maximum amount of events is read.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"b"}}],[11,"push_event","","Pushes an event to the event queue.",7,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"result"}}],[11,"register_event","","Register a custom SDL event.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register_events","","Registers custom SDL events.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"register_custom_event","","Register a custom event",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push_custom_event","","Push a custom event",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","sdl2::event","",4,{"inputs":[{"name":"self"}],"output":{"name":"eventtype"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",4,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"windowevent"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"windowevent"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"windowevent"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_user_event","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_user_event_type","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_event_enabled","sdl2","Query if an event type is enabled.",8,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"enable_event","","Enable an event type. Returns if the event type was enabled before the call.",8,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"disable_event","","Disable an event type. Returns if the event type was enabled before the call.",8,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"poll_event","","Polls for currently pending events.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll_iter","","Returns a polling iterator that calls `poll_event()`. The iterator will terminate once there are no more pending events.",8,{"inputs":[{"name":"self"}],"output":{"name":"eventpolliterator"}}],[11,"pump_events","","Pumps the event loop, gathering events from the input devices.",8,{"inputs":[{"name":"self"}],"output":null}],[11,"wait_event","","Waits indefinitely for the next available event.",8,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"wait_event_timeout","","Waits until the specified timeout (in milliseconds) for the next available event.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"wait_iter","","Returns a waiting iterator that calls `wait_event()`.",8,{"inputs":[{"name":"self"}],"output":{"name":"eventwaititerator"}}],[11,"wait_timeout_iter","","Returns a waiting iterator that calls `wait_event_timeout()`.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"eventwaittimeoutiterator"}}],[11,"keyboard_state","","",8,{"inputs":[{"name":"self"}],"output":{"name":"keyboardstate"}}],[11,"mouse_state","","",8,{"inputs":[{"name":"self"}],"output":{"name":"mousestate"}}],[11,"relative_mouse_state","","",8,{"inputs":[{"name":"self"}],"output":{"name":"relativemousestate"}}],[11,"next","sdl2::event","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"filesystem","sdl2","",null,null],[4,"PrefPathError","sdl2::filesystem","",null,null],[13,"InvalidOrganizationName","","",12,null],[13,"InvalidApplicationName","","",12,null],[13,"SdlError","","",12,null],[5,"base_path","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pref_path","","Return the preferred directory for the application to write files on this system, based on the given organization and application name.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"gesture","sdl2","",null,null],[0,"touch","","",null,null],[5,"num_touch_devices","sdl2::touch","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"touch_device","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"touchdevice"}}],[5,"num_touch_fingers","","",null,{"inputs":[{"name":"touchdevice"}],"output":{"name":"i32"}}],[5,"touch_finger","","",null,{"inputs":[{"name":"touchdevice"},{"name":"i32"}],"output":{"name":"option"}}],[6,"Finger","","",null,null],[6,"TouchDevice","","",null,null],[0,"joystick","sdl2","",null,null],[3,"Joystick","sdl2::joystick","Wrapper around the SDL_Joystick object",null,null],[3,"Guid","","Wrapper around a SDL_JoystickGUID, a globally unique identifier for a joystick.",null,null],[4,"HatState","","This is represented in SDL2 as a bitfield but obviously not all combinations make sense: 5 for instance would mean up and down at the same time... To simplify things I turn it into an enum which is how the SDL2 docs present it anyway (using macros).",null,null],[13,"Centered","","",13,null],[13,"Up","","",13,null],[13,"Right","","",13,null],[13,"Down","","",13,null],[13,"Left","","",13,null],[13,"RightUp","","",13,null],[13,"RightDown","","",13,null],[13,"LeftUp","","",13,null],[13,"Leftdown","","",13,null],[11,"num_joysticks","sdl2","Retreive the total number of attached joysticks *and* controllers identified by SDL.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"open","","Attempt to open the joystick at number `id` and return it.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"name_for_index","","Return the name of the joystick at index `id`",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"device_guid","","Get the GUID for the joystick number `id`",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_event_state","","If state is `true` joystick events are processed, otherwise they're ignored.",14,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"event_state","","Return `true` if joystick events are processed.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"update","","Force joystick update when not using the event loop",14,{"inputs":[{"name":"self"}],"output":null}],[11,"subsystem","sdl2::joystick","",15,{"inputs":[{"name":"self"}],"output":{"name":"joysticksubsystem"}}],[11,"name","","Return the name of the joystick or an empty string if no name is found.",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"attached","","Return true if the joystick has been opened and currently connected.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"instance_id","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"guid","","Retreive the joystick's GUID",15,{"inputs":[{"name":"self"}],"output":{"name":"guid"}}],[11,"num_axes","","Retreive the number of axes for this joystick",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"axis","","Gets the position of the given `axis`.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"num_buttons","","Retreive the number of buttons for this joystick",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"button","","Return `Ok(true)` if `button` is pressed.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"num_balls","","Retreive the number of balls for this joystick",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ball","","Return a pair `(dx, dy)` containing the difference in axis position since the last poll",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"num_hats","","Retreive the number of balls for this joystick",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hat","","Return the position of `hat` for this joystick",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"guid"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"guid"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"guid"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"from_string","","Create a GUID from a string representation.",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_zero","","Return `true` if GUID is full 0s",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"string","","Return a String representation of GUID",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"raw","","Return a copy of the internal SDL_JoystickGUID",16,{"inputs":[{"name":"self"}],"output":{"name":"sdl_joystickguid"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"hatstate"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"hatstate"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","",13,{"inputs":[{"name":"u8"}],"output":{"name":"hatstate"}}],[11,"to_raw","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[0,"controller","sdl2","",null,null],[3,"GameController","sdl2::controller","Wrapper around the SDL_GameController object",null,null],[4,"AddMappingError","","",null,null],[13,"InvalidMapping","","",17,null],[13,"InvalidFilePath","","",17,null],[13,"SdlError","","",17,null],[4,"Axis","","",null,null],[13,"LeftX","","",18,null],[13,"LeftY","","",18,null],[13,"RightX","","",18,null],[13,"RightY","","",18,null],[13,"TriggerLeft","","",18,null],[13,"TriggerRight","","",18,null],[4,"Button","","",null,null],[13,"A","","",19,null],[13,"B","","",19,null],[13,"X","","",19,null],[13,"Y","","",19,null],[13,"Back","","",19,null],[13,"Guide","","",19,null],[13,"Start","","",19,null],[13,"LeftStick","","",19,null],[13,"RightStick","","",19,null],[13,"LeftShoulder","","",19,null],[13,"RightShoulder","","",19,null],[13,"DPadUp","","",19,null],[13,"DPadDown","","",19,null],[13,"DPadLeft","","",19,null],[13,"DPadRight","","",19,null],[4,"MappingStatus","","Possible return values for `add_mapping`",null,null],[13,"Added","","",20,null],[13,"Updated","","",20,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"num_joysticks","sdl2","Retreive the total number of attached joysticks *and* controllers identified by SDL.",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_game_controller","","Return true if the joystick at index `id` is a game controller.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"open","","Attempt to open the controller number `id` and return it. Controller IDs are the same as joystick IDs and the maximum number can be retreived using the `SDL_NumJoysticks` function.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"name_for_index","","Return the name of the controller at the given index.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_event_state","","If state is `true` controller events are processed, otherwise they're ignored.",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"event_state","","Return `true` if controller events are processed.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_mapping","","Add a new mapping from a mapping string",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"load_mappings","","Load mappings from a file",21,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"mapping_for_guid","","",21,{"inputs":[{"name":"self"},{"name":"guid"}],"output":{"name":"result"}}],[11,"update","","Force controller update when not using the event loop",21,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","sdl2::controller","",18,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","Return the Axis from a string description in the same format used by the game controller mapping strings.",18,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"string","","Return a string for a given axis in the same format using by the game controller mapping strings",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_ll","","",18,{"inputs":[{"name":"sdl_gamecontrolleraxis"}],"output":{"name":"option"}}],[11,"to_ll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sdl_gamecontrolleraxis"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","Return the Button from a string description in the same format used by the game controller mapping strings.",19,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"string","","Return a string for a given button in the same format using by the game controller mapping strings",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_ll","","",19,{"inputs":[{"name":"sdl_gamecontrollerbutton"}],"output":{"name":"option"}}],[11,"to_ll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sdl_gamecontrollerbutton"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"mappingstatus"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"mappingstatus"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"subsystem","","",22,{"inputs":[{"name":"self"}],"output":{"name":"gamecontrollersubsystem"}}],[11,"name","","Return the name of the controller or an empty string if no name is found.",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"mapping","","Return a String describing the controller's button and axis mappings",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"attached","","Return true if the controller has been opened and currently connected.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"instance_id","","Return the joystick id of this controller",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"axis","","Get the position of the given `axis`",22,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"i16"}}],[11,"button","","Returns `true` if `button` is pressed.",22,{"inputs":[{"name":"self"},{"name":"button"}],"output":{"name":"bool"}}],[11,"drop","","",22,{"inputs":[{"name":"self"}],"output":null}],[0,"haptic","sdl2","Haptic Functions",null,null],[0,"keyboard","","",null,null],[3,"Mod","sdl2::keyboard","",null,null],[3,"KeyboardState","","",null,null],[3,"ScancodeIterator","","",null,null],[3,"PressedScancodeIterator","","",null,null],[3,"KeyboardUtil","","Keyboard utility functions. Access with `Sdl::keyboard()`.",null,null],[3,"TextInputUtil","","Text input utility functions. Access with `VideoSubsystem::text_input()`.",null,null],[4,"Keycode","","",null,null],[13,"Backspace","","",23,null],[13,"Tab","","",23,null],[13,"Return","","",23,null],[13,"Escape","","",23,null],[13,"Space","","",23,null],[13,"Exclaim","","",23,null],[13,"Quotedbl","","",23,null],[13,"Hash","","",23,null],[13,"Dollar","","",23,null],[13,"Percent","","",23,null],[13,"Ampersand","","",23,null],[13,"Quote","","",23,null],[13,"LeftParen","","",23,null],[13,"RightParen","","",23,null],[13,"Asterisk","","",23,null],[13,"Plus","","",23,null],[13,"Comma","","",23,null],[13,"Minus","","",23,null],[13,"Period","","",23,null],[13,"Slash","","",23,null],[13,"Num0","","",23,null],[13,"Num1","","",23,null],[13,"Num2","","",23,null],[13,"Num3","","",23,null],[13,"Num4","","",23,null],[13,"Num5","","",23,null],[13,"Num6","","",23,null],[13,"Num7","","",23,null],[13,"Num8","","",23,null],[13,"Num9","","",23,null],[13,"Colon","","",23,null],[13,"Semicolon","","",23,null],[13,"Less","","",23,null],[13,"Equals","","",23,null],[13,"Greater","","",23,null],[13,"Question","","",23,null],[13,"At","","",23,null],[13,"LeftBracket","","",23,null],[13,"Backslash","","",23,null],[13,"RightBracket","","",23,null],[13,"Caret","","",23,null],[13,"Underscore","","",23,null],[13,"Backquote","","",23,null],[13,"A","","",23,null],[13,"B","","",23,null],[13,"C","","",23,null],[13,"D","","",23,null],[13,"E","","",23,null],[13,"F","","",23,null],[13,"G","","",23,null],[13,"H","","",23,null],[13,"I","","",23,null],[13,"J","","",23,null],[13,"K","","",23,null],[13,"L","","",23,null],[13,"M","","",23,null],[13,"N","","",23,null],[13,"O","","",23,null],[13,"P","","",23,null],[13,"Q","","",23,null],[13,"R","","",23,null],[13,"S","","",23,null],[13,"T","","",23,null],[13,"U","","",23,null],[13,"V","","",23,null],[13,"W","","",23,null],[13,"X","","",23,null],[13,"Y","","",23,null],[13,"Z","","",23,null],[13,"Delete","","",23,null],[13,"CapsLock","","",23,null],[13,"F1","","",23,null],[13,"F2","","",23,null],[13,"F3","","",23,null],[13,"F4","","",23,null],[13,"F5","","",23,null],[13,"F6","","",23,null],[13,"F7","","",23,null],[13,"F8","","",23,null],[13,"F9","","",23,null],[13,"F10","","",23,null],[13,"F11","","",23,null],[13,"F12","","",23,null],[13,"PrintScreen","","",23,null],[13,"ScrollLock","","",23,null],[13,"Pause","","",23,null],[13,"Insert","","",23,null],[13,"Home","","",23,null],[13,"PageUp","","",23,null],[13,"End","","",23,null],[13,"PageDown","","",23,null],[13,"Right","","",23,null],[13,"Left","","",23,null],[13,"Down","","",23,null],[13,"Up","","",23,null],[13,"NumLockClear","","",23,null],[13,"KpDivide","","",23,null],[13,"KpMultiply","","",23,null],[13,"KpMinus","","",23,null],[13,"KpPlus","","",23,null],[13,"KpEnter","","",23,null],[13,"Kp1","","",23,null],[13,"Kp2","","",23,null],[13,"Kp3","","",23,null],[13,"Kp4","","",23,null],[13,"Kp5","","",23,null],[13,"Kp6","","",23,null],[13,"Kp7","","",23,null],[13,"Kp8","","",23,null],[13,"Kp9","","",23,null],[13,"Kp0","","",23,null],[13,"KpPeriod","","",23,null],[13,"Application","","",23,null],[13,"Power","","",23,null],[13,"KpEquals","","",23,null],[13,"F13","","",23,null],[13,"F14","","",23,null],[13,"F15","","",23,null],[13,"F16","","",23,null],[13,"F17","","",23,null],[13,"F18","","",23,null],[13,"F19","","",23,null],[13,"F20","","",23,null],[13,"F21","","",23,null],[13,"F22","","",23,null],[13,"F23","","",23,null],[13,"F24","","",23,null],[13,"Execute","","",23,null],[13,"Help","","",23,null],[13,"Menu","","",23,null],[13,"Select","","",23,null],[13,"Stop","","",23,null],[13,"Again","","",23,null],[13,"Undo","","",23,null],[13,"Cut","","",23,null],[13,"Copy","","",23,null],[13,"Paste","","",23,null],[13,"Find","","",23,null],[13,"Mute","","",23,null],[13,"VolumeUp","","",23,null],[13,"VolumeDown","","",23,null],[13,"KpComma","","",23,null],[13,"KpEqualsAS400","","",23,null],[13,"AltErase","","",23,null],[13,"Sysreq","","",23,null],[13,"Cancel","","",23,null],[13,"Clear","","",23,null],[13,"Prior","","",23,null],[13,"Return2","","",23,null],[13,"Separator","","",23,null],[13,"Out","","",23,null],[13,"Oper","","",23,null],[13,"ClearAgain","","",23,null],[13,"CrSel","","",23,null],[13,"ExSel","","",23,null],[13,"Kp00","","",23,null],[13,"Kp000","","",23,null],[13,"ThousandsSeparator","","",23,null],[13,"DecimalSeparator","","",23,null],[13,"CurrencyUnit","","",23,null],[13,"CurrencySubUnit","","",23,null],[13,"KpLeftParen","","",23,null],[13,"KpRightParen","","",23,null],[13,"KpLeftBrace","","",23,null],[13,"KpRightBrace","","",23,null],[13,"KpTab","","",23,null],[13,"KpBackspace","","",23,null],[13,"KpA","","",23,null],[13,"KpB","","",23,null],[13,"KpC","","",23,null],[13,"KpD","","",23,null],[13,"KpE","","",23,null],[13,"KpF","","",23,null],[13,"KpXor","","",23,null],[13,"KpPower","","",23,null],[13,"KpPercent","","",23,null],[13,"KpLess","","",23,null],[13,"KpGreater","","",23,null],[13,"KpAmpersand","","",23,null],[13,"KpDblAmpersand","","",23,null],[13,"KpVerticalBar","","",23,null],[13,"KpDblVerticalBar","","",23,null],[13,"KpColon","","",23,null],[13,"KpHash","","",23,null],[13,"KpSpace","","",23,null],[13,"KpAt","","",23,null],[13,"KpExclam","","",23,null],[13,"KpMemStore","","",23,null],[13,"KpMemRecall","","",23,null],[13,"KpMemClear","","",23,null],[13,"KpMemAdd","","",23,null],[13,"KpMemSubtract","","",23,null],[13,"KpMemMultiply","","",23,null],[13,"KpMemDivide","","",23,null],[13,"KpPlusMinus","","",23,null],[13,"KpClear","","",23,null],[13,"KpClearEntry","","",23,null],[13,"KpBinary","","",23,null],[13,"KpOctal","","",23,null],[13,"KpDecimal","","",23,null],[13,"KpHexadecimal","","",23,null],[13,"LCtrl","","",23,null],[13,"LShift","","",23,null],[13,"LAlt","","",23,null],[13,"LGui","","",23,null],[13,"RCtrl","","",23,null],[13,"RShift","","",23,null],[13,"RAlt","","",23,null],[13,"RGui","","",23,null],[13,"Mode","","",23,null],[13,"AudioNext","","",23,null],[13,"AudioPrev","","",23,null],[13,"AudioStop","","",23,null],[13,"AudioPlay","","",23,null],[13,"AudioMute","","",23,null],[13,"MediaSelect","","",23,null],[13,"Www","","",23,null],[13,"Mail","","",23,null],[13,"Calculator","","",23,null],[13,"Computer","","",23,null],[13,"AcSearch","","",23,null],[13,"AcHome","","",23,null],[13,"AcBack","","",23,null],[13,"AcForward","","",23,null],[13,"AcStop","","",23,null],[13,"AcRefresh","","",23,null],[13,"AcBookmarks","","",23,null],[13,"BrightnessDown","","",23,null],[13,"BrightnessUp","","",23,null],[13,"DisplaySwitch","","",23,null],[13,"KbdIllumToggle","","",23,null],[13,"KbdIllumDown","","",23,null],[13,"KbdIllumUp","","",23,null],[13,"Eject","","",23,null],[13,"Sleep","","",23,null],[4,"Scancode","","",null,null],[13,"A","","",24,null],[13,"B","","",24,null],[13,"C","","",24,null],[13,"D","","",24,null],[13,"E","","",24,null],[13,"F","","",24,null],[13,"G","","",24,null],[13,"H","","",24,null],[13,"I","","",24,null],[13,"J","","",24,null],[13,"K","","",24,null],[13,"L","","",24,null],[13,"M","","",24,null],[13,"N","","",24,null],[13,"O","","",24,null],[13,"P","","",24,null],[13,"Q","","",24,null],[13,"R","","",24,null],[13,"S","","",24,null],[13,"T","","",24,null],[13,"U","","",24,null],[13,"V","","",24,null],[13,"W","","",24,null],[13,"X","","",24,null],[13,"Y","","",24,null],[13,"Z","","",24,null],[13,"Num1","","",24,null],[13,"Num2","","",24,null],[13,"Num3","","",24,null],[13,"Num4","","",24,null],[13,"Num5","","",24,null],[13,"Num6","","",24,null],[13,"Num7","","",24,null],[13,"Num8","","",24,null],[13,"Num9","","",24,null],[13,"Num0","","",24,null],[13,"Return","","",24,null],[13,"Escape","","",24,null],[13,"Backspace","","",24,null],[13,"Tab","","",24,null],[13,"Space","","",24,null],[13,"Minus","","",24,null],[13,"Equals","","",24,null],[13,"LeftBracket","","",24,null],[13,"RightBracket","","",24,null],[13,"Backslash","","",24,null],[13,"NonUsHash","","",24,null],[13,"Semicolon","","",24,null],[13,"Apostrophe","","",24,null],[13,"Grave","","",24,null],[13,"Comma","","",24,null],[13,"Period","","",24,null],[13,"Slash","","",24,null],[13,"CapsLock","","",24,null],[13,"F1","","",24,null],[13,"F2","","",24,null],[13,"F3","","",24,null],[13,"F4","","",24,null],[13,"F5","","",24,null],[13,"F6","","",24,null],[13,"F7","","",24,null],[13,"F8","","",24,null],[13,"F9","","",24,null],[13,"F10","","",24,null],[13,"F11","","",24,null],[13,"F12","","",24,null],[13,"PrintScreen","","",24,null],[13,"ScrollLock","","",24,null],[13,"Pause","","",24,null],[13,"Insert","","",24,null],[13,"Home","","",24,null],[13,"PageUp","","",24,null],[13,"Delete","","",24,null],[13,"End","","",24,null],[13,"PageDown","","",24,null],[13,"Right","","",24,null],[13,"Left","","",24,null],[13,"Down","","",24,null],[13,"Up","","",24,null],[13,"NumLockClear","","",24,null],[13,"KpDivide","","",24,null],[13,"KpMultiply","","",24,null],[13,"KpMinus","","",24,null],[13,"KpPlus","","",24,null],[13,"KpEnter","","",24,null],[13,"Kp1","","",24,null],[13,"Kp2","","",24,null],[13,"Kp3","","",24,null],[13,"Kp4","","",24,null],[13,"Kp5","","",24,null],[13,"Kp6","","",24,null],[13,"Kp7","","",24,null],[13,"Kp8","","",24,null],[13,"Kp9","","",24,null],[13,"Kp0","","",24,null],[13,"KpPeriod","","",24,null],[13,"NonUsBackslash","","",24,null],[13,"Application","","",24,null],[13,"Power","","",24,null],[13,"KpEquals","","",24,null],[13,"F13","","",24,null],[13,"F14","","",24,null],[13,"F15","","",24,null],[13,"F16","","",24,null],[13,"F17","","",24,null],[13,"F18","","",24,null],[13,"F19","","",24,null],[13,"F20","","",24,null],[13,"F21","","",24,null],[13,"F22","","",24,null],[13,"F23","","",24,null],[13,"F24","","",24,null],[13,"Execute","","",24,null],[13,"Help","","",24,null],[13,"Menu","","",24,null],[13,"Select","","",24,null],[13,"Stop","","",24,null],[13,"Again","","",24,null],[13,"Undo","","",24,null],[13,"Cut","","",24,null],[13,"Copy","","",24,null],[13,"Paste","","",24,null],[13,"Find","","",24,null],[13,"Mute","","",24,null],[13,"VolumeUp","","",24,null],[13,"VolumeDown","","",24,null],[13,"KpComma","","",24,null],[13,"KpEqualsAS400","","",24,null],[13,"International1","","",24,null],[13,"International2","","",24,null],[13,"International3","","",24,null],[13,"International4","","",24,null],[13,"International5","","",24,null],[13,"International6","","",24,null],[13,"International7","","",24,null],[13,"International8","","",24,null],[13,"International9","","",24,null],[13,"Lang1","","",24,null],[13,"Lang2","","",24,null],[13,"Lang3","","",24,null],[13,"Lang4","","",24,null],[13,"Lang5","","",24,null],[13,"Lang6","","",24,null],[13,"Lang7","","",24,null],[13,"Lang8","","",24,null],[13,"Lang9","","",24,null],[13,"AltErase","","",24,null],[13,"SysReq","","",24,null],[13,"Cancel","","",24,null],[13,"Clear","","",24,null],[13,"Prior","","",24,null],[13,"Return2","","",24,null],[13,"Separator","","",24,null],[13,"Out","","",24,null],[13,"Oper","","",24,null],[13,"ClearAgain","","",24,null],[13,"CrSel","","",24,null],[13,"ExSel","","",24,null],[13,"Kp00","","",24,null],[13,"Kp000","","",24,null],[13,"ThousandsSeparator","","",24,null],[13,"DecimalSeparator","","",24,null],[13,"CurrencyUnit","","",24,null],[13,"CurrencySubUnit","","",24,null],[13,"KpLeftParen","","",24,null],[13,"KpRightParen","","",24,null],[13,"KpLeftBrace","","",24,null],[13,"KpRightBrace","","",24,null],[13,"KpTab","","",24,null],[13,"KpBackspace","","",24,null],[13,"KpA","","",24,null],[13,"KpB","","",24,null],[13,"KpC","","",24,null],[13,"KpD","","",24,null],[13,"KpE","","",24,null],[13,"KpF","","",24,null],[13,"KpXor","","",24,null],[13,"KpPower","","",24,null],[13,"KpPercent","","",24,null],[13,"KpLess","","",24,null],[13,"KpGreater","","",24,null],[13,"KpAmpersand","","",24,null],[13,"KpDblAmpersand","","",24,null],[13,"KpVerticalBar","","",24,null],[13,"KpDblVerticalBar","","",24,null],[13,"KpColon","","",24,null],[13,"KpHash","","",24,null],[13,"KpSpace","","",24,null],[13,"KpAt","","",24,null],[13,"KpExclam","","",24,null],[13,"KpMemStore","","",24,null],[13,"KpMemRecall","","",24,null],[13,"KpMemClear","","",24,null],[13,"KpMemAdd","","",24,null],[13,"KpMemSubtract","","",24,null],[13,"KpMemMultiply","","",24,null],[13,"KpMemDivide","","",24,null],[13,"KpPlusMinus","","",24,null],[13,"KpClear","","",24,null],[13,"KpClearEntry","","",24,null],[13,"KpBinary","","",24,null],[13,"KpOctal","","",24,null],[13,"KpDecimal","","",24,null],[13,"KpHexadecimal","","",24,null],[13,"LCtrl","","",24,null],[13,"LShift","","",24,null],[13,"LAlt","","",24,null],[13,"LGui","","",24,null],[13,"RCtrl","","",24,null],[13,"RShift","","",24,null],[13,"RAlt","","",24,null],[13,"RGui","","",24,null],[13,"Mode","","",24,null],[13,"AudioNext","","",24,null],[13,"AudioPrev","","",24,null],[13,"AudioStop","","",24,null],[13,"AudioPlay","","",24,null],[13,"AudioMute","","",24,null],[13,"MediaSelect","","",24,null],[13,"Www","","",24,null],[13,"Mail","","",24,null],[13,"Calculator","","",24,null],[13,"Computer","","",24,null],[13,"AcSearch","","",24,null],[13,"AcHome","","",24,null],[13,"AcBack","","",24,null],[13,"AcForward","","",24,null],[13,"AcStop","","",24,null],[13,"AcRefresh","","",24,null],[13,"AcBookmarks","","",24,null],[13,"BrightnessDown","","",24,null],[13,"BrightnessUp","","",24,null],[13,"DisplaySwitch","","",24,null],[13,"KbdIllumToggle","","",24,null],[13,"KbdIllumDown","","",24,null],[13,"KbdIllumUp","","",24,null],[13,"Eject","","",24,null],[13,"Sleep","","",24,null],[13,"App1","","",24,null],[13,"App2","","",24,null],[13,"Num","","",24,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"keycode"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"keycode"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i32","","",23,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_scancode","","Gets the virtual key from a scancode. Returns None if there is no corresponding virtual key.",23,{"inputs":[{"name":"scancode"}],"output":{"name":"option"}}],[11,"from_name","","",23,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"name","","",23,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"scancode"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"scancode"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i32","","",24,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_keycode","","Gets the scancode from a virtual key. Returns None if there is no corresponding scancode.",24,{"inputs":[{"name":"keycode"}],"output":{"name":"option"}}],[11,"from_name","","",24,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"name","","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[17,"NOMOD","","",null,null],[17,"LSHIFTMOD","","",null,null],[17,"RSHIFTMOD","","",null,null],[17,"LCTRLMOD","","",null,null],[17,"RCTRLMOD","","",null,null],[17,"LALTMOD","","",null,null],[17,"RALTMOD","","",null,null],[17,"LGUIMOD","","",null,null],[17,"RGUIMOD","","",null,null],[17,"NUMMOD","","",null,null],[17,"CAPSMOD","","",null,null],[17,"MODEMOD","","",null,null],[17,"RESERVEDMOD","","",null,null],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"ordering"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",25,{"inputs":[],"output":{"name":"mod"}}],[11,"all","","Returns the set containing all flags.",25,{"inputs":[],"output":{"name":"mod"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",25,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",25,{"inputs":[{"name":"u16"}],"output":{"name":"mod"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"bitor_assign","","Adds the set of flags.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"bitxor_assign","","Toggles the set of flags.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"sub_assign","","Disables all flags enabled in the set.",25,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",25,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"extend","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",25,{"inputs":[{"name":"t"}],"output":{"name":"mod"}}],[11,"new","","",26,{"inputs":[{"name":"eventpump"}],"output":{"name":"keyboardstate"}}],[11,"is_scancode_pressed","","Returns true if the scancode is pressed.",26,{"inputs":[{"name":"self"},{"name":"scancode"}],"output":{"name":"bool"}}],[11,"scancodes","","Returns an iterator all scancodes with a boolean indicating if the scancode is pressed.",26,{"inputs":[{"name":"self"}],"output":{"name":"scancodeiterator"}}],[11,"pressed_scancodes","","Returns an iterator of pressed scancodes.",26,{"inputs":[{"name":"self"}],"output":{"name":"pressedscancodeiterator"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"keyboard","sdl2","",29,{"inputs":[{"name":"self"}],"output":{"name":"keyboardutil"}}],[11,"text_input","","",2,{"inputs":[{"name":"self"}],"output":{"name":"textinpututil"}}],[11,"focused_window_id","sdl2::keyboard","Gets the id of the window which currently has keyboard focus.",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mod_state","","",30,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"set_mod_state","","",30,{"inputs":[{"name":"self"},{"name":"mod"}],"output":null}],[11,"start","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"is_active","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stop","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"set_rect","","",31,{"inputs":[{"name":"self"},{"name":"rect"}],"output":null}],[11,"has_screen_keyboard_support","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_screen_keyboard_shown","","",31,{"inputs":[{"name":"self"},{"name":"window"}],"output":{"name":"bool"}}],[0,"mouse","sdl2","",null,null],[3,"RelativeMouseState","sdl2::mouse","",null,null],[3,"Cursor","","",null,null],[3,"MouseState","","",null,null],[3,"MouseButtonIterator","","",null,null],[3,"PressedMouseButtonIterator","","",null,null],[3,"MouseUtil","","Mouse utility functions. Access with `Sdl::mouse()`.",null,null],[4,"SystemCursor","","",null,null],[13,"Arrow","","",32,null],[13,"IBeam","","",32,null],[13,"Wait","","",32,null],[13,"Crosshair","","",32,null],[13,"WaitArrow","","",32,null],[13,"SizeNWSE","","",32,null],[13,"SizeNESW","","",32,null],[13,"SizeWE","","",32,null],[13,"SizeNS","","",32,null],[13,"SizeAll","","",32,null],[13,"No","","",32,null],[13,"Hand","","",32,null],[4,"MouseWheelDirection","","",null,null],[13,"Normal","","",33,null],[13,"Flipped","","",33,null],[13,"Unknown","","",33,null],[4,"MouseButton","","",null,null],[13,"Unknown","","",34,null],[13,"Left","","",34,null],[13,"Middle","","",34,null],[13,"Right","","",34,null],[13,"X1","","",34,null],[13,"X2","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"relativemousestate"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"relativemousestate"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"relativemousestate"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"new","","",35,{"inputs":[{"name":"eventpump"}],"output":{"name":"relativemousestate"}}],[11,"from_sdl_state","","",35,{"inputs":[{"name":"u32"}],"output":{"name":"relativemousestate"}}],[11,"to_sdl_state","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"left","","Returns true if the left mouse button is pressed.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"middle","","Tests if the middle mouse button was pressed.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"right","","Tests if the right mouse button was pressed.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x1","","Tests if the X1 mouse button was pressed.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x2","","Tests if the X2 mouse button was pressed.",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x","","Returns the x coordinate of the state",35,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"y","","Returns the y coordinate of the state",35,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_mouse_button_pressed","","Returns true if the mouse button is pressed.",35,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"mouse_buttons","","Returns an iterator all mouse buttons with a boolean indicating if the scancode is pressed.",35,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttoniterator"}}],[11,"pressed_mouse_buttons","","Returns an iterator of pressed mouse buttons.",35,{"inputs":[{"name":"self"}],"output":{"name":"pressedmousebuttoniterator"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"systemcursor"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"systemcursor"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",36,null],[11,"from_surface","","",36,{"inputs":[{"name":"s"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"from_system","","",36,{"inputs":[{"name":"systemcursor"}],"output":{"name":"result"}}],[11,"set","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"mousewheeldirection"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"mousewheeldirection"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"mousewheeldirection"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ll","","",33,{"inputs":[{"name":"u32"}],"output":{"name":"mousewheeldirection"}}],[11,"to_ll","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ll","","",34,{"inputs":[{"name":"u8"}],"output":{"name":"mousebutton"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"mousestate"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"mousestate"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"mousestate"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"new","","",37,{"inputs":[{"name":"eventpump"}],"output":{"name":"mousestate"}}],[11,"from_sdl_state","","",37,{"inputs":[{"name":"u32"}],"output":{"name":"mousestate"}}],[11,"to_sdl_state","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"left","","Returns true if the left mouse button is pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"middle","","Tests if the middle mouse button was pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"right","","Tests if the right mouse button was pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x1","","Tests if the X1 mouse button was pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x2","","Tests if the X2 mouse button was pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"x","","Returns the x coordinate of the state",37,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"y","","Returns the y coordinate of the state",37,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_mouse_button_pressed","","Returns true if the mouse button is pressed.",37,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"mouse_buttons","","Returns an iterator all mouse buttons with a boolean indicating if the scancode is pressed.",37,{"inputs":[{"name":"self"}],"output":{"name":"mousebuttoniterator"}}],[11,"pressed_mouse_buttons","","Returns an iterator of pressed mouse buttons.",37,{"inputs":[{"name":"self"}],"output":{"name":"pressedmousebuttoniterator"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mouse","sdl2","",29,{"inputs":[{"name":"self"}],"output":{"name":"mouseutil"}}],[11,"focused_window_id","sdl2::mouse","Gets the id of the window which currently has mouse focus.",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"warp_mouse_in_window","","",40,{"inputs":[{"name":"self"},{"name":"windowref"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"set_relative_mouse_mode","","",40,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"relative_mouse_mode","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_cursor_showing","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"show_cursor","","",40,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[0,"rect","sdl2","Rectangles and points.",null,null],[3,"Rect","sdl2::rect","A rectangle.",null,null],[3,"Point","","Immutable point type, consisting of x and y.",null,null],[5,"max_int_value","","The maximal integer value that can be used for rectangles.",null,{"inputs":[],"output":{"name":"u32"}}],[5,"min_int_value","","The minimal integer value that can be used for rectangle positions and points.",null,{"inputs":[],"output":{"name":"i32"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"new","","Creates a new rectangle from the given values.",41,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rect"}}],[11,"from_center","","Creates a new rectangle centered on the given position.",41,{"inputs":[{"name":"p"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rect"}}],[11,"x","","The horizontal position of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"y","","The vertical position of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"width","","The width of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"size","","Returns the width and height of this rectangle.",41,null],[11,"set_x","","Sets the horizontal position of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_y","","Sets the vertical position of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_width","","Sets the width of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_height","","Sets the height of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",41,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"left","","Returns the x-position of the left side of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"right","","Returns the x-position of the right side of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"top","","Returns the y-position of the top side of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"bottom","","Returns the y-position of the bottom side of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"center","","Returns the center position of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"top_left","","Returns the top-left corner of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"top_right","","Returns the top-right corner of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"bottom_left","","Returns the bottom-left corner of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"bottom_right","","Returns the bottom-right corner of this rectangle.",41,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"set_right","","Sets the position of the right side of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"set_bottom","","Sets the position of the bottom side of this rectangle to the given value, clamped to be less than or equal to i32::max_value() / 2.",41,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"center_on","","Centers the rectangle on the given point.",41,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"offset","","Move this rect and clamp the positions to prevent over/underflow. This also clamps the size to prevent overflow.",41,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"reposition","","Moves this rect to the given position after clamping the values.",41,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"resize","","Resizes this rect to the given size after clamping the values.",41,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"contains","","Checks whether this rect contains a given point.",41,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"raw","","Returns the underlying C Rect.",41,null],[11,"raw_mut","","",41,null],[11,"raw_slice","","",41,null],[11,"from_ll","","",41,{"inputs":[{"name":"sdl_rect"}],"output":{"name":"rect"}}],[11,"from_enclose_points","","Calculate a minimal rectangle enclosing a set of points. If a clipping rectangle is given, only points that are within it will be considered.",41,null],[11,"has_intersection","","Determine whether two rectangles intersect.",41,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"intersection","","Calculate the intersection of two rectangles. The bitwise AND operator `&` can also be used.",41,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"option"}}],[11,"union","","Calculate the union of two rectangles. The bitwise OR operator `|` can also be used.",41,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"rect"}}],[11,"intersect_line","","Calculates the intersection of a rectangle and a line segment and returns the points of their intersection.",41,{"inputs":[{"name":"self"},{"name":"point"},{"name":"point"}],"output":{"name":"option"}}],[11,"deref","","Example",41,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"deref_mut","","Example",41,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"into","","",41,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"into","","",41,null],[11,"from","","",41,{"inputs":[{"name":"sdl_rect"}],"output":{"name":"rect"}}],[11,"from","","",41,null],[11,"as_ref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"as_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"bitand","","",41,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"option"}}],[11,"bitor","","",41,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"rect"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"deref","","Example",42,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"deref_mut","","Example",42,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"as_ref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"as_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"from","","",42,{"inputs":[{"name":"sdl_point"}],"output":{"name":"point"}}],[11,"from","","",42,null],[11,"into","","",42,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"into","","",42,null],[11,"new","","Creates a new point from the given coordinates.",42,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"point"}}],[11,"from_ll","","",42,{"inputs":[{"name":"sdl_point"}],"output":{"name":"point"}}],[11,"raw_slice","","",42,null],[11,"raw","","",42,null],[11,"offset","","Returns a new point by shifting this point's coordinates by the given x and y values.",42,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"point"}}],[11,"scale","","Returns a new point by multiplying this point's coordinates by the given scale factor.",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"point"}}],[11,"x","","Returns the x-coordinate of this point.",42,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"y","","Returns the y-coordinate of this point.",42,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"add","","",42,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"neg","","",42,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"sub","","",42,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"mul","","",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"point"}}],[11,"div","","",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"point"}}],[0,"surface","sdl2","",null,null],[3,"Surface","sdl2::surface","",null,null],[3,"SurfaceRef","","An unsized Surface reference.",null,null],[11,"drop","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"as_ref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"as_ref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"as_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"surfaceref"}}],[11,"from_ll","","",43,null],[11,"new","","Creates a new surface using a pixel format.",43,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"pixelformatenum"}],"output":{"name":"result"}}],[11,"from_pixelmasks","","Creates a new surface using pixel masks.",43,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"pixelmasks"}],"output":{"name":"result"}}],[11,"from_data","","Creates a new surface from an existing buffer, using a pixel format.",43,null],[11,"from_data_pixelmasks","","Creates a new surface from an existing buffer, using pixel masks.",43,null],[11,"load_bmp_rw","","",43,{"inputs":[{"name":"rwops"}],"output":{"name":"result"}}],[11,"load_bmp","","",43,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_ll","","",44,null],[11,"from_ll_mut","","",44,null],[11,"raw","","",44,null],[11,"width","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pitch","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"size","","",44,null],[11,"rect","","",44,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"pixel_format","","",44,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"pixel_format_enum","","",44,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatenum"}}],[11,"with_lock","","Locks a surface so that the pixels can be directly accessed safely.",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_lock_mut","","Locks a surface so that the pixels can be directly accessed safely.",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"without_lock","","Returns the Surface's pixel buffer if the Surface doesn't require locking (e.g. it's a software surface).",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"without_lock_mut","","Returns the Surface's pixel buffer if the Surface doesn't require locking (e.g. it's a software surface).",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"must_lock","","Returns true if the Surface needs to be locked before accessing the Surface pixels.",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"save_bmp_rw","","",44,{"inputs":[{"name":"self"},{"name":"rwops"}],"output":{"name":"result"}}],[11,"save_bmp","","",44,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_palette","","",44,{"inputs":[{"name":"self"},{"name":"palette"}],"output":{"name":"result"}}],[11,"enable_RLE","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_RLE","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"set_color_key","","",44,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"color"}],"output":{"name":"result"}}],[11,"color_key","","The function will fail if the surface doesn't have color key enabled.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_color_mod","","",44,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"color_mod","","",44,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"fill_rect","","",44,{"inputs":[{"name":"self"},{"name":"option"},{"name":"color"}],"output":{"name":"result"}}],[11,"fill_rects","","",44,null],[11,"set_alpha_mod","","",44,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"alpha_mod","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_blend_mode","","The function will fail if the blend mode is not supported by SDL.",44,{"inputs":[{"name":"self"},{"name":"blendmode"}],"output":{"name":"result"}}],[11,"blend_mode","","",44,{"inputs":[{"name":"self"}],"output":{"name":"blendmode"}}],[11,"set_clip_rect","","Sets the clip rectangle for the surface.",44,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clip_rect","","Gets the clip rectangle for the surface.",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"convert","","Copies the surface into a new one that is optimized for blitting to a surface of a specified pixel format.",44,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"result"}}],[11,"blit","","Performs surface blitting (surface copying).",44,{"inputs":[{"name":"self"},{"name":"option"},{"name":"surfaceref"},{"name":"option"}],"output":{"name":"result"}}],[11,"lower_blit","","Performs low-level surface blitting.",44,{"inputs":[{"name":"self"},{"name":"option"},{"name":"surfaceref"},{"name":"option"}],"output":{"name":"result"}}],[11,"blit_scaled","","Performs scaled surface bliting (surface copying).",44,{"inputs":[{"name":"self"},{"name":"option"},{"name":"surfaceref"},{"name":"option"}],"output":{"name":"result"}}],[11,"lower_blit_scaled","","Performs low-level scaled surface blitting.",44,{"inputs":[{"name":"self"},{"name":"option"},{"name":"surfaceref"},{"name":"option"}],"output":{"name":"result"}}],[0,"pixels","sdl2","",null,null],[3,"Palette","sdl2::pixels","",null,null],[3,"PixelMasks","","",null,null],[12,"bpp","","Bits per pixel; usually 15, 16, or 32",45,null],[12,"rmask","","The red mask",45,null],[12,"gmask","","The green mask",45,null],[12,"bmask","","The blue mask",45,null],[12,"amask","","The alpha mask",45,null],[3,"PixelFormat","","",null,null],[4,"Color","","",null,null],[13,"RGB","","",46,null],[13,"RGBA","","",46,null],[4,"PixelFormatEnum","","",null,null],[13,"Unknown","","",47,null],[13,"Index1LSB","","",47,null],[13,"Index1MSB","","",47,null],[13,"Index4LSB","","",47,null],[13,"Index4MSB","","",47,null],[13,"Index8","","",47,null],[13,"RGB332","","",47,null],[13,"RGB444","","",47,null],[13,"RGB555","","",47,null],[13,"BGR555","","",47,null],[13,"ARGB4444","","",47,null],[13,"RGBA4444","","",47,null],[13,"ABGR4444","","",47,null],[13,"BGRA4444","","",47,null],[13,"ARGB1555","","",47,null],[13,"RGBA5551","","",47,null],[13,"ABGR1555","","",47,null],[13,"BGRA5551","","",47,null],[13,"RGB565","","",47,null],[13,"BGR565","","",47,null],[13,"RGB24","","",47,null],[13,"BGR24","","",47,null],[13,"RGB888","","",47,null],[13,"RGBX8888","","",47,null],[13,"BGR888","","",47,null],[13,"BGRX8888","","",47,null],[13,"ARGB8888","","",47,null],[13,"RGBA8888","","",47,null],[13,"ABGR8888","","",47,null],[13,"BGRA8888","","",47,null],[13,"ARGB2101010","","",47,null],[13,"YV12","","",47,null],[13,"IYUV","","",47,null],[13,"YUY2","","",47,null],[13,"UYVY","","",47,null],[13,"YVYU","","",47,null],[11,"new","","Creates a new, uninitialized palette",48,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"with_colors","","Creates a palette from the provided colors",48,null],[11,"len","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"raw","","",48,null],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_u32","","",46,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"u32"}}],[11,"from_u32","","",46,{"inputs":[{"name":"pixelformat"},{"name":"u32"}],"output":{"name":"color"}}],[11,"rgb","","",46,null],[11,"rgba","","",46,null],[11,"into","","",46,{"inputs":[{"name":"self"}],"output":{"name":"sdl_color"}}],[11,"from","","",46,{"inputs":[{"name":"sdl_color"}],"output":{"name":"color"}}],[11,"rand","","",46,{"inputs":[{"name":"r"}],"output":{"name":"color"}}],[11,"raw","","",49,null],[11,"from_ll","","",49,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatenum"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"pixelformatenum"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_masks","","",47,{"inputs":[{"name":"pixelmasks"}],"output":{"name":"pixelformatenum"}}],[11,"into_masks","","",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"byte_size_from_pitch_and_height","","Calculates the total byte size of an image buffer, given its pitch and height.",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"byte_size_of_pixels","","",47,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"byte_size_per_pixel","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into","","",47,{"inputs":[{"name":"self"}],"output":{"name":"sdl_pixelformatenum"}}],[11,"from","","",47,{"inputs":[{"name":"pixelformat"}],"output":{"name":"pixelformatenum"}}],[11,"from_i64","","",47,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",47,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[0,"video","sdl2","",null,null],[3,"DisplayMode","sdl2::video","",null,null],[12,"format","","",50,null],[12,"w","","",50,null],[12,"h","","",50,null],[12,"refresh_rate","","",50,null],[3,"GLContext","","",null,null],[3,"Window","","",null,null],[3,"WindowRef","","An unsized Window reference.",null,null],[3,"WindowBuilder","","The type that allows you to build windows.",null,null],[3,"DriverIterator","","",null,null],[4,"GLProfile","","",null,null],[13,"Core","","OpenGL core profile - deprecated functions are disabled",51,null],[13,"Compatibility","","OpenGL compatibility profile - deprecated functions are allowed",51,null],[13,"GLES","","OpenGL ES profile - only a subset of the base OpenGL functionality is available",51,null],[13,"Unknown","","Unknown profile - SDL will tend to return 0 if you ask when no particular profile has been defined or requested.",51,null],[4,"FullscreenType","","",null,null],[13,"Off","","",52,null],[13,"True","","",52,null],[13,"Desktop","","",52,null],[4,"WindowPos","","",null,null],[13,"Undefined","","",53,null],[13,"Centered","","",53,null],[13,"Positioned","","",53,null],[4,"WindowBuildError","","",null,null],[13,"HeightOverflows","","",54,null],[13,"WidthOverflows","","",54,null],[13,"InvalidTitle","","",54,null],[13,"SdlError","","",54,null],[5,"drivers","","Gets an iterator of all video drivers compiled into the SDL2 library.",null,{"inputs":[],"output":{"name":"driveriterator"}}],[0,"gl_attr","","OpenGL context getters and setters",null,null],[3,"GLAttr","sdl2::video::gl_attr","OpenGL context getters and setters. Obtain with `VideoSubsystem::gl_attr()`.",null,null],[3,"ContextFlagsBuilder","","The type that allows you to build a OpenGL context configuration.",null,null],[3,"ContextFlags","","",null,null],[11,"gl_attr","sdl2","Obtains access to the OpenGL window attributes.",2,{"inputs":[{"name":"self"}],"output":{"name":"glattr"}}],[11,"set_red_size","sdl2::video::gl_attr","**Sets** the attribute: the minimum number of bits for the red channel of the color buffer; defaults to 3",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"red_size","","**Gets** the attribute: the minimum number of bits for the red channel of the color buffer; defaults to 3",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_green_size","","**Sets** the attribute: the minimum number of bits for the green channel of the color buffer; defaults to 3",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"green_size","","**Gets** the attribute: the minimum number of bits for the green channel of the color buffer; defaults to 3",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_blue_size","","**Sets** the attribute: the minimum number of bits for the blue channel of the color buffer; defaults to 2",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"blue_size","","**Gets** the attribute: the minimum number of bits for the blue channel of the color buffer; defaults to 2",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_alpha_size","","**Sets** the attribute: the minimum number of bits for the alpha channel of the color buffer; defaults to 0",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"alpha_size","","**Gets** the attribute: the minimum number of bits for the alpha channel of the color buffer; defaults to 0",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_buffer_size","","**Sets** the attribute: the minimum number of bits for frame buffer size; defaults to 0",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"buffer_size","","**Gets** the attribute: the minimum number of bits for frame buffer size; defaults to 0",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_double_buffer","","**Sets** the attribute: whether the output is single or double buffered; defaults to double buffering on",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"double_buffer","","**Gets** the attribute: whether the output is single or double buffered; defaults to double buffering on",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_depth_size","","**Sets** the attribute: the minimum number of bits in the depth buffer; defaults to 16",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"depth_size","","**Gets** the attribute: the minimum number of bits in the depth buffer; defaults to 16",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_stencil_size","","**Sets** the attribute: the minimum number of bits in the stencil buffer; defaults to 0",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"stencil_size","","**Gets** the attribute: the minimum number of bits in the stencil buffer; defaults to 0",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_accum_red_size","","**Sets** the attribute: the minimum number of bits for the red channel of the accumulation buffer; defaults to 0",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"accum_red_size","","**Gets** the attribute: the minimum number of bits for the red channel of the accumulation buffer; defaults to 0",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_accum_green_size","","**Sets** the attribute: the minimum number of bits for the green channel of the accumulation buffer; defaults to 0",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"accum_green_size","","**Gets** the attribute: the minimum number of bits for the green channel of the accumulation buffer; defaults to 0",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_accum_blue_size","","**Sets** the attribute: the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"accum_blue_size","","**Gets** the attribute: the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_accum_alpha_size","","**Sets** the attribute: the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"accum_alpha_size","","**Gets** the attribute: the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_stereo","","**Sets** the attribute: whether the output is stereo 3D; defaults to off",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"stereo","","**Gets** the attribute: whether the output is stereo 3D; defaults to off",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_multisample_buffers","","**Sets** the attribute: the number of buffers used for multisample anti-aliasing; defaults to 0",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"multisample_buffers","","**Gets** the attribute: the number of buffers used for multisample anti-aliasing; defaults to 0",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_multisample_samples","","**Sets** the attribute: the number of samples used around the current pixel used for multisample anti-aliasing; defaults to 0",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"multisample_samples","","**Gets** the attribute: the number of samples used around the current pixel used for multisample anti-aliasing; defaults to 0",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_accelerated_visual","","**Sets** the attribute: whether to require hardware acceleration; false to force software rendering; defaults to allow either",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"accelerated_visual","","**Gets** the attribute: whether to require hardware acceleration; false to force software rendering; defaults to allow either",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_context_major_version","","**Sets** the attribute: OpenGL context major version",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"context_major_version","","**Gets** the attribute: OpenGL context major version",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_context_minor_version","","**Sets** the attribute: OpenGL context minor version",55,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"context_minor_version","","**Gets** the attribute: OpenGL context minor version",55,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_context_profile","","**Sets** the attribute: type of GL context (Core, Compatibility, ES)",55,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":null}],[11,"context_profile","","**Gets** the attribute: type of GL context (Core, Compatibility, ES)",55,{"inputs":[{"name":"self"}],"output":{"name":"glprofile"}}],[11,"set_share_with_current_context","","**Sets** the attribute: OpenGL context sharing; defaults to false",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"share_with_current_context","","**Gets** the attribute: OpenGL context sharing; defaults to false",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_framebuffer_srgb_compatible","","**Sets** the attribute: requests sRGB capable visual; defaults to false (>= SDL 2.0.1)",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"framebuffer_srgb_compatible","","**Gets** the attribute: requests sRGB capable visual; defaults to false (>= SDL 2.0.1)",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_context_version","","**Sets** the OpenGL context major and minor versions.",55,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":null}],[11,"context_version","","**Gets** the OpenGL context major and minor versions as a tuple.",55,null],[11,"set","","Finishes the builder and applies the GL context flags to the GL context.",56,{"inputs":[{"name":"self"}],"output":null}],[11,"debug","","Sets the context into \"debug\" mode.",56,{"inputs":[{"name":"self"}],"output":{"name":"contextflagsbuilder"}}],[11,"forward_compatible","","Sets the context into \"forward compatible\" mode.",56,{"inputs":[{"name":"self"}],"output":{"name":"contextflagsbuilder"}}],[11,"robust_access","","",56,{"inputs":[{"name":"self"}],"output":{"name":"contextflagsbuilder"}}],[11,"reset_isolation","","",56,{"inputs":[{"name":"self"}],"output":{"name":"contextflagsbuilder"}}],[11,"has_debug","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_forward_compatible","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_robust_access","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_reset_isolation","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_context_flags","","**Sets** any combination of OpenGL context configuration flags.",55,{"inputs":[{"name":"self"}],"output":{"name":"contextflagsbuilder"}}],[11,"context_flags","","**Gets** the applied OpenGL context configuration flags.",55,{"inputs":[{"name":"self"}],"output":{"name":"contextflags"}}],[11,"clone","sdl2::video","",51,{"inputs":[{"name":"self"}],"output":{"name":"glprofile"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"displaymode"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"displaymode"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"displaymode"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",50,{"inputs":[{"name":"pixelformatenum"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"displaymode"}}],[11,"from_ll","","",50,{"inputs":[{"name":"sdl_displaymode"}],"output":{"name":"displaymode"}}],[11,"to_ll","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sdl_displaymode"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"fullscreentype"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"fullscreentype"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_window_flags","","",52,{"inputs":[{"name":"u32"}],"output":{"name":"fullscreentype"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"windowpos"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"windowpos"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"windowpos"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"is_current","","Returns true if the OpenGL context is the current one in the thread.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw","","",58,{"inputs":[{"name":"self"}],"output":{"name":"sdl_glcontext"}}],[11,"window","sdl2","Initializes a new `WindowBuilder`; a convenience method that calls `WindowBuilder::new()`.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"current_video_driver","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"num_video_displays","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"display_name","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"display_bounds","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"num_display_modes","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"display_mode","","",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"desktop_display_mode","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"current_display_mode","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"closest_display_mode","","",2,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"displaymode"}],"output":{"name":"result"}}],[11,"display_dpi","","Return a triplet `(ddpi, hdpi, vdpi)` containing the diagonal, horizontal and vertical dots/pixels-per-inch of a display",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_screen_saver_enabled","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_screen_saver","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"disable_screen_saver","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"gl_load_library_default","","Loads the default OpenGL library.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"gl_load_library","","Loads the OpenGL library using a platform-dependent OpenGL library name (usually a file path).",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"gl_unload_library","","Unloads the current OpenGL library.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"gl_get_proc_address","","Gets the pointer to the named OpenGL function.",2,null],[11,"gl_extension_supported","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gl_get_current_window_id","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"gl_release_current_context","","Releases the thread's current OpenGL context, i.e. sets the current OpenGL context to nothing.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"gl_set_swap_interval","","",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"gl_get_swap_interval","","",2,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"drop","sdl2::video","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new `WindowBuilder`.",60,{"inputs":[{"name":"videosubsystem"},{"name":"str"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",60,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"window_flags","","Gets the underlying window flags.",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_window_flags","","Sets the underlying window flags. This will effectively undo any previous build operations, excluding window size and position.",60,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"position","","Sets the window position.",60,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[11,"position_centered","","Centers the window.",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"fullscreen","","Sets the window to fullscreen.",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"fullscreen_desktop","","Sets the window to fullscreen at the current desktop resolution.",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"opengl","","Sets the window to be usable with an OpenGL context",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"hidden","","Hides the window.",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"borderless","","Removes the window decoration.",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"resizable","","Sets the window to be resizable.",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"minimized","","Minimizes the window.",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"maximized","","Maximizes the window.",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"input_grabbed","","Sets the window to have grabbed input focus.",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"allow_highdpi","","Creates the window in high-DPI mode if supported (>= SDL 2.0.1)",60,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"raw","","",59,null],[11,"from_ll","","",59,null],[11,"subsystem","","",59,{"inputs":[{"name":"self"}],"output":{"name":"videosubsystem"}}],[11,"renderer","","Initializes a new `RendererBuilder`; a convenience method that calls `RendererBuilder::new()`.",59,{"inputs":[{"name":"self"}],"output":{"name":"rendererbuilder"}}],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"windowref"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"windowref"}}],[11,"raw","","",61,null],[11,"from_ll","","",61,null],[11,"from_ll_mut","","",61,null],[11,"id","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"gl_create_context","","",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"gl_set_context_to_current","","Set the window's OpenGL context to the current context on the thread.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"gl_make_current","","",61,{"inputs":[{"name":"self"},{"name":"glcontext"}],"output":{"name":"result"}}],[11,"gl_swap_window","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"display_index","","",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_display_mode","","",61,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"display_mode","","",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"window_pixel_format","","",61,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatenum"}}],[11,"window_flags","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_title","","",61,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"title","","",61,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_icon","","",61,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"set_position","","",61,{"inputs":[{"name":"self"},{"name":"windowpos"},{"name":"windowpos"}],"output":null}],[11,"position","","",61,null],[11,"set_size","","",61,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"size","","",61,null],[11,"drawable_size","","",61,null],[11,"set_minimum_size","","",61,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"minimum_size","","",61,null],[11,"set_maximum_size","","",61,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"maximum_size","","",61,null],[11,"set_bordered","","",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"show","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"hide","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"raise","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"maximize","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"minimize","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"restore","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"fullscreen_state","","",61,{"inputs":[{"name":"self"}],"output":{"name":"fullscreentype"}}],[11,"set_fullscreen","","",61,{"inputs":[{"name":"self"},{"name":"fullscreentype"}],"output":{"name":"result"}}],[11,"surface","","",61,{"inputs":[{"name":"self"},{"name":"eventpump"}],"output":{"name":"result"}}],[11,"surface_mut","","",61,{"inputs":[{"name":"self"},{"name":"eventpump"}],"output":{"name":"result"}}],[11,"update_surface","","",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"update_surface_rects","","",61,null],[11,"set_grab","","",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"grab","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_brightness","","",61,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"brightness","","",61,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"set_gamma_ramp","","",61,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"gamma_ramp","","",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"driveriterator"}}],[11,"next","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[0,"timer","sdl2","",null,null],[3,"Timer","sdl2::timer","",null,null],[6,"TimerCallback","","",null,null],[11,"add_timer","sdl2","Constructs a new timer using the boxed closure `callback`.",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"timercallback"}],"output":{"name":"timer"}}],[11,"ticks","","Gets the number of milliseconds elapsed since the timer subsystem was initialized.",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"delay","","Sleeps the current thread for the specified amount of milliseconds.",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"performance_counter","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"performance_frequency","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"into_inner","sdl2::timer","Returns the closure as a trait-object and cancels the timer by consuming it...",64,{"inputs":[{"name":"self"}],"output":{"name":"timercallback"}}],[11,"drop","","",64,{"inputs":[{"name":"self"}],"output":null}],[0,"render","sdl2","2D accelerated rendering",null,null],[3,"RendererInfo","sdl2::render","A structure that contains information on the capabilities of a render driver or the current render context.",null,null],[12,"name","","",65,null],[12,"flags","","",65,null],[12,"texture_formats","","",65,null],[12,"max_texture_width","","",65,null],[12,"max_texture_height","","",65,null],[3,"Renderer","","2D rendering context",null,null],[3,"RendererBuilder","","The type that allows you to build Window-based renderers.",null,null],[3,"RenderTarget","","A handle for getting/setting the render target of the render context.",null,null],[3,"TextureQuery","","",null,null],[12,"format","","",66,null],[12,"access","","",66,null],[12,"width","","",66,null],[12,"height","","",66,null],[3,"Texture","","A texture for a rendering context.",null,null],[3,"DriverIterator","","",null,null],[4,"TextureAccess","","",null,null],[13,"Static","","",67,null],[13,"Streaming","","",67,null],[13,"Target","","",67,null],[4,"BlendMode","","",null,null],[13,"None","","",68,null],[13,"Blend","","",68,null],[13,"Add","","",68,null],[13,"Mod","","",68,null],[4,"RendererParent","","",null,null],[13,"Surface","","",69,null],[13,"Window","","",69,null],[4,"TextureValueError","","",null,null],[13,"WidthOverflows","","",70,null],[13,"HeightOverflows","","",70,null],[13,"WidthMustBeMultipleOfTwoForFormat","","",70,null],[13,"SdlError","","",70,null],[4,"UpdateTextureError","","",null,null],[13,"PitchOverflows","","",71,null],[13,"PitchMustBeMultipleOfTwoForFormat","","",71,null],[13,"XMustBeMultipleOfTwoForFormat","","",71,null],[13,"YMustBeMultipleOfTwoForFormat","","",71,null],[13,"WidthMustBeMultipleOfTwoForFormat","","",71,null],[13,"HeightMustBeMultipleOfTwoForFormat","","",71,null],[13,"SdlError","","",71,null],[4,"UpdateTextureYUVError","","",null,null],[13,"PitchOverflows","","",72,null],[12,"plane","sdl2::render::UpdateTextureYUVError","",72,null],[12,"value","","",72,null],[13,"InvalidPlaneLength","sdl2::render","",72,null],[12,"plane","sdl2::render::UpdateTextureYUVError","",72,null],[12,"length","","",72,null],[12,"pitch","","",72,null],[12,"height","","",72,null],[13,"XMustBeMultipleOfTwoForFormat","sdl2::render","",72,null],[13,"YMustBeMultipleOfTwoForFormat","","",72,null],[13,"WidthMustBeMultipleOfTwoForFormat","","",72,null],[13,"HeightMustBeMultipleOfTwoForFormat","","",72,null],[13,"RectNotInsideTexture","","",72,null],[13,"SdlError","","",72,null],[5,"drivers","","Gets an iterator of all render drivers compiled into the SDL2 library.",null,{"inputs":[],"output":{"name":"driveriterator"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"textureaccess"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"textureaccess"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",67,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",67,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"rendererinfo"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"rendererinfo"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"rendererinfo"}],"output":{"name":"bool"}}],[11,"hash","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"blendmode"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"blendmode"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",68,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",68,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_ll","","",65,{"inputs":[{"name":"sdl_rendererinfo"}],"output":{"name":"rendererinfo"}}],[11,"drop","","",73,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Initializes a new `RendererBuilder`.",74,{"inputs":[{"name":"window"}],"output":{"name":"rendererbuilder"}}],[11,"build","","Builds the renderer.",74,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"index","","Sets the index of the rendering driver to initialize. If you desire the first rendering driver to support the flags provided, or if you're translating code from C which passes -1 for the index, **do not** invoke the `index` method.",74,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"rendererbuilder"}}],[11,"software","","Set the renderer to a software fallback. This flag is accumulative, and may be specified with other flags.",74,{"inputs":[{"name":"self"}],"output":{"name":"rendererbuilder"}}],[11,"accelerated","","Set the renderer to use hardware acceleration. This flag is accumulative, and may be specified with other flags.",74,{"inputs":[{"name":"self"}],"output":{"name":"rendererbuilder"}}],[11,"present_vsync","","Synchronize renderer `present` method calls with the refresh rate. This flag is accumulative, and may be specified with other flags.",74,{"inputs":[{"name":"self"}],"output":{"name":"rendererbuilder"}}],[11,"target_texture","","Set the renderer to support rendering to a texture. This flag is accumulative, and may be specified with other flags.",74,{"inputs":[{"name":"self"}],"output":{"name":"rendererbuilder"}}],[11,"from_surface","","Creates a 2D software rendering context for a surface.",73,{"inputs":[{"name":"surface"}],"output":{"name":"result"}}],[11,"info","","Gets information about the rendering context.",73,{"inputs":[{"name":"self"}],"output":{"name":"rendererinfo"}}],[11,"window","","Gets the associated window reference of the Renderer, if there is one.",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"window_mut","","Gets the associated window reference of the Renderer, if there is one.",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"surface","","Gets the associated surface reference of the Renderer, if there is one.",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"surface_mut","","Gets the associated surface reference of the Renderer, if there is one.",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_window","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_surface","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"raw","","Unwraps the window or surface the rendering context was created from.",73,null],[11,"from_ll","","",73,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",70,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"create_texture","","Creates a texture for a rendering context.",73,{"inputs":[{"name":"self"},{"name":"pixelformatenum"},{"name":"textureaccess"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"create_texture_static","","Shorthand for `create_texture(format, TextureAccess::Static, size)`",73,{"inputs":[{"name":"self"},{"name":"pixelformatenum"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"create_texture_streaming","","Shorthand for `create_texture(format, TextureAccess::Streaming, size)`",73,{"inputs":[{"name":"self"},{"name":"pixelformatenum"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"create_texture_target","","Shorthand for `create_texture(format, TextureAccess::Target, size)`",73,{"inputs":[{"name":"self"},{"name":"pixelformatenum"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"create_texture_from_surface","","Creates a texture from an existing surface. # Remarks The access hint for the created texture is `TextureAccess::Static`.",73,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"render_target_supported","","Determine whether a window supports the use of render targets.",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"render_target","","Gets the render target handle.",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_draw_color","","Sets the color used for drawing operations (Rect, Line and Clear).",73,{"inputs":[{"name":"self"},{"name":"color"}],"output":null}],[11,"draw_color","","Gets the color used for drawing operations (Rect, Line and Clear).",73,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"set_blend_mode","","Sets the blend mode used for drawing operations (Fill and Line).",73,{"inputs":[{"name":"self"},{"name":"blendmode"}],"output":null}],[11,"blend_mode","","Gets the blend mode used for drawing operations.",73,{"inputs":[{"name":"self"}],"output":{"name":"blendmode"}}],[11,"clear","","Clears the current rendering target with the drawing color.",73,{"inputs":[{"name":"self"}],"output":null}],[11,"present","","Updates the screen with any rendering performed since the previous call.",73,{"inputs":[{"name":"self"}],"output":null}],[11,"output_size","","Gets the output size of a rendering context.",73,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_logical_size","","Sets a device independent resolution for rendering.",73,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"logical_size","","Gets device independent resolution for rendering.",73,null],[11,"set_viewport","","Sets the drawing area for rendering on the current target.",73,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"viewport","","Gets the drawing area for the current target.",73,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"set_clip_rect","","Sets the clip rectangle for rendering on the specified target.",73,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"clip_rect","","Gets the clip rectangle for the current target.",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_scale","","Sets the drawing scale for rendering on the current target.",73,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"result"}}],[11,"scale","","Gets the drawing scale for the current target.",73,null],[11,"draw_point","","Draws a point on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",73,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"result"}}],[11,"draw_points","","Draws multiple points on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",73,null],[11,"draw_line","","Draws a line on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",73,{"inputs":[{"name":"self"},{"name":"point"},{"name":"point"}],"output":{"name":"result"}}],[11,"draw_lines","","Draws a series of connected lines on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",73,null],[11,"draw_rect","","Draws a rectangle on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",73,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"result"}}],[11,"draw_rects","","Draws some number of rectangles on the current rendering target. Errors if drawing fails for any reason (e.g. driver failure)",73,null],[11,"fill_rect","","Fills a rectangle on the current rendering target with the drawing color. Passing None will fill the entire rendering target. Errors if drawing fails for any reason (e.g. driver failure)",73,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"fill_rects","","Fills some number of rectangles on the current rendering target with the drawing color. Errors if drawing fails for any reason (e.g. driver failure)",73,null],[11,"copy","","Copies a portion of the texture to the current rendering target.",73,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"copy_ex","","Copies a portion of the texture to the current rendering target, optionally rotating it by angle around the given center and also flipping it top-bottom and/or left-right.",73,{"inputs":[{"name":"self"},{"name":"texture"},{"name":"option"},{"name":"option"},{"name":"f64"},{"name":"option"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[11,"read_pixels","","Reads pixels from the current rendering target. # Remarks WARNING: This is a very slow operation, and should not be used frequently.",73,{"inputs":[{"name":"self"},{"name":"option"},{"name":"pixelformatenum"}],"output":{"name":"result"}}],[11,"reset","","Resets the render target to the default render target.",75,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set","","Sets the render target to the provided texture. The texture must be created with the texture access: `sdl2::render::TextureAccess::Target`.",75,{"inputs":[{"name":"self"},{"name":"texture"}],"output":{"name":"result"}}],[11,"create_and_set","","Creates a new texture and sets it as the render target.",75,{"inputs":[{"name":"self"},{"name":"pixelformatenum"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"texturequery"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"texturequery"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"texturequery"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",71,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",72,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"query","","Queries the attributes of the texture.",76,{"inputs":[{"name":"self"}],"output":{"name":"texturequery"}}],[11,"set_color_mod","","Sets an additional color value multiplied into render copy operations.",76,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":null}],[11,"color_mod","","Gets the additional color value multiplied into render copy operations.",76,null],[11,"set_alpha_mod","","Sets an additional alpha value multiplied into render copy operations.",76,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"alpha_mod","","Gets the additional alpha value multiplied into render copy operations.",76,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"set_blend_mode","","Sets the blend mode for a texture, used by `Renderer::copy()`.",76,{"inputs":[{"name":"self"},{"name":"blendmode"}],"output":null}],[11,"blend_mode","","Gets the blend mode used for texture copy operations.",76,{"inputs":[{"name":"self"}],"output":{"name":"blendmode"}}],[11,"update","","Updates the given texture rectangle with new pixel data.",76,null],[11,"update_yuv","","Updates a rectangle within a planar YV12 or IYUV texture with new pixel data.",76,null],[11,"with_lock","","Locks the texture for **write-only** pixel access. The texture must have been created with streaming access.",76,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"gl_bind_texture","","Binds an OpenGL/ES/ES2 texture to the current context for use with when rendering OpenGL primitives directly.",76,null],[11,"gl_unbind_texture","","Unbinds an OpenGL/ES/ES2 texture from the current context.",76,{"inputs":[{"name":"self"}],"output":null}],[11,"gl_with_bind","","Binds and unbinds an OpenGL/ES/ES2 texture from the current context.",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"from_ll","","",76,null],[11,"raw","","",76,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"driveriterator"}}],[11,"next","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[0,"rwops","sdl2","",null,null],[3,"RWops","sdl2::rwops","A structure that provides an abstract interface to stream I/O.",null,null],[11,"raw","","",78,null],[11,"from_ll","","",78,null],[11,"from_file","","Creates an SDL file stream.",78,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_bytes","","Prepares a read-only memory buffer for use with `RWops`.",78,null],[11,"from_read","","Reads a `Read` object into a buffer and then passes it to `RWops.from_bytes`.",78,{"inputs":[{"name":"t"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_bytes_mut","","Prepares a read-write memory buffer for use with `RWops`.",78,null],[11,"len","","Gets the stream's total size in bytes.",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",78,null],[11,"write","","",78,null],[11,"flush","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"seek","","",78,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"clone","sdl2","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"audio","","Initializes the audio subsystem.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"event","","Initializes the event subsystem.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"joystick","","Initializes the joystick subsystem.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"haptic","","Initializes the haptic subsystem.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"game_controller","","Initializes the game controller subsystem.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"timer","","Initializes the timer subsystem.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"video","","Initializes the video subsystem.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"event_pump","","Obtains the SDL event pump.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"audiosubsystem"}}],[11,"sdl","","Obtain an SDL context.",79,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"gamecontrollersubsystem"}}],[11,"sdl","","Obtain an SDL context.",21,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"hapticsubsystem"}}],[11,"sdl","","Obtain an SDL context.",80,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"joysticksubsystem"}}],[11,"sdl","","Obtain an SDL context.",14,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"videosubsystem"}}],[11,"sdl","","Obtain an SDL context.",2,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"timersubsystem"}}],[11,"sdl","","Obtain an SDL context.",63,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"eventsubsystem"}}],[11,"sdl","","Obtain an SDL context.",7,{"inputs":[{"name":"self"}],"output":{"name":"sdl"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[0,"audio","","Audio Functions",null,null],[3,"DriverIterator","sdl2::audio","",null,null],[3,"AudioSpecWAV","","",null,null],[12,"freq","","",81,null],[12,"format","","",81,null],[12,"channels","","",81,null],[3,"AudioSpecDesired","","",null,null],[12,"freq","","DSP frequency (samples per second). Set to None for the device's fallback frequency.",82,null],[12,"channels","","Number of separate audio channels. Set to None for the device's fallback number of channels.",82,null],[12,"samples","","Audio buffer size in samples (power of 2). Set to None for the device's fallback sample size.",82,null],[3,"AudioSpec","","",null,null],[12,"freq","","",83,null],[12,"format","","",83,null],[12,"channels","","",83,null],[12,"silence","","",83,null],[12,"samples","","",83,null],[12,"size","","",83,null],[3,"AudioQueue","","Wraps SDL_AudioDeviceID and owns the callback data used by the audio device.",null,null],[3,"AudioDevice","","Wraps SDL_AudioDeviceID and owns the callback data used by the audio device.",null,null],[3,"AudioDeviceLockGuard","","Similar to `std::sync::MutexGuard`, but for use with `AudioDevice::lock()`.",null,null],[3,"AudioCVT","","",null,null],[4,"AudioFormat","","",null,null],[13,"U8","","Unsigned 8-bit samples",84,null],[13,"S8","","Signed 8-bit samples",84,null],[13,"U16LSB","","Unsigned 16-bit samples, little-endian",84,null],[13,"U16MSB","","Unsigned 16-bit samples, big-endian",84,null],[13,"S16LSB","","Signed 16-bit samples, little-endian",84,null],[13,"S16MSB","","Signed 16-bit samples, big-endian",84,null],[13,"S32LSB","","Signed 32-bit samples, little-endian",84,null],[13,"S32MSB","","Signed 32-bit samples, big-endian",84,null],[13,"F32LSB","","32-bit floating point samples, little-endian",84,null],[13,"F32MSB","","32-bit floating point samples, big-endian",84,null],[4,"AudioStatus","","",null,null],[13,"Stopped","","",85,null],[13,"Playing","","",85,null],[13,"Paused","","",85,null],[5,"drivers","","Gets an iterator of all audio drivers compiled into the SDL2 library.",null,{"inputs":[],"output":{"name":"driveriterator"}}],[8,"AudioCallback","","",null,null],[16,"Channel","","",86,null],[10,"callback","","",86,null],[8,"AudioFormatNum","","A phantom type for retreiving the SDL_AudioFormat of a given generic type. All format types are returned as native-endian.",null,null],[10,"audio_format","","",87,{"inputs":[],"output":{"name":"audioformat"}}],[10,"zero","","",87,{"inputs":[],"output":{"name":"self"}}],[11,"open_playback","sdl2","Opens a new audio device given the desired parameters and callback.",79,{"inputs":[{"name":"self"},{"name":"option"},{"name":"audiospecdesired"},{"name":"f"}],"output":{"name":"result"}}],[11,"open_queue","","Opens a new audio device which uses queueing rather than older callback method.",79,{"inputs":[{"name":"self"},{"name":"option"},{"name":"audiospecdesired"}],"output":{"name":"result"}}],[11,"current_audio_driver","","",79,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"num_audio_playback_devices","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"audio_playback_device_name","","",79,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"clone","sdl2::audio","",84,{"inputs":[{"name":"self"}],"output":{"name":"audioformat"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"audioformat"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"u16_sys","","Unsigned 16-bit samples, native endian",84,{"inputs":[],"output":{"name":"audioformat"}}],[11,"s16_sys","","Signed 16-bit samples, native endian",84,{"inputs":[],"output":{"name":"audioformat"}}],[11,"s32_sys","","Signed 32-bit samples, native endian",84,{"inputs":[],"output":{"name":"audioformat"}}],[11,"f32_sys","","32-bit floating point samples, native endian",84,{"inputs":[],"output":{"name":"audioformat"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"audiostatus"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"audiostatus"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",85,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",85,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"driveriterator"}}],[11,"next","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"load_wav","","Loads a WAVE from the file path.",81,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"load_wav_rw","","Loads a WAVE from the data source.",81,{"inputs":[{"name":"rwops"}],"output":{"name":"result"}}],[11,"buffer","","",81,null],[11,"drop","","",81,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"audiospecdesired"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"audiospec"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"audiospec"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"audiospec"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open_queue","","Opens a new audio device given the desired parameters and callback.",89,{"inputs":[{"name":"audiosubsystem"},{"name":"option"},{"name":"audiospecdesired"}],"output":{"name":"result"}}],[11,"subsystem","","",89,{"inputs":[{"name":"self"}],"output":{"name":"audiosubsystem"}}],[11,"spec","","",89,{"inputs":[{"name":"self"}],"output":{"name":"audiospec"}}],[11,"status","","",89,{"inputs":[{"name":"self"}],"output":{"name":"audiostatus"}}],[11,"pause","","Pauses playback of the audio device.",89,{"inputs":[{"name":"self"}],"output":null}],[11,"resume","","Starts playback of the audio device.",89,{"inputs":[{"name":"self"}],"output":null}],[11,"queue","","Adds data to the audio queue.",89,null],[11,"size","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear","","Clears all data from the current audio queue.",89,{"inputs":[{"name":"self"}],"output":null}],[11,"open_playback","","Opens a new audio device given the desired parameters and callback.",90,{"inputs":[{"name":"audiosubsystem"},{"name":"option"},{"name":"audiospecdesired"},{"name":"f"}],"output":{"name":"result"}}],[11,"subsystem","","",90,{"inputs":[{"name":"self"}],"output":{"name":"audiosubsystem"}}],[11,"spec","","",90,{"inputs":[{"name":"self"}],"output":{"name":"audiospec"}}],[11,"status","","",90,{"inputs":[{"name":"self"}],"output":{"name":"audiostatus"}}],[11,"pause","","Pauses playback of the audio device.",90,{"inputs":[{"name":"self"}],"output":null}],[11,"resume","","Starts playback of the audio device.",90,{"inputs":[{"name":"self"}],"output":null}],[11,"lock","","Locks the audio device using `SDL_LockAudioDevice`.",90,{"inputs":[{"name":"self"}],"output":{"name":"audiodevicelockguard"}}],[11,"close_and_get_callback","","Closes the audio device and saves the callback data from being dropped.",90,{"inputs":[{"name":"self"}],"output":{"name":"cb"}}],[11,"deref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"cb"}}],[11,"deref_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"cb"}}],[11,"drop","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"audiocvt"}}],[11,"new","","",92,{"inputs":[{"name":"audioformat"},{"name":"u8"},{"name":"i32"},{"name":"audioformat"},{"name":"u8"},{"name":"i32"}],"output":{"name":"result"}}],[11,"convert","","Convert audio data to a desired audio format.",92,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"is_conversion_needed","","Checks if any conversion is needed. i.e. if the buffer that goes into `convert()` is unchanged from the result.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","Gets the buffer capacity that can contain both the original and converted data.",92,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[0,"version","sdl2","Querying SDL Version",null,null],[3,"Version","sdl2::version","A structure that contains information about the version of SDL in use.",null,null],[12,"major","","major version",93,null],[12,"minor","","minor version",93,null],[12,"patch","","update version (patchlevel)",93,null],[5,"version","","Get the version of SDL that is linked against your program.",null,{"inputs":[],"output":{"name":"version"}}],[5,"revision","","Get the code revision of SDL that is linked against your program.",null,{"inputs":[],"output":{"name":"string"}}],[5,"revision_number","","Get the revision number of SDL that is linked against your program.",null,{"inputs":[],"output":{"name":"i32"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ll","","Convert a raw *SDL_version to Version.",93,{"inputs":[{"name":"sdl_version"}],"output":{"name":"version"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"messagebox","sdl2","",null,null],[3,"MessageBoxFlag","sdl2::messagebox","",null,null],[3,"MessageBoxButtonFlag","","",null,null],[3,"MessageBoxColorScheme","","",null,null],[12,"background","","",94,null],[12,"text","","",94,null],[12,"button_border","","",94,null],[12,"button_background","","",94,null],[12,"button_selected","","",94,null],[3,"ButtonData","","button_id is the integer that will be returned by show_message_box. It is not sed by SDL2, and should only be used to know which button has been triggered",null,null],[12,"flags","","",95,null],[12,"button_id","","",95,null],[12,"text","","",95,null],[4,"ClickedButton","","",null,null],[13,"CloseButton","","",96,null],[13,"CustomButton","","",96,null],[4,"ShowMessageError","","",null,null],[13,"InvalidTitle","","",97,null],[13,"InvalidMessage","","",97,null],[13,"InvalidButton","","Second argument of the tuple (i32) corresponds to the first button_id having an error",97,null],[13,"SdlError","","",97,null],[5,"show_simple_message_box","","Show a simple message box, meant to be informative only.",null,{"inputs":[{"name":"messageboxflag"},{"name":"str"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[5,"show_message_box","","Show a customizable message box.",null,null],[17,"MESSAGEBOX_ERROR","","",null,null],[17,"MESSAGEBOX_WARNING","","",null,null],[17,"MESSAGEBOX_INFORMATION","","",null,null],[17,"MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT","","",null,null],[17,"MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT","","",null,null],[17,"MESSAGEBOX_BUTTON_NOTHING","","",null,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"messageboxflag"}}],[11,"partial_cmp","","",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"option"}}],[11,"lt","","",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"le","","",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"gt","","",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"ge","","",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"cmp","","",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"ordering"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",98,{"inputs":[],"output":{"name":"messageboxflag"}}],[11,"all","","Returns the set containing all flags.",98,{"inputs":[],"output":{"name":"messageboxflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",98,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",98,{"inputs":[{"name":"u32"}],"output":{"name":"messageboxflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"messageboxflag"}}],[11,"bitor_assign","","Adds the set of flags.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"messageboxflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"messageboxflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":{"name":"messageboxflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",98,{"inputs":[{"name":"self"},{"name":"messageboxflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",98,{"inputs":[{"name":"self"}],"output":{"name":"messageboxflag"}}],[11,"extend","","",98,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",98,{"inputs":[{"name":"t"}],"output":{"name":"messageboxflag"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"messageboxbuttonflag"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"cmp","","",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"ordering"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",99,{"inputs":[],"output":{"name":"messageboxbuttonflag"}}],[11,"all","","Returns the set containing all flags.",99,{"inputs":[],"output":{"name":"messageboxbuttonflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",99,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",99,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",99,{"inputs":[{"name":"u32"}],"output":{"name":"messageboxbuttonflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"messageboxbuttonflag"}}],[11,"bitor_assign","","Adds the set of flags.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"messageboxbuttonflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"messageboxbuttonflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":{"name":"messageboxbuttonflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",99,{"inputs":[{"name":"self"},{"name":"messageboxbuttonflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",99,{"inputs":[{"name":"self"}],"output":{"name":"messageboxbuttonflag"}}],[11,"extend","","",99,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",99,{"inputs":[{"name":"t"}],"output":{"name":"messageboxbuttonflag"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",94,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxcolorscheme"}}],[11,"from","","",94,{"inputs":[{"name":"sdl_messageboxcolorscheme"}],"output":{"name":"messageboxcolorscheme"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"hint","sdl2","",null,null],[4,"Hint","sdl2::hint","",null,null],[13,"Default","","",100,null],[13,"Normal","","",100,null],[13,"Override","","",100,null],[5,"set","","",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[5,"get","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"set_with_priority","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"hint"}],"output":{"name":"bool"}}],[0,"image","sdl2","",null,null],[3,"InitFlag","sdl2::image","",null,null],[3,"Sdl2ImageContext","","Context manager for `sdl2_image` to manage quiting. Can't do much with it but keep it alive while you are using it.",null,null],[5,"init","","Initializes `SDL2_image` with `InitFlags`. If not every flag is set it returns an error",null,{"inputs":[{"name":"initflag"}],"output":{"name":"result"}}],[5,"get_linked_version","","Returns the version of the dynamically linked `SDL_image` library",null,{"inputs":[],"output":{"name":"version"}}],[17,"INIT_JPG","","",null,null],[17,"INIT_PNG","","",null,null],[17,"INIT_TIF","","",null,null],[17,"INIT_WEBP","","",null,null],[8,"LoadSurface","","Static method extensions for creating Surfaces",null,null],[10,"from_file","","",101,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[10,"from_xpm_array","","",101,null],[8,"SaveSurface","","Method extensions to Surface for saving to disk",null,null],[10,"save","","",102,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[10,"save_rw","","",102,{"inputs":[{"name":"self"},{"name":"rwops"}],"output":{"name":"result"}}],[8,"LoadTexture","","Method extensions for creating Textures from a Renderer",null,null],[10,"load_texture","","",103,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[8,"ImageRWops","","",null,null],[10,"load","","load as a surface. except TGA",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_typed","","load as a surface. This can load all supported image formats.",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"load_cur","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_ico","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_bmp","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_pnm","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_xpm","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_xcf","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_pcx","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_gif","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_jpg","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_tif","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_png","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_tga","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_lbm","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_xv","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_webp","","",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"is_cur","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_ico","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_bmp","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_pnm","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xpm","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xcf","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_pcx","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_gif","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_jpg","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_tif","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_png","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_lbm","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xv","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_webp","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"initflag"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"cmp","","",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"ordering"}}],[11,"hash","","",105,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",105,{"inputs":[],"output":{"name":"initflag"}}],[11,"all","","Returns the set containing all flags.",105,{"inputs":[],"output":{"name":"initflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",105,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",105,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",105,{"inputs":[{"name":"u32"}],"output":{"name":"initflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"initflag"}}],[11,"bitor_assign","","Adds the set of flags.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"initflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"initflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"initflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",105,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",105,{"inputs":[{"name":"self"}],"output":{"name":"initflag"}}],[11,"extend","","",105,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",105,{"inputs":[{"name":"t"}],"output":{"name":"initflag"}}],[11,"to_string","","",105,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_file","sdl2::surface","Loads an SDL Surface from a file",43,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_xpm_array","","Loads an SDL Surface from XPM data",43,null],[11,"save","","Saves an SDL Surface to a file",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"save_rw","","Saves an SDL Surface to an RWops",43,{"inputs":[{"name":"self"},{"name":"rwops"}],"output":{"name":"result"}}],[11,"load_texture","sdl2::render","Loads an SDL Texture from a file",73,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"drop","sdl2::image","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"load","sdl2::rwops","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_typed","","",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"load_cur","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_ico","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_bmp","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_pnm","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_xpm","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_xcf","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_pcx","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_gif","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_jpg","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_tif","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_png","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_tga","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_lbm","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_xv","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_webp","","",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_cur","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ico","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_bmp","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pnm","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_xpm","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_xcf","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_pcx","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_gif","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_jpg","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tif","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_png","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lbm","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_xv","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_webp","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"mixer","sdl2","",null,null],[3,"InitFlag","sdl2::mixer","",null,null],[3,"Sdl2MixerContext","","Context manager for `sdl2_mixer` to manage init and quit",null,null],[3,"Chunk","","The internal format for an audio chunk.",null,null],[12,"raw","","",107,null],[12,"owned","","",107,null],[3,"Channel","","Sound effect channel.",null,null],[3,"Group","","Sound effect channel grouping.",null,null],[3,"Music","","This is an opaque data type used for Music data.",null,null],[12,"raw","","",108,null],[12,"owned","","",108,null],[4,"Fading","","Fader effect type enumerations",null,null],[13,"NoFading","","",109,null],[13,"FadingOut","","",109,null],[13,"FadingIn","","",109,null],[4,"MusicType","","Music type enumerations",null,null],[13,"MusicNone","","",110,null],[13,"MusicCmd","","",110,null],[13,"MusicWav","","",110,null],[13,"MusicMod","","",110,null],[13,"MusicMid","","",110,null],[13,"MusicOgg","","",110,null],[13,"MusicMp3","","",110,null],[13,"MusicMp3Mad","","",110,null],[13,"MusicFlac","","",110,null],[13,"MusicModPlug","","",110,null],[5,"get_linked_version","","Returns the version of the dynamically linked `SDL_mixer` library",null,{"inputs":[],"output":{"name":"version"}}],[5,"init","","Loads dynamic libraries and prepares them for use.  Flags should be one or more flags from `InitFlag`.",null,{"inputs":[{"name":"initflag"}],"output":{"name":"result"}}],[5,"open_audio","","Open the mixer with a certain audio format.",null,{"inputs":[{"name":"i32"},{"name":"audioformat"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[5,"close_audio","","Shutdown and cleanup the mixer API.",null,{"inputs":[],"output":null}],[5,"query_spec","","Get the actual audio format in use by the opened audio device.",null,{"inputs":[],"output":{"name":"result"}}],[5,"get_chunk_decoders_number","","Get the number of sample chunk decoders available from the `Mix_GetChunkDecoder` function.",null,{"inputs":[],"output":{"name":"i32"}}],[5,"get_chunk_decoder","","Get the name of the indexed sample chunk decoder.",null,{"inputs":[{"name":"i32"}],"output":{"name":"string"}}],[5,"channel","","Return a channel object.",null,{"inputs":[{"name":"i32"}],"output":{"name":"channel"}}],[5,"allocate_channels","","Set the number of channels being mixed.",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"set_channel_finished","","When channel playback is halted, then the specified `channel_finished` function is called.",null,null],[5,"unset_channel_finished","","Unhooks the specified function set before, so no function is called when channel playback is halted.",null,{"inputs":[],"output":null}],[5,"get_playing_channels_number","","Returns how many channels are currently playing.",null,{"inputs":[],"output":{"name":"i32"}}],[5,"get_paused_channels_number","","Returns how many channels are currently paused.",null,{"inputs":[],"output":{"name":"i32"}}],[5,"reserve_channels","","Reserve num channels from being used when playing samples when passing in -1 as a channel number to playback functions.",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"get_music_decoders_number","","Get the number of music decoders available.",null,{"inputs":[],"output":{"name":"i32"}}],[5,"get_music_decoder","","Get the name of the indexed music decoder.",null,{"inputs":[{"name":"i32"}],"output":{"name":"string"}}],[6,"AudioFormat","","",null,null],[17,"AUDIO_U8","","",null,null],[17,"AUDIO_S8","","",null,null],[17,"AUDIO_U16LSB","","",null,null],[17,"AUDIO_S16LSB","","",null,null],[17,"AUDIO_U16MSB","","",null,null],[17,"AUDIO_S16MSB","","",null,null],[17,"AUDIO_U16","","",null,null],[17,"AUDIO_S16","","",null,null],[17,"AUDIO_S32LSB","","",null,null],[17,"AUDIO_S32MSB","","",null,null],[17,"AUDIO_S32","","",null,null],[17,"AUDIO_F32LSB","","",null,null],[17,"AUDIO_F32MSB","","",null,null],[17,"AUDIO_F32","","",null,null],[17,"AUDIO_U16SYS","","",null,null],[17,"AUDIO_S16SYS","","",null,null],[17,"AUDIO_S32SYS","","",null,null],[17,"AUDIO_F32SYS","","",null,null],[17,"DEFAULT_FORMAT","","The suggested default is signed 16bit samples in host byte order.",null,null],[17,"DEFAULT_CHANNELS","","Defualt channels: Stereo.",null,null],[17,"DEFAULT_FREQUENCY","","Good default sample rate in Hz (samples per second) for PC sound cards.",null,null],[17,"MAX_VOLUME","","Maximum value for any volume setting.",null,null],[17,"INIT_FLAC","","",null,null],[17,"INIT_MOD","","",null,null],[17,"INIT_MODPLUG","","",null,null],[17,"INIT_MP3","","",null,null],[17,"INIT_OGG","","",null,null],[17,"INIT_FLUIDSYNTH","","",null,null],[8,"LoaderRWops","","Loader trait for `RWops`",null,null],[10,"load_wav","","Load src for use as a sample.",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"load_music","","",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"initflag"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"cmp","","",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"ordering"}}],[11,"hash","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",112,{"inputs":[],"output":{"name":"initflag"}}],[11,"all","","Returns the set containing all flags.",112,{"inputs":[],"output":{"name":"initflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",112,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",112,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",112,{"inputs":[{"name":"u32"}],"output":{"name":"initflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"initflag"}}],[11,"bitor_assign","","Adds the set of flags.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"initflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"initflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":{"name":"initflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",112,{"inputs":[{"name":"self"},{"name":"initflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",112,{"inputs":[{"name":"self"}],"output":{"name":"initflag"}}],[11,"extend","","",112,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",112,{"inputs":[{"name":"t"}],"output":{"name":"initflag"}}],[11,"to_string","","",112,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"drop","","",113,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"chunk"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"chunk"}],"output":{"name":"bool"}}],[11,"drop","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"from_file","","Load file for use as a sample.",107,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"set_volume","","Set chunk->volume to volume.",107,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"get_volume","","current volume for the chunk.",107,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"load_wav","sdl2::rwops","Load src for use as a sample.",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"load_music","","Load src for use as music.",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","sdl2::mixer","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"fading"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"fading"}],"output":{"name":"bool"}}],[11,"hash","","",109,null],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"channel"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"all","","Represent for all channels (-1)",114,{"inputs":[],"output":{"name":"channel"}}],[11,"post","","This is the MIX_CHANNEL_POST (-2)",114,{"inputs":[],"output":{"name":"channel"}}],[11,"set_volume","","Set the volume for any allocated channel.",114,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"get_volume","","Returns the channels volume on scale of 0 to 128.",114,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"play","","Play chunk on channel, or if channel is -1, pick the first free unreserved channel.",114,{"inputs":[{"name":"self"},{"name":"chunk"},{"name":"i32"}],"output":{"name":"result"}}],[11,"play_timed","","",114,{"inputs":[{"name":"self"},{"name":"chunk"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fade_in","","Play chunk on channel, or if channel is -1, pick the first free unreserved channel.",114,{"inputs":[{"name":"self"},{"name":"chunk"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fade_in_timed","","",114,{"inputs":[{"name":"self"},{"name":"chunk"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"pause","","Pause channel, or all playing channels if -1 is passed in.",114,{"inputs":[{"name":"self"}],"output":null}],[11,"resume","","Unpause channel, or all playing and paused channels if -1 is passed in.",114,{"inputs":[{"name":"self"}],"output":null}],[11,"halt","","Halt channel playback",114,{"inputs":[{"name":"self"}],"output":null}],[11,"expire","","Halt channel playback, after ticks milliseconds.",114,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"fade_out","","Gradually fade out which channel over ms milliseconds starting from now.",114,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"is_playing","","if channel is playing, or not.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_paused","","if channel is paused, or not.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_fading","","if channel is fading in, out, or not",114,{"inputs":[{"name":"self"}],"output":{"name":"fading"}}],[11,"get_chunk","","Get the most recent sample chunk pointer played on channel.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unregister_all_effects","","This removes all effects registered to channel.",114,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_panning","","Sets a panning effect, where left and right is the volume of the left and right channels. They range from 0 (silence) to 255 (loud).",114,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"result"}}],[11,"unset_panning","","Unregisters panning effect.",114,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_distance","","This effect simulates a simple attenuation of volume due to distance. distance ranges from 0 (close/loud) to 255 (far/quiet).",114,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"unset_distance","","Unregisters distance effect.",114,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_position","","This effect emulates a simple 3D audio effect. angle ranges from 0 to 360 degrees going clockwise, where 0 is directly in front. distance ranges from 0 (close/loud) to 255 (far/quiet).",114,{"inputs":[{"name":"self"},{"name":"i16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"unset_position","","Unregisters position effect.",114,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_reverse_stereo","","Simple reverse stereo, swaps left and right channel sound. true for reverse, false to unregister effect.",114,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"group"}}],[11,"add_channels_range","","Add channels starting at from up through to to group tag, or reset it's group to the default group tag (-1).",115,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"add_channel","","Add which channel to group tag, or reset it's group to the default group tag",115,{"inputs":[{"name":"self"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"count","","Count the number of channels in group",115,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"find_available","","Find the first available (not playing) channel in group",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_oldest","","Find the oldest actively playing channel in group",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_newest","","Find the newest, most recently started, actively playing channel in group.",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fade_out","","Gradually fade out channels in group over some milliseconds starting from now. Returns the number of channels set to fade out.",115,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"halt","","Halt playback on all channels in group.",115,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"musictype"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"musictype"}],"output":{"name":"bool"}}],[11,"hash","","",110,null],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"music"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"music"}],"output":{"name":"bool"}}],[11,"drop","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","Shows the original regular expression.",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_file","","Load music file to use.",108,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"get_type","","The file format encoding of the music.",108,{"inputs":[{"name":"self"}],"output":{"name":"musictype"}}],[11,"play","","Play the loaded music loop times through from start to finish.",108,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fade_in","","Fade in over ms milliseconds of time, the loaded music, playing it loop times through from start to finish.",108,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fade_in_from_pos","","Fade in over ms milliseconds of time, from position.",108,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":{"name":"result"}}],[11,"get_volume","","Returns current volume",108,{"inputs":[],"output":{"name":"i32"}}],[11,"set_volume","","Set the volume on a scale of 0 to 128. Values greater than 128 will use 128.",108,{"inputs":[{"name":"i32"}],"output":null}],[11,"pause","","Pause the music playback.",108,{"inputs":[],"output":null}],[11,"resume","","Unpause the music.",108,{"inputs":[],"output":null}],[11,"rewind","","Rewind the music to the start.",108,{"inputs":[],"output":null}],[11,"set_pos","","Set the position of the currently playing music.",108,{"inputs":[{"name":"f64"}],"output":{"name":"result"}}],[11,"set_command","","Setup a command line music player to use to play music.",108,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"halt","","Halt playback of music.",108,{"inputs":[],"output":null}],[11,"fade_out","","Gradually fade out the music over ms milliseconds starting from now.",108,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"hook_finished","","Sets up a function to be called when music playback is halted.",108,null],[11,"unhook_finished","","A previously set up function would no longer be called when music playback is halted.",108,{"inputs":[],"output":null}],[11,"is_playing","","If music is actively playing, or not.",108,{"inputs":[],"output":{"name":"bool"}}],[11,"is_paused","","If music is paused, or not.",108,{"inputs":[],"output":{"name":"bool"}}],[11,"get_fading","","If music is fading, or not.",108,{"inputs":[],"output":{"name":"fading"}}],[11,"fmt","sdl2","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[4,"Error"],[4,"IntegerOrSdlError"],[3,"VideoSubsystem"],[3,"ClipboardUtil"],[4,"EventType"],[4,"WindowEvent"],[4,"Event"],[3,"EventSubsystem"],[3,"EventPump"],[3,"EventPollIterator"],[3,"EventWaitIterator"],[3,"EventWaitTimeoutIterator"],[4,"PrefPathError"],[4,"HatState"],[3,"JoystickSubsystem"],[3,"Joystick"],[3,"Guid"],[4,"AddMappingError"],[4,"Axis"],[4,"Button"],[4,"MappingStatus"],[3,"GameControllerSubsystem"],[3,"GameController"],[4,"Keycode"],[4,"Scancode"],[3,"Mod"],[3,"KeyboardState"],[3,"ScancodeIterator"],[3,"PressedScancodeIterator"],[3,"Sdl"],[3,"KeyboardUtil"],[3,"TextInputUtil"],[4,"SystemCursor"],[4,"MouseWheelDirection"],[4,"MouseButton"],[3,"RelativeMouseState"],[3,"Cursor"],[3,"MouseState"],[3,"MouseButtonIterator"],[3,"PressedMouseButtonIterator"],[3,"MouseUtil"],[3,"Rect"],[3,"Point"],[3,"Surface"],[3,"SurfaceRef"],[3,"PixelMasks"],[4,"Color"],[4,"PixelFormatEnum"],[3,"Palette"],[3,"PixelFormat"],[3,"DisplayMode"],[4,"GLProfile"],[4,"FullscreenType"],[4,"WindowPos"],[4,"WindowBuildError"],[3,"GLAttr"],[3,"ContextFlagsBuilder"],[3,"ContextFlags"],[3,"GLContext"],[3,"Window"],[3,"WindowBuilder"],[3,"WindowRef"],[3,"DriverIterator"],[3,"TimerSubsystem"],[3,"Timer"],[3,"RendererInfo"],[3,"TextureQuery"],[4,"TextureAccess"],[4,"BlendMode"],[4,"RendererParent"],[4,"TextureValueError"],[4,"UpdateTextureError"],[4,"UpdateTextureYUVError"],[3,"Renderer"],[3,"RendererBuilder"],[3,"RenderTarget"],[3,"Texture"],[3,"DriverIterator"],[3,"RWops"],[3,"AudioSubsystem"],[3,"HapticSubsystem"],[3,"AudioSpecWAV"],[3,"AudioSpecDesired"],[3,"AudioSpec"],[4,"AudioFormat"],[4,"AudioStatus"],[8,"AudioCallback"],[8,"AudioFormatNum"],[3,"DriverIterator"],[3,"AudioQueue"],[3,"AudioDevice"],[3,"AudioDeviceLockGuard"],[3,"AudioCVT"],[3,"Version"],[3,"MessageBoxColorScheme"],[3,"ButtonData"],[4,"ClickedButton"],[4,"ShowMessageError"],[3,"MessageBoxFlag"],[3,"MessageBoxButtonFlag"],[4,"Hint"],[8,"LoadSurface"],[8,"SaveSurface"],[8,"LoadTexture"],[8,"ImageRWops"],[3,"InitFlag"],[3,"Sdl2ImageContext"],[3,"Chunk"],[3,"Music"],[4,"Fading"],[4,"MusicType"],[8,"LoaderRWops"],[3,"InitFlag"],[3,"Sdl2MixerContext"],[3,"Channel"],[3,"Group"]]};
searchIndex["sdl2_sys"] = {"doc":"","items":[[0,"scancode","sdl2_sys","",null,null],[6,"SDL_Scancode","sdl2_sys::scancode","",null,null],[17,"SDL_SCANCODE_UNKNOWN","","",null,null],[17,"SDL_SCANCODE_A","","",null,null],[17,"SDL_SCANCODE_B","","",null,null],[17,"SDL_SCANCODE_C","","",null,null],[17,"SDL_SCANCODE_D","","",null,null],[17,"SDL_SCANCODE_E","","",null,null],[17,"SDL_SCANCODE_F","","",null,null],[17,"SDL_SCANCODE_G","","",null,null],[17,"SDL_SCANCODE_H","","",null,null],[17,"SDL_SCANCODE_I","","",null,null],[17,"SDL_SCANCODE_J","","",null,null],[17,"SDL_SCANCODE_K","","",null,null],[17,"SDL_SCANCODE_L","","",null,null],[17,"SDL_SCANCODE_M","","",null,null],[17,"SDL_SCANCODE_N","","",null,null],[17,"SDL_SCANCODE_O","","",null,null],[17,"SDL_SCANCODE_P","","",null,null],[17,"SDL_SCANCODE_Q","","",null,null],[17,"SDL_SCANCODE_R","","",null,null],[17,"SDL_SCANCODE_S","","",null,null],[17,"SDL_SCANCODE_T","","",null,null],[17,"SDL_SCANCODE_U","","",null,null],[17,"SDL_SCANCODE_V","","",null,null],[17,"SDL_SCANCODE_W","","",null,null],[17,"SDL_SCANCODE_X","","",null,null],[17,"SDL_SCANCODE_Y","","",null,null],[17,"SDL_SCANCODE_Z","","",null,null],[17,"SDL_SCANCODE_1","","",null,null],[17,"SDL_SCANCODE_2","","",null,null],[17,"SDL_SCANCODE_3","","",null,null],[17,"SDL_SCANCODE_4","","",null,null],[17,"SDL_SCANCODE_5","","",null,null],[17,"SDL_SCANCODE_6","","",null,null],[17,"SDL_SCANCODE_7","","",null,null],[17,"SDL_SCANCODE_8","","",null,null],[17,"SDL_SCANCODE_9","","",null,null],[17,"SDL_SCANCODE_0","","",null,null],[17,"SDL_SCANCODE_RETURN","","",null,null],[17,"SDL_SCANCODE_ESCAPE","","",null,null],[17,"SDL_SCANCODE_BACKSPACE","","",null,null],[17,"SDL_SCANCODE_TAB","","",null,null],[17,"SDL_SCANCODE_SPACE","","",null,null],[17,"SDL_SCANCODE_MINUS","","",null,null],[17,"SDL_SCANCODE_EQUALS","","",null,null],[17,"SDL_SCANCODE_LEFTBRACKET","","",null,null],[17,"SDL_SCANCODE_RIGHTBRACKET","","",null,null],[17,"SDL_SCANCODE_BACKSLASH","","",null,null],[17,"SDL_SCANCODE_NONUSHASH","","",null,null],[17,"SDL_SCANCODE_SEMICOLON","","",null,null],[17,"SDL_SCANCODE_APOSTROPHE","","",null,null],[17,"SDL_SCANCODE_GRAVE","","",null,null],[17,"SDL_SCANCODE_COMMA","","",null,null],[17,"SDL_SCANCODE_PERIOD","","",null,null],[17,"SDL_SCANCODE_SLASH","","",null,null],[17,"SDL_SCANCODE_CAPSLOCK","","",null,null],[17,"SDL_SCANCODE_F1","","",null,null],[17,"SDL_SCANCODE_F2","","",null,null],[17,"SDL_SCANCODE_F3","","",null,null],[17,"SDL_SCANCODE_F4","","",null,null],[17,"SDL_SCANCODE_F5","","",null,null],[17,"SDL_SCANCODE_F6","","",null,null],[17,"SDL_SCANCODE_F7","","",null,null],[17,"SDL_SCANCODE_F8","","",null,null],[17,"SDL_SCANCODE_F9","","",null,null],[17,"SDL_SCANCODE_F10","","",null,null],[17,"SDL_SCANCODE_F11","","",null,null],[17,"SDL_SCANCODE_F12","","",null,null],[17,"SDL_SCANCODE_PRINTSCREEN","","",null,null],[17,"SDL_SCANCODE_SCROLLLOCK","","",null,null],[17,"SDL_SCANCODE_PAUSE","","",null,null],[17,"SDL_SCANCODE_INSERT","","",null,null],[17,"SDL_SCANCODE_HOME","","",null,null],[17,"SDL_SCANCODE_PAGEUP","","",null,null],[17,"SDL_SCANCODE_DELETE","","",null,null],[17,"SDL_SCANCODE_END","","",null,null],[17,"SDL_SCANCODE_PAGEDOWN","","",null,null],[17,"SDL_SCANCODE_RIGHT","","",null,null],[17,"SDL_SCANCODE_LEFT","","",null,null],[17,"SDL_SCANCODE_DOWN","","",null,null],[17,"SDL_SCANCODE_UP","","",null,null],[17,"SDL_SCANCODE_NUMLOCKCLEAR","","",null,null],[17,"SDL_SCANCODE_KP_DIVIDE","","",null,null],[17,"SDL_SCANCODE_KP_MULTIPLY","","",null,null],[17,"SDL_SCANCODE_KP_MINUS","","",null,null],[17,"SDL_SCANCODE_KP_PLUS","","",null,null],[17,"SDL_SCANCODE_KP_ENTER","","",null,null],[17,"SDL_SCANCODE_KP_1","","",null,null],[17,"SDL_SCANCODE_KP_2","","",null,null],[17,"SDL_SCANCODE_KP_3","","",null,null],[17,"SDL_SCANCODE_KP_4","","",null,null],[17,"SDL_SCANCODE_KP_5","","",null,null],[17,"SDL_SCANCODE_KP_6","","",null,null],[17,"SDL_SCANCODE_KP_7","","",null,null],[17,"SDL_SCANCODE_KP_8","","",null,null],[17,"SDL_SCANCODE_KP_9","","",null,null],[17,"SDL_SCANCODE_KP_0","","",null,null],[17,"SDL_SCANCODE_KP_PERIOD","","",null,null],[17,"SDL_SCANCODE_NONUSBACKSLASH","","",null,null],[17,"SDL_SCANCODE_APPLICATION","","",null,null],[17,"SDL_SCANCODE_POWER","","",null,null],[17,"SDL_SCANCODE_KP_EQUALS","","",null,null],[17,"SDL_SCANCODE_F13","","",null,null],[17,"SDL_SCANCODE_F14","","",null,null],[17,"SDL_SCANCODE_F15","","",null,null],[17,"SDL_SCANCODE_F16","","",null,null],[17,"SDL_SCANCODE_F17","","",null,null],[17,"SDL_SCANCODE_F18","","",null,null],[17,"SDL_SCANCODE_F19","","",null,null],[17,"SDL_SCANCODE_F20","","",null,null],[17,"SDL_SCANCODE_F21","","",null,null],[17,"SDL_SCANCODE_F22","","",null,null],[17,"SDL_SCANCODE_F23","","",null,null],[17,"SDL_SCANCODE_F24","","",null,null],[17,"SDL_SCANCODE_EXECUTE","","",null,null],[17,"SDL_SCANCODE_HELP","","",null,null],[17,"SDL_SCANCODE_MENU","","",null,null],[17,"SDL_SCANCODE_SELECT","","",null,null],[17,"SDL_SCANCODE_STOP","","",null,null],[17,"SDL_SCANCODE_AGAIN","","",null,null],[17,"SDL_SCANCODE_UNDO","","",null,null],[17,"SDL_SCANCODE_CUT","","",null,null],[17,"SDL_SCANCODE_COPY","","",null,null],[17,"SDL_SCANCODE_PASTE","","",null,null],[17,"SDL_SCANCODE_FIND","","",null,null],[17,"SDL_SCANCODE_MUTE","","",null,null],[17,"SDL_SCANCODE_VOLUMEUP","","",null,null],[17,"SDL_SCANCODE_VOLUMEDOWN","","",null,null],[17,"SDL_SCANCODE_KP_COMMA","","",null,null],[17,"SDL_SCANCODE_KP_EQUALSAS400","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL1","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL2","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL3","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL4","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL5","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL6","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL7","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL8","","",null,null],[17,"SDL_SCANCODE_INTERNATIONAL9","","",null,null],[17,"SDL_SCANCODE_LANG1","","",null,null],[17,"SDL_SCANCODE_LANG2","","",null,null],[17,"SDL_SCANCODE_LANG3","","",null,null],[17,"SDL_SCANCODE_LANG4","","",null,null],[17,"SDL_SCANCODE_LANG5","","",null,null],[17,"SDL_SCANCODE_LANG6","","",null,null],[17,"SDL_SCANCODE_LANG7","","",null,null],[17,"SDL_SCANCODE_LANG8","","",null,null],[17,"SDL_SCANCODE_LANG9","","",null,null],[17,"SDL_SCANCODE_ALTERASE","","",null,null],[17,"SDL_SCANCODE_SYSREQ","","",null,null],[17,"SDL_SCANCODE_CANCEL","","",null,null],[17,"SDL_SCANCODE_CLEAR","","",null,null],[17,"SDL_SCANCODE_PRIOR","","",null,null],[17,"SDL_SCANCODE_RETURN2","","",null,null],[17,"SDL_SCANCODE_SEPARATOR","","",null,null],[17,"SDL_SCANCODE_OUT","","",null,null],[17,"SDL_SCANCODE_OPER","","",null,null],[17,"SDL_SCANCODE_CLEARAGAIN","","",null,null],[17,"SDL_SCANCODE_CRSEL","","",null,null],[17,"SDL_SCANCODE_EXSEL","","",null,null],[17,"SDL_SCANCODE_KP_00","","",null,null],[17,"SDL_SCANCODE_KP_000","","",null,null],[17,"SDL_SCANCODE_THOUSANDSSEPARATOR","","",null,null],[17,"SDL_SCANCODE_DECIMALSEPARATOR","","",null,null],[17,"SDL_SCANCODE_CURRENCYUNIT","","",null,null],[17,"SDL_SCANCODE_CURRENCYSUBUNIT","","",null,null],[17,"SDL_SCANCODE_KP_LEFTPAREN","","",null,null],[17,"SDL_SCANCODE_KP_RIGHTPAREN","","",null,null],[17,"SDL_SCANCODE_KP_LEFTBRACE","","",null,null],[17,"SDL_SCANCODE_KP_RIGHTBRACE","","",null,null],[17,"SDL_SCANCODE_KP_TAB","","",null,null],[17,"SDL_SCANCODE_KP_BACKSPACE","","",null,null],[17,"SDL_SCANCODE_KP_A","","",null,null],[17,"SDL_SCANCODE_KP_B","","",null,null],[17,"SDL_SCANCODE_KP_C","","",null,null],[17,"SDL_SCANCODE_KP_D","","",null,null],[17,"SDL_SCANCODE_KP_E","","",null,null],[17,"SDL_SCANCODE_KP_F","","",null,null],[17,"SDL_SCANCODE_KP_XOR","","",null,null],[17,"SDL_SCANCODE_KP_POWER","","",null,null],[17,"SDL_SCANCODE_KP_PERCENT","","",null,null],[17,"SDL_SCANCODE_KP_LESS","","",null,null],[17,"SDL_SCANCODE_KP_GREATER","","",null,null],[17,"SDL_SCANCODE_KP_AMPERSAND","","",null,null],[17,"SDL_SCANCODE_KP_DBLAMPERSAND","","",null,null],[17,"SDL_SCANCODE_KP_VERTICALBAR","","",null,null],[17,"SDL_SCANCODE_KP_DBLVERTICALBAR","","",null,null],[17,"SDL_SCANCODE_KP_COLON","","",null,null],[17,"SDL_SCANCODE_KP_HASH","","",null,null],[17,"SDL_SCANCODE_KP_SPACE","","",null,null],[17,"SDL_SCANCODE_KP_AT","","",null,null],[17,"SDL_SCANCODE_KP_EXCLAM","","",null,null],[17,"SDL_SCANCODE_KP_MEMSTORE","","",null,null],[17,"SDL_SCANCODE_KP_MEMRECALL","","",null,null],[17,"SDL_SCANCODE_KP_MEMCLEAR","","",null,null],[17,"SDL_SCANCODE_KP_MEMADD","","",null,null],[17,"SDL_SCANCODE_KP_MEMSUBTRACT","","",null,null],[17,"SDL_SCANCODE_KP_MEMMULTIPLY","","",null,null],[17,"SDL_SCANCODE_KP_MEMDIVIDE","","",null,null],[17,"SDL_SCANCODE_KP_PLUSMINUS","","",null,null],[17,"SDL_SCANCODE_KP_CLEAR","","",null,null],[17,"SDL_SCANCODE_KP_CLEARENTRY","","",null,null],[17,"SDL_SCANCODE_KP_BINARY","","",null,null],[17,"SDL_SCANCODE_KP_OCTAL","","",null,null],[17,"SDL_SCANCODE_KP_DECIMAL","","",null,null],[17,"SDL_SCANCODE_KP_HEXADECIMAL","","",null,null],[17,"SDL_SCANCODE_LCTRL","","",null,null],[17,"SDL_SCANCODE_LSHIFT","","",null,null],[17,"SDL_SCANCODE_LALT","","",null,null],[17,"SDL_SCANCODE_LGUI","","",null,null],[17,"SDL_SCANCODE_RCTRL","","",null,null],[17,"SDL_SCANCODE_RSHIFT","","",null,null],[17,"SDL_SCANCODE_RALT","","",null,null],[17,"SDL_SCANCODE_RGUI","","",null,null],[17,"SDL_SCANCODE_MODE","","",null,null],[17,"SDL_SCANCODE_AUDIONEXT","","",null,null],[17,"SDL_SCANCODE_AUDIOPREV","","",null,null],[17,"SDL_SCANCODE_AUDIOSTOP","","",null,null],[17,"SDL_SCANCODE_AUDIOPLAY","","",null,null],[17,"SDL_SCANCODE_AUDIOMUTE","","",null,null],[17,"SDL_SCANCODE_MEDIASELECT","","",null,null],[17,"SDL_SCANCODE_WWW","","",null,null],[17,"SDL_SCANCODE_MAIL","","",null,null],[17,"SDL_SCANCODE_CALCULATOR","","",null,null],[17,"SDL_SCANCODE_COMPUTER","","",null,null],[17,"SDL_SCANCODE_AC_SEARCH","","",null,null],[17,"SDL_SCANCODE_AC_HOME","","",null,null],[17,"SDL_SCANCODE_AC_BACK","","",null,null],[17,"SDL_SCANCODE_AC_FORWARD","","",null,null],[17,"SDL_SCANCODE_AC_STOP","","",null,null],[17,"SDL_SCANCODE_AC_REFRESH","","",null,null],[17,"SDL_SCANCODE_AC_BOOKMARKS","","",null,null],[17,"SDL_SCANCODE_BRIGHTNESSDOWN","","",null,null],[17,"SDL_SCANCODE_BRIGHTNESSUP","","",null,null],[17,"SDL_SCANCODE_DISPLAYSWITCH","","",null,null],[17,"SDL_SCANCODE_KBDILLUMTOGGLE","","",null,null],[17,"SDL_SCANCODE_KBDILLUMDOWN","","",null,null],[17,"SDL_SCANCODE_KBDILLUMUP","","",null,null],[17,"SDL_SCANCODE_EJECT","","",null,null],[17,"SDL_SCANCODE_SLEEP","","",null,null],[17,"SDL_SCANCODE_APP1","","",null,null],[17,"SDL_SCANCODE_APP2","","",null,null],[17,"SDL_NUM_SCANCODES","","",null,null],[0,"keycode","sdl2_sys","",null,null],[6,"SDL_Keycode","sdl2_sys::keycode","",null,null],[6,"SDL_Keymod","","",null,null],[17,"SDLK_UNKNOWN","","",null,null],[17,"SDLK_BACKSPACE","","",null,null],[17,"SDLK_TAB","","",null,null],[17,"SDLK_RETURN","","",null,null],[17,"SDLK_ESCAPE","","",null,null],[17,"SDLK_SPACE","","",null,null],[17,"SDLK_EXCLAIM","","",null,null],[17,"SDLK_QUOTEDBL","","",null,null],[17,"SDLK_HASH","","",null,null],[17,"SDLK_DOLLAR","","",null,null],[17,"SDLK_PERCENT","","",null,null],[17,"SDLK_AMPERSAND","","",null,null],[17,"SDLK_QUOTE","","",null,null],[17,"SDLK_LEFTPAREN","","",null,null],[17,"SDLK_RIGHTPAREN","","",null,null],[17,"SDLK_ASTERISK","","",null,null],[17,"SDLK_PLUS","","",null,null],[17,"SDLK_COMMA","","",null,null],[17,"SDLK_MINUS","","",null,null],[17,"SDLK_PERIOD","","",null,null],[17,"SDLK_SLASH","","",null,null],[17,"SDLK_0","","",null,null],[17,"SDLK_1","","",null,null],[17,"SDLK_2","","",null,null],[17,"SDLK_3","","",null,null],[17,"SDLK_4","","",null,null],[17,"SDLK_5","","",null,null],[17,"SDLK_6","","",null,null],[17,"SDLK_7","","",null,null],[17,"SDLK_8","","",null,null],[17,"SDLK_9","","",null,null],[17,"SDLK_COLON","","",null,null],[17,"SDLK_SEMICOLON","","",null,null],[17,"SDLK_LESS","","",null,null],[17,"SDLK_EQUALS","","",null,null],[17,"SDLK_GREATER","","",null,null],[17,"SDLK_QUESTION","","",null,null],[17,"SDLK_AT","","",null,null],[17,"SDLK_LEFTBRACKET","","",null,null],[17,"SDLK_BACKSLASH","","",null,null],[17,"SDLK_RIGHTBRACKET","","",null,null],[17,"SDLK_CARET","","",null,null],[17,"SDLK_UNDERSCORE","","",null,null],[17,"SDLK_BACKQUOTE","","",null,null],[17,"SDLK_a","","",null,null],[17,"SDLK_b","","",null,null],[17,"SDLK_c","","",null,null],[17,"SDLK_d","","",null,null],[17,"SDLK_e","","",null,null],[17,"SDLK_f","","",null,null],[17,"SDLK_g","","",null,null],[17,"SDLK_h","","",null,null],[17,"SDLK_i","","",null,null],[17,"SDLK_j","","",null,null],[17,"SDLK_k","","",null,null],[17,"SDLK_l","","",null,null],[17,"SDLK_m","","",null,null],[17,"SDLK_n","","",null,null],[17,"SDLK_o","","",null,null],[17,"SDLK_p","","",null,null],[17,"SDLK_q","","",null,null],[17,"SDLK_r","","",null,null],[17,"SDLK_s","","",null,null],[17,"SDLK_t","","",null,null],[17,"SDLK_u","","",null,null],[17,"SDLK_v","","",null,null],[17,"SDLK_w","","",null,null],[17,"SDLK_x","","",null,null],[17,"SDLK_y","","",null,null],[17,"SDLK_z","","",null,null],[17,"SDLK_DELETE","","",null,null],[17,"SDLK_CAPSLOCK","","",null,null],[17,"SDLK_F1","","",null,null],[17,"SDLK_F2","","",null,null],[17,"SDLK_F3","","",null,null],[17,"SDLK_F4","","",null,null],[17,"SDLK_F5","","",null,null],[17,"SDLK_F6","","",null,null],[17,"SDLK_F7","","",null,null],[17,"SDLK_F8","","",null,null],[17,"SDLK_F9","","",null,null],[17,"SDLK_F10","","",null,null],[17,"SDLK_F11","","",null,null],[17,"SDLK_F12","","",null,null],[17,"SDLK_PRINTSCREEN","","",null,null],[17,"SDLK_SCROLLLOCK","","",null,null],[17,"SDLK_PAUSE","","",null,null],[17,"SDLK_INSERT","","",null,null],[17,"SDLK_HOME","","",null,null],[17,"SDLK_PAGEUP","","",null,null],[17,"SDLK_END","","",null,null],[17,"SDLK_PAGEDOWN","","",null,null],[17,"SDLK_RIGHT","","",null,null],[17,"SDLK_LEFT","","",null,null],[17,"SDLK_DOWN","","",null,null],[17,"SDLK_UP","","",null,null],[17,"SDLK_NUMLOCKCLEAR","","",null,null],[17,"SDLK_KPDIVIDE","","",null,null],[17,"SDLK_KPMULTIPLY","","",null,null],[17,"SDLK_KPMINUS","","",null,null],[17,"SDLK_KPPLUS","","",null,null],[17,"SDLK_KPENTER","","",null,null],[17,"SDLK_KP1","","",null,null],[17,"SDLK_KP2","","",null,null],[17,"SDLK_KP3","","",null,null],[17,"SDLK_KP4","","",null,null],[17,"SDLK_KP5","","",null,null],[17,"SDLK_KP6","","",null,null],[17,"SDLK_KP7","","",null,null],[17,"SDLK_KP8","","",null,null],[17,"SDLK_KP9","","",null,null],[17,"SDLK_KP0","","",null,null],[17,"SDLK_KPPERIOD","","",null,null],[17,"SDLK_APPLICATION","","",null,null],[17,"SDLK_POWER","","",null,null],[17,"SDLK_KPEQUALS","","",null,null],[17,"SDLK_F13","","",null,null],[17,"SDLK_F14","","",null,null],[17,"SDLK_F15","","",null,null],[17,"SDLK_F16","","",null,null],[17,"SDLK_F17","","",null,null],[17,"SDLK_F18","","",null,null],[17,"SDLK_F19","","",null,null],[17,"SDLK_F20","","",null,null],[17,"SDLK_F21","","",null,null],[17,"SDLK_F22","","",null,null],[17,"SDLK_F23","","",null,null],[17,"SDLK_F24","","",null,null],[17,"SDLK_EXECUTE","","",null,null],[17,"SDLK_HELP","","",null,null],[17,"SDLK_MENU","","",null,null],[17,"SDLK_SELECT","","",null,null],[17,"SDLK_STOP","","",null,null],[17,"SDLK_AGAIN","","",null,null],[17,"SDLK_UNDO","","",null,null],[17,"SDLK_CUT","","",null,null],[17,"SDLK_COPY","","",null,null],[17,"SDLK_PASTE","","",null,null],[17,"SDLK_FIND","","",null,null],[17,"SDLK_MUTE","","",null,null],[17,"SDLK_VOLUMEUP","","",null,null],[17,"SDLK_VOLUMEDOWN","","",null,null],[17,"SDLK_KPCOMMA","","",null,null],[17,"SDLK_KPEQUALSAS400","","",null,null],[17,"SDLK_ALTERASE","","",null,null],[17,"SDLK_SYSREQ","","",null,null],[17,"SDLK_CANCEL","","",null,null],[17,"SDLK_CLEAR","","",null,null],[17,"SDLK_PRIOR","","",null,null],[17,"SDLK_RETURN2","","",null,null],[17,"SDLK_SEPARATOR","","",null,null],[17,"SDLK_OUT","","",null,null],[17,"SDLK_OPER","","",null,null],[17,"SDLK_CLEARAGAIN","","",null,null],[17,"SDLK_CRSEL","","",null,null],[17,"SDLK_EXSEL","","",null,null],[17,"SDLK_KP00","","",null,null],[17,"SDLK_KP000","","",null,null],[17,"SDLK_THOUSANDSSEPARATOR","","",null,null],[17,"SDLK_DECIMALSEPARATOR","","",null,null],[17,"SDLK_CURRENCYUNIT","","",null,null],[17,"SDLK_CURRENCYSUBUNIT","","",null,null],[17,"SDLK_KPLEFTPAREN","","",null,null],[17,"SDLK_KPRIGHTPAREN","","",null,null],[17,"SDLK_KPLEFTBRACE","","",null,null],[17,"SDLK_KPRIGHTBRACE","","",null,null],[17,"SDLK_KPTAB","","",null,null],[17,"SDLK_KPBACKSPACE","","",null,null],[17,"SDLK_KPA","","",null,null],[17,"SDLK_KPB","","",null,null],[17,"SDLK_KPC","","",null,null],[17,"SDLK_KPD","","",null,null],[17,"SDLK_KPE","","",null,null],[17,"SDLK_KPF","","",null,null],[17,"SDLK_KPXOR","","",null,null],[17,"SDLK_KPPOWER","","",null,null],[17,"SDLK_KPPERCENT","","",null,null],[17,"SDLK_KPLESS","","",null,null],[17,"SDLK_KPGREATER","","",null,null],[17,"SDLK_KPAMPERSAND","","",null,null],[17,"SDLK_KPDBLAMPERSAND","","",null,null],[17,"SDLK_KPVERTICALBAR","","",null,null],[17,"SDLK_KPDBLVERTICALBAR","","",null,null],[17,"SDLK_KPCOLON","","",null,null],[17,"SDLK_KPHASH","","",null,null],[17,"SDLK_KPSPACE","","",null,null],[17,"SDLK_KPAT","","",null,null],[17,"SDLK_KPEXCLAM","","",null,null],[17,"SDLK_KPMEMSTORE","","",null,null],[17,"SDLK_KPMEMRECALL","","",null,null],[17,"SDLK_KPMEMCLEAR","","",null,null],[17,"SDLK_KPMEMADD","","",null,null],[17,"SDLK_KPMEMSUBTRACT","","",null,null],[17,"SDLK_KPMEMMULTIPLY","","",null,null],[17,"SDLK_KPMEMDIVIDE","","",null,null],[17,"SDLK_KPPLUSMINUS","","",null,null],[17,"SDLK_KPCLEAR","","",null,null],[17,"SDLK_KPCLEARENTRY","","",null,null],[17,"SDLK_KPBINARY","","",null,null],[17,"SDLK_KPOCTAL","","",null,null],[17,"SDLK_KPDECIMAL","","",null,null],[17,"SDLK_KPHEXADECIMAL","","",null,null],[17,"SDLK_LCTRL","","",null,null],[17,"SDLK_LSHIFT","","",null,null],[17,"SDLK_LALT","","",null,null],[17,"SDLK_LGUI","","",null,null],[17,"SDLK_RCTRL","","",null,null],[17,"SDLK_RSHIFT","","",null,null],[17,"SDLK_RALT","","",null,null],[17,"SDLK_RGUI","","",null,null],[17,"SDLK_MODE","","",null,null],[17,"SDLK_AUDIONEXT","","",null,null],[17,"SDLK_AUDIOPREV","","",null,null],[17,"SDLK_AUDIOSTOP","","",null,null],[17,"SDLK_AUDIOPLAY","","",null,null],[17,"SDLK_AUDIOMUTE","","",null,null],[17,"SDLK_MEDIASELECT","","",null,null],[17,"SDLK_WWW","","",null,null],[17,"SDLK_MAIL","","",null,null],[17,"SDLK_CALCULATOR","","",null,null],[17,"SDLK_COMPUTER","","",null,null],[17,"SDLK_ACSEARCH","","",null,null],[17,"SDLK_ACHOME","","",null,null],[17,"SDLK_ACBACK","","",null,null],[17,"SDLK_ACFORWARD","","",null,null],[17,"SDLK_ACSTOP","","",null,null],[17,"SDLK_ACREFRESH","","",null,null],[17,"SDLK_ACBOOKMARKS","","",null,null],[17,"SDLK_BRIGHTNESSDOWN","","",null,null],[17,"SDLK_BRIGHTNESSUP","","",null,null],[17,"SDLK_DISPLAYSWITCH","","",null,null],[17,"SDLK_KBDILLUMTOGGLE","","",null,null],[17,"SDLK_KBDILLUMDOWN","","",null,null],[17,"SDLK_KBDILLUMUP","","",null,null],[17,"SDLK_EJECT","","",null,null],[17,"SDLK_SLEEP","","",null,null],[17,"KMOD_NONE","","",null,null],[17,"KMOD_LSHIFT","","",null,null],[17,"KMOD_RSHIFT","","",null,null],[17,"KMOD_LCTRL","","",null,null],[17,"KMOD_RCTRL","","",null,null],[17,"KMOD_LALT","","",null,null],[17,"KMOD_RALT","","",null,null],[17,"KMOD_LGUI","","",null,null],[17,"KMOD_RGUI","","",null,null],[17,"KMOD_NUM","","",null,null],[17,"KMOD_CAPS","","",null,null],[17,"KMOD_MODE","","",null,null],[17,"KMOD_RESERVED","","",null,null],[0,"audio","sdl2_sys","",null,null],[3,"SDL_AudioSpec","sdl2_sys::audio","",null,null],[12,"freq","","",0,null],[12,"format","","",0,null],[12,"channels","","",0,null],[12,"silence","","",0,null],[12,"samples","","",0,null],[12,"padding","","",0,null],[12,"size","","",0,null],[12,"callback","","",0,null],[12,"userdata","","",0,null],[3,"SDL_AudioCVT","","",null,null],[12,"needed","","",1,null],[12,"src_format","","",1,null],[12,"dst_format","","",1,null],[12,"rate_incr","","",1,null],[12,"buf","","",1,null],[12,"len","","",1,null],[12,"len_cvt","","",1,null],[12,"len_mult","","",1,null],[12,"len_ratio","","",1,null],[5,"SDL_GetNumAudioDrivers","","",null,null],[5,"SDL_GetAudioDriver","","",null,null],[5,"SDL_AudioInit","","",null,null],[5,"SDL_AudioQuit","","",null,null],[5,"SDL_GetCurrentAudioDriver","","",null,null],[5,"SDL_OpenAudio","","",null,null],[5,"SDL_GetNumAudioDevices","","",null,null],[5,"SDL_GetAudioDeviceName","","",null,null],[5,"SDL_OpenAudioDevice","","",null,null],[5,"SDL_GetAudioStatus","","",null,null],[5,"SDL_GetAudioDeviceStatus","","",null,null],[5,"SDL_PauseAudio","","",null,null],[5,"SDL_PauseAudioDevice","","",null,null],[5,"SDL_LoadWAV_RW","","",null,null],[5,"SDL_FreeWAV","","",null,null],[5,"SDL_BuildAudioCVT","","",null,null],[5,"SDL_ConvertAudio","","",null,null],[5,"SDL_MixAudio","","",null,null],[5,"SDL_MixAudioFormat","","",null,null],[5,"SDL_QueueAudio","","",null,null],[5,"SDL_GetQueuedAudioSize","","",null,null],[5,"SDL_ClearQueuedAudio","","",null,null],[5,"SDL_LockAudio","","",null,null],[5,"SDL_LockAudioDevice","","",null,null],[5,"SDL_UnlockAudio","","",null,null],[5,"SDL_UnlockAudioDevice","","",null,null],[5,"SDL_CloseAudio","","",null,null],[5,"SDL_CloseAudioDevice","","",null,null],[6,"SDL_AudioFormat","","",null,null],[6,"SDL_AudioCallback","","",null,null],[6,"SDL_AudioFilter","","",null,null],[6,"SDL_AudioDeviceID","","",null,null],[6,"SDL_AudioStatus","","",null,null],[17,"AUDIO_U8","","",null,null],[17,"AUDIO_S8","","",null,null],[17,"AUDIO_U16LSB","","",null,null],[17,"AUDIO_S16LSB","","",null,null],[17,"AUDIO_U16MSB","","",null,null],[17,"AUDIO_S16MSB","","",null,null],[17,"AUDIO_U16","","",null,null],[17,"AUDIO_S16","","",null,null],[17,"AUDIO_S32LSB","","",null,null],[17,"AUDIO_S32MSB","","",null,null],[17,"AUDIO_S32","","",null,null],[17,"AUDIO_F32LSB","","",null,null],[17,"AUDIO_F32MSB","","",null,null],[17,"AUDIO_F32","","",null,null],[17,"AUDIO_U16SYS","","",null,null],[17,"AUDIO_S16SYS","","",null,null],[17,"AUDIO_S32SYS","","",null,null],[17,"AUDIO_F32SYS","","",null,null],[17,"SDL_AUDIO_STOPPED","","",null,null],[17,"SDL_AUDIO_PLAYING","","",null,null],[17,"SDL_AUDIO_PAUSED","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sdl_audiocvt"}}],[0,"clipboard","sdl2_sys","",null,null],[5,"SDL_SetClipboardText","sdl2_sys::clipboard","",null,null],[5,"SDL_GetClipboardText","","",null,null],[5,"SDL_HasClipboardText","","",null,null],[0,"controller","sdl2_sys","",null,null],[3,"SDL_GameControllerButtonBind","sdl2_sys::controller","",null,null],[3,"SDL_GameControllerButtonBindData","","",null,null],[3,"SDL_GameControllerButtonBindDataHat","","",null,null],[5,"SDL_GameControllerAddMapping","","",null,null],[5,"SDL_GameControllerAddMappingsFromRW","","",null,null],[5,"SDL_GameControllerMappingForGUID","","",null,null],[5,"SDL_GameControllerMapping","","",null,null],[5,"SDL_IsGameController","","",null,null],[5,"SDL_GameControllerNameForIndex","","",null,null],[5,"SDL_GameControllerOpen","","",null,null],[5,"SDL_GameControllerName","","",null,null],[5,"SDL_GameControllerGetAttached","","",null,null],[5,"SDL_GameControllerGetJoystick","","",null,null],[5,"SDL_GameControllerEventState","","",null,null],[5,"SDL_GameControllerUpdate","","",null,null],[5,"SDL_GameControllerGetAxisFromString","","",null,null],[5,"SDL_GameControllerGetStringForAxis","","",null,null],[5,"SDL_GameControllerGetBindForAxis","","",null,null],[5,"SDL_GameControllerGetAxis","","",null,null],[5,"SDL_GameControllerGetButtonFromString","","",null,null],[5,"SDL_GameControllerGetStringForButton","","",null,null],[5,"SDL_GameControllerGetBindForButton","","",null,null],[5,"SDL_GameControllerGetButton","","",null,null],[5,"SDL_GameControllerClose","","",null,null],[6,"SDL_GameController","","",null,null],[6,"SDL_GameControllerBindType","","",null,null],[6,"SDL_GameControllerAxis","","",null,null],[6,"SDL_GameControllerButton","","",null,null],[17,"SDL_CONTROLLER_BINDTYPE_NONE","","",null,null],[17,"SDL_CONTROLLER_BINDTYPE_BUTTON","","",null,null],[17,"SDL_CONTROLLER_BINDTYPE_AXIS","","",null,null],[17,"SDL_CONTROLLER_BINDTYPE_HAT","","",null,null],[17,"SDL_CONTROLLER_AXIS_INVALID","","",null,null],[17,"SDL_CONTROLLER_AXIS_LEFTX","","",null,null],[17,"SDL_CONTROLLER_AXIS_LEFTY","","",null,null],[17,"SDL_CONTROLLER_AXIS_RIGHTX","","",null,null],[17,"SDL_CONTROLLER_AXIS_RIGHTY","","",null,null],[17,"SDL_CONTROLLER_AXIS_TRIGGERLEFT","","",null,null],[17,"SDL_CONTROLLER_AXIS_TRIGGERRIGHT","","",null,null],[17,"SDL_CONTROLLER_AXIS_MAX","","",null,null],[17,"SDL_CONTROLLER_BUTTON_INVALID","","",null,null],[17,"SDL_CONTROLLER_BUTTON_A","","",null,null],[17,"SDL_CONTROLLER_BUTTON_B","","",null,null],[17,"SDL_CONTROLLER_BUTTON_X","","",null,null],[17,"SDL_CONTROLLER_BUTTON_Y","","",null,null],[17,"SDL_CONTROLLER_BUTTON_BACK","","",null,null],[17,"SDL_CONTROLLER_BUTTON_GUIDE","","",null,null],[17,"SDL_CONTROLLER_BUTTON_START","","",null,null],[17,"SDL_CONTROLLER_BUTTON_LEFTSTICK","","",null,null],[17,"SDL_CONTROLLER_BUTTON_RIGHTSTICK","","",null,null],[17,"SDL_CONTROLLER_BUTTON_LEFTSHOULDER","","",null,null],[17,"SDL_CONTROLLER_BUTTON_RIGHTSHOULDER","","",null,null],[17,"SDL_CONTROLLER_BUTTON_DPAD_UP","","",null,null],[17,"SDL_CONTROLLER_BUTTON_DPAD_DOWN","","",null,null],[17,"SDL_CONTROLLER_BUTTON_DPAD_LEFT","","",null,null],[17,"SDL_CONTROLLER_BUTTON_DPAD_RIGHT","","",null,null],[17,"SDL_CONTROLLER_BUTTON_MAX","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sdl_gamecontrollerbuttonbind"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"sdl_gamecontrollerbuttonbinddata"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"sdl_gamecontrollerbuttonbinddatahat"}}],[11,"button","","",3,null],[11,"axis","","",3,null],[11,"hat","","",3,null],[0,"cpuinfo","sdl2_sys","",null,null],[5,"SDL_GetCPUCount","sdl2_sys::cpuinfo","",null,null],[5,"SDL_GetCPUCacheLineSize","","",null,null],[5,"SDL_HasRDTSC","","",null,null],[5,"SDL_HasAltiVec","","",null,null],[5,"SDL_HasMMX","","",null,null],[5,"SDL_Has3DNow","","",null,null],[5,"SDL_HasSSE","","",null,null],[5,"SDL_HasSSE2","","",null,null],[5,"SDL_HasSSE3","","",null,null],[5,"SDL_HasSSE41","","",null,null],[5,"SDL_HasSSE42","","",null,null],[5,"SDL_HasAVX","","",null,null],[5,"SDL_GetSystemRAM","","",null,null],[0,"filesystem","sdl2_sys","",null,null],[5,"SDL_GetBasePath","sdl2_sys::filesystem","",null,null],[5,"SDL_GetPrefPath","","",null,null],[0,"haptic","sdl2_sys","",null,null],[3,"SDL_HapticDirection","sdl2_sys::haptic","",null,null],[12,"type_","","",5,null],[12,"dir","","",5,null],[3,"SDL_HapticConstant","","",null,null],[12,"type_","","",6,null],[12,"direction","","",6,null],[12,"length","","",6,null],[12,"delay","","",6,null],[12,"button","","",6,null],[12,"interval","","",6,null],[12,"level","","",6,null],[12,"attack_length","","",6,null],[12,"attack_level","","",6,null],[12,"fade_length","","",6,null],[12,"fade_level","","",6,null],[3,"SDL_HapticPeriodic","","",null,null],[12,"type_","","",7,null],[12,"direction","","",7,null],[12,"length","","",7,null],[12,"delay","","",7,null],[12,"button","","",7,null],[12,"interval","","",7,null],[12,"period","","",7,null],[12,"magnitude","","",7,null],[12,"offset","","",7,null],[12,"phase","","",7,null],[12,"attack_length","","",7,null],[12,"attack_level","","",7,null],[12,"fade_length","","",7,null],[12,"fade_level","","",7,null],[3,"SDL_HapticCondition","","",null,null],[12,"type_","","",8,null],[12,"direction","","",8,null],[12,"length","","",8,null],[12,"delay","","",8,null],[12,"button","","",8,null],[12,"interval","","",8,null],[12,"right_sat","","",8,null],[12,"left_sat","","",8,null],[12,"right_coeff","","",8,null],[12,"left_coeff","","",8,null],[12,"deadband","","",8,null],[12,"center","","",8,null],[3,"SDL_HapticRamp","","",null,null],[12,"type_","","",9,null],[12,"length","","",9,null],[12,"delay","","",9,null],[12,"button","","",9,null],[12,"interval","","",9,null],[12,"start","","",9,null],[12,"end","","",9,null],[12,"attack_length","","",9,null],[12,"attack_level","","",9,null],[12,"fade_length","","",9,null],[12,"fade_level","","",9,null],[3,"SDL_HapticLeftRight","","",null,null],[12,"type_","","",10,null],[12,"length","","",10,null],[12,"large_magnitude","","",10,null],[12,"small_magnitude","","",10,null],[3,"SDL_HapticCustom","","",null,null],[12,"type_","","",11,null],[12,"direction","","",11,null],[12,"length","","",11,null],[12,"delay","","",11,null],[12,"button","","",11,null],[12,"interval","","",11,null],[12,"channels","","",11,null],[12,"period","","",11,null],[12,"samples","","",11,null],[12,"data","","",11,null],[12,"attack_length","","",11,null],[12,"attack_level","","",11,null],[12,"fade_length","","",11,null],[12,"fade_level","","",11,null],[3,"SDL_HapticEffect","","",null,null],[12,"data","","",12,null],[5,"SDL_NumHaptics","","",null,null],[5,"SDL_HapticName","","",null,null],[5,"SDL_HapticOpen","","",null,null],[5,"SDL_HapticOpened","","",null,null],[5,"SDL_HapticIndex","","",null,null],[5,"SDL_MouseIsHaptic","","",null,null],[5,"SDL_HapticOpenFromMouse","","",null,null],[5,"SDL_JoystickIsHaptic","","",null,null],[5,"SDL_HapticOpenFromJoystick","","",null,null],[5,"SDL_HapticClose","","",null,null],[5,"SDL_HapticNumEffects","","",null,null],[5,"SDL_HapticNumEffectsPlaying","","",null,null],[5,"SDL_HapticQuery","","",null,null],[5,"SDL_HapticNumAxes","","",null,null],[5,"SDL_HapticEffectSupported","","",null,null],[5,"SDL_HapticNewEffect","","",null,null],[5,"SDL_HapticUpdateEffect","","",null,null],[5,"SDL_HapticRunEffect","","",null,null],[5,"SDL_HapticStopEffect","","",null,null],[5,"SDL_HapticDestroyEffect","","",null,null],[5,"SDL_HapticGetEffectStatus","","",null,null],[5,"SDL_HapticSetGain","","",null,null],[5,"SDL_HapticSetAutocenter","","",null,null],[5,"SDL_HapticPause","","",null,null],[5,"SDL_HapticUnpause","","",null,null],[5,"SDL_HapticStopAll","","",null,null],[5,"SDL_HapticRumbleSupported","","",null,null],[5,"SDL_HapticRumbleInit","","",null,null],[5,"SDL_HapticRumblePlay","","",null,null],[5,"SDL_HapticRumbleStop","","",null,null],[6,"SDL_Haptic","","",null,null],[17,"SDL_HAPTIC_CONSTANT","","",null,null],[17,"SDL_HAPTIC_SINE","","",null,null],[17,"SDL_HAPTIC_LEFTRIGHT","","",null,null],[17,"SDL_HAPTIC_TRIANGLE","","",null,null],[17,"SDL_HAPTIC_SAWTOOTHUP","","",null,null],[17,"SDL_HAPTIC_SAWTOOTHDOWN","","",null,null],[17,"SDL_HAPTIC_RAMP","","",null,null],[17,"SDL_HAPTIC_SPRING","","",null,null],[17,"SDL_HAPTIC_DAMPER","","",null,null],[17,"SDL_HAPTIC_INERTIA","","",null,null],[17,"SDL_HAPTIC_FRICTION","","",null,null],[17,"SDL_HAPTIC_CUSTOM","","",null,null],[17,"SDL_HAPTIC_GAIN","","",null,null],[17,"SDL_HAPTIC_AUTOCENTER","","",null,null],[17,"SDL_HAPTIC_STATUS","","",null,null],[17,"SDL_HAPTIC_PAUSE","","",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticdirection"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticconstant"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticperiodic"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticcondition"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticramp"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hapticleftright"}}],[11,"type_","","",12,null],[11,"constant","","",12,null],[11,"periodic","","",12,null],[11,"condition","","",12,null],[11,"ramp","","",12,null],[11,"left_right","","",12,null],[11,"custom","","",12,null],[0,"gesture","sdl2_sys","",null,null],[5,"SDL_RecordGesture","sdl2_sys::gesture","",null,null],[5,"SDL_SaveAllDollarTemplates","","",null,null],[5,"SDL_SaveDollarTemplate","","",null,null],[5,"SDL_LoadDollarTemplates","","",null,null],[6,"SDL_GestureID","","",null,null],[0,"joystick","sdl2_sys","",null,null],[3,"SDL_JoystickGUID","sdl2_sys::joystick","",null,null],[12,"data","","",13,null],[5,"SDL_NumJoysticks","","",null,null],[5,"SDL_JoystickNameForIndex","","",null,null],[5,"SDL_JoystickOpen","","",null,null],[5,"SDL_JoystickName","","",null,null],[5,"SDL_JoystickGetDeviceGUID","","",null,null],[5,"SDL_JoystickGetGUID","","",null,null],[5,"SDL_JoystickGetGUIDString","","",null,null],[5,"SDL_JoystickGetGUIDFromString","","",null,null],[5,"SDL_JoystickGetAttached","","",null,null],[5,"SDL_JoystickInstanceID","","",null,null],[5,"SDL_JoystickNumAxes","","",null,null],[5,"SDL_JoystickNumBalls","","",null,null],[5,"SDL_JoystickNumHats","","",null,null],[5,"SDL_JoystickNumButtons","","",null,null],[5,"SDL_JoystickUpdate","","",null,null],[5,"SDL_JoystickEventState","","",null,null],[5,"SDL_JoystickGetAxis","","",null,null],[5,"SDL_JoystickGetHat","","",null,null],[5,"SDL_JoystickGetBall","","",null,null],[5,"SDL_JoystickGetButton","","",null,null],[5,"SDL_JoystickClose","","",null,null],[6,"SDL_Joystick","","",null,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"sdl_joystickguid"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"sdl_joystickguid"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"sdl_joystickguid"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[0,"keyboard","sdl2_sys","",null,null],[3,"SDL_Keysym","sdl2_sys::keyboard","",null,null],[12,"scancode","","",14,null],[12,"sym","","",14,null],[12,"_mod","","",14,null],[12,"unused","","",14,null],[5,"SDL_GetKeyboardFocus","","",null,null],[5,"SDL_GetKeyboardState","","",null,null],[5,"SDL_GetModState","","",null,null],[5,"SDL_SetModState","","",null,null],[5,"SDL_GetKeyFromScancode","","",null,null],[5,"SDL_GetScancodeFromKey","","",null,null],[5,"SDL_GetScancodeName","","",null,null],[5,"SDL_GetScancodeFromName","","",null,null],[5,"SDL_GetKeyName","","",null,null],[5,"SDL_GetKeyFromName","","",null,null],[5,"SDL_StartTextInput","","",null,null],[5,"SDL_IsTextInputActive","","",null,null],[5,"SDL_StopTextInput","","",null,null],[5,"SDL_SetTextInputRect","","",null,null],[5,"SDL_HasScreenKeyboardSupport","","",null,null],[5,"SDL_IsScreenKeyboardShown","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sdl_keysym"}}],[0,"messagebox","sdl2_sys","",null,null],[3,"SDL_MessageBoxButtonData","sdl2_sys::messagebox","",null,null],[12,"flags","","",15,null],[12,"buttonid","","",15,null],[12,"text","","",15,null],[3,"SDL_MessageBoxColor","","",null,null],[12,"r","","",16,null],[12,"g","","",16,null],[12,"b","","",16,null],[3,"SDL_MessageBoxColorScheme","","",null,null],[12,"colors","","",17,null],[3,"SDL_MessageBoxData","","",null,null],[12,"flags","","",18,null],[12,"window","","",18,null],[12,"title","","",18,null],[12,"message","","",18,null],[12,"numbuttons","","",18,null],[12,"buttons","","",18,null],[12,"color_scheme","","",18,null],[4,"SDL_MessageBoxFlags","","",null,null],[13,"SDL_MESSAGEBOX_ERROR","","",19,null],[13,"SDL_MESSAGEBOX_WARNING","","",19,null],[13,"SDL_MESSAGEBOX_INFORMATION","","",19,null],[4,"SDL_MessageBoxButtonFlags","","",null,null],[13,"SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT","","",20,null],[13,"SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT","","",20,null],[4,"SDL_MessageBoxColorType","","",null,null],[13,"SDL_MESSAGEBOX_COLOR_BACKGROUND","","",21,null],[13,"SDL_MESSAGEBOX_COLOR_TEXT","","",21,null],[13,"SDL_MESSAGEBOX_COLOR_BUTTON_BORDER","","",21,null],[13,"SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND","","",21,null],[13,"SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED","","",21,null],[13,"SDL_MESSAGEBOX_COLOR_MAX","","",21,null],[5,"SDL_ShowMessageBox","","",null,null],[5,"SDL_ShowSimpleMessageBox","","",null,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxflags"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxbuttonflags"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxbuttondata"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxcolor"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxcolortype"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxcolorscheme"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sdl_messageboxdata"}}],[0,"rect","sdl2_sys","",null,null],[3,"SDL_Point","sdl2_sys::rect","A structure that defines a two dimensional point.",null,null],[12,"x","","",22,null],[12,"y","","",22,null],[3,"SDL_Rect","","A structure that defines a rectangle, with the origin at the upper left.",null,null],[12,"x","","",23,null],[12,"y","","",23,null],[12,"w","","",23,null],[12,"h","","",23,null],[5,"SDL_HasIntersection","","",null,null],[5,"SDL_IntersectRect","","",null,null],[5,"SDL_UnionRect","","",null,null],[5,"SDL_EnclosePoints","","",null,null],[5,"SDL_IntersectRectAndLine","","",null,null],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sdl_point"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"sdl_point"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"sdl_point"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sdl_rect"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"sdl_rect"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"sdl_rect"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[0,"pixels","sdl2_sys","",null,null],[3,"SDL_Color","sdl2_sys::pixels","",null,null],[12,"r","","",24,null],[12,"g","","",24,null],[12,"b","","",24,null],[12,"a","","",24,null],[3,"SDL_Palette","","",null,null],[12,"ncolors","","",25,null],[12,"colors","","",25,null],[12,"version","","",25,null],[12,"refcount","","",25,null],[3,"SDL_PixelFormat","","",null,null],[12,"format","","",26,null],[12,"palette","","",26,null],[12,"BitsPerPixel","","",26,null],[12,"BytesPerPixel","","",26,null],[12,"padding","","",26,null],[12,"Rmask","","",26,null],[12,"Gmask","","",26,null],[12,"Bmask","","",26,null],[12,"Amask","","",26,null],[12,"Rloss","","",26,null],[12,"Gloss","","",26,null],[12,"Bloss","","",26,null],[12,"Aloss","","",26,null],[12,"Rshift","","",26,null],[12,"Gshift","","",26,null],[12,"Bshift","","",26,null],[12,"Ashift","","",26,null],[12,"refcount","","",26,null],[12,"next","","",26,null],[5,"SDL_GetRGB","","",null,null],[5,"SDL_GetRGBA","","",null,null],[5,"SDL_MapRGB","","",null,null],[5,"SDL_MapRGBA","","",null,null],[5,"SDL_PixelFormatEnumToMasks","","",null,null],[5,"SDL_MasksToPixelFormatEnum","","",null,null],[5,"SDL_AllocPalette","","",null,null],[5,"SDL_FreePalette","","",null,null],[5,"SDL_SetPaletteColors","","",null,null],[6,"SDL_PixelFormatEnum","","",null,null],[17,"SDL_PIXELFORMAT_UNKNOWN","","",null,null],[17,"SDL_PIXELFORMAT_INDEX1LSB","","",null,null],[17,"SDL_PIXELFORMAT_INDEX1MSB","","",null,null],[17,"SDL_PIXELFORMAT_INDEX4LSB","","",null,null],[17,"SDL_PIXELFORMAT_INDEX4MSB","","",null,null],[17,"SDL_PIXELFORMAT_INDEX8","","",null,null],[17,"SDL_PIXELFORMAT_RGB332","","",null,null],[17,"SDL_PIXELFORMAT_RGB444","","",null,null],[17,"SDL_PIXELFORMAT_RGB555","","",null,null],[17,"SDL_PIXELFORMAT_BGR555","","",null,null],[17,"SDL_PIXELFORMAT_ARGB4444","","",null,null],[17,"SDL_PIXELFORMAT_RGBA4444","","",null,null],[17,"SDL_PIXELFORMAT_ABGR4444","","",null,null],[17,"SDL_PIXELFORMAT_BGRA4444","","",null,null],[17,"SDL_PIXELFORMAT_ARGB1555","","",null,null],[17,"SDL_PIXELFORMAT_RGBA5551","","",null,null],[17,"SDL_PIXELFORMAT_ABGR1555","","",null,null],[17,"SDL_PIXELFORMAT_BGRA5551","","",null,null],[17,"SDL_PIXELFORMAT_RGB565","","",null,null],[17,"SDL_PIXELFORMAT_BGR565","","",null,null],[17,"SDL_PIXELFORMAT_RGB24","","",null,null],[17,"SDL_PIXELFORMAT_BGR24","","",null,null],[17,"SDL_PIXELFORMAT_RGB888","","",null,null],[17,"SDL_PIXELFORMAT_RGBX8888","","",null,null],[17,"SDL_PIXELFORMAT_BGR888","","",null,null],[17,"SDL_PIXELFORMAT_BGRX8888","","",null,null],[17,"SDL_PIXELFORMAT_ARGB8888","","",null,null],[17,"SDL_PIXELFORMAT_RGBA8888","","",null,null],[17,"SDL_PIXELFORMAT_ABGR8888","","",null,null],[17,"SDL_PIXELFORMAT_BGRA8888","","",null,null],[17,"SDL_PIXELFORMAT_ARGB2101010","","",null,null],[17,"SDL_PIXELFORMAT_YV12","","",null,null],[17,"SDL_PIXELFORMAT_IYUV","","",null,null],[17,"SDL_PIXELFORMAT_YUY2","","",null,null],[17,"SDL_PIXELFORMAT_UYVY","","",null,null],[17,"SDL_PIXELFORMAT_YVYU","","",null,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sdl_color"}}],[0,"render","sdl2_sys","",null,null],[3,"SDL_RendererInfo","sdl2_sys::render","",null,null],[12,"name","","",27,null],[12,"flags","","",27,null],[12,"num_texture_formats","","",27,null],[12,"texture_formats","","",27,null],[12,"max_texture_width","","",27,null],[12,"max_texture_height","","",27,null],[3,"SDL_Renderer","","",null,null],[3,"SDL_Texture","","",null,null],[5,"SDL_GetNumRenderDrivers","","",null,null],[5,"SDL_GetRenderDriverInfo","","",null,null],[5,"SDL_CreateWindowAndRenderer","","",null,null],[5,"SDL_CreateRenderer","","",null,null],[5,"SDL_CreateSoftwareRenderer","","",null,null],[5,"SDL_GetRenderer","","",null,null],[5,"SDL_GetRendererInfo","","",null,null],[5,"SDL_GetRendererOutputSize","","",null,null],[5,"SDL_CreateTexture","","",null,null],[5,"SDL_CreateTextureFromSurface","","",null,null],[5,"SDL_QueryTexture","","",null,null],[5,"SDL_SetTextureColorMod","","",null,null],[5,"SDL_GetTextureColorMod","","",null,null],[5,"SDL_SetTextureAlphaMod","","",null,null],[5,"SDL_GetTextureAlphaMod","","",null,null],[5,"SDL_SetTextureBlendMode","","",null,null],[5,"SDL_GetTextureBlendMode","","",null,null],[5,"SDL_UpdateTexture","","",null,null],[5,"SDL_UpdateYUVTexture","","",null,null],[5,"SDL_LockTexture","","",null,null],[5,"SDL_UnlockTexture","","",null,null],[5,"SDL_RenderTargetSupported","","",null,null],[5,"SDL_SetRenderTarget","","",null,null],[5,"SDL_GetRenderTarget","","",null,null],[5,"SDL_RenderSetLogicalSize","","",null,null],[5,"SDL_RenderGetLogicalSize","","",null,null],[5,"SDL_RenderSetViewport","","",null,null],[5,"SDL_RenderGetViewport","","",null,null],[5,"SDL_RenderSetClipRect","","",null,null],[5,"SDL_RenderGetClipRect","","",null,null],[5,"SDL_RenderSetScale","","",null,null],[5,"SDL_RenderGetScale","","",null,null],[5,"SDL_SetRenderDrawColor","","",null,null],[5,"SDL_GetRenderDrawColor","","",null,null],[5,"SDL_SetRenderDrawBlendMode","","",null,null],[5,"SDL_GetRenderDrawBlendMode","","",null,null],[5,"SDL_RenderClear","","",null,null],[5,"SDL_RenderDrawPoint","","",null,null],[5,"SDL_RenderDrawPoints","","",null,null],[5,"SDL_RenderDrawLine","","",null,null],[5,"SDL_RenderDrawLines","","",null,null],[5,"SDL_RenderDrawRect","","",null,null],[5,"SDL_RenderDrawRects","","",null,null],[5,"SDL_RenderFillRect","","",null,null],[5,"SDL_RenderFillRects","","",null,null],[5,"SDL_RenderCopy","","",null,null],[5,"SDL_RenderCopyEx","","",null,null],[5,"SDL_RenderReadPixels","","",null,null],[5,"SDL_RenderPresent","","",null,null],[5,"SDL_DestroyTexture","","",null,null],[5,"SDL_DestroyRenderer","","",null,null],[5,"SDL_GL_BindTexture","","",null,null],[5,"SDL_GL_UnbindTexture","","",null,null],[6,"SDL_RendererFlags","","",null,null],[6,"SDL_TextureAccess","","",null,null],[6,"SDL_TextureModulate","","",null,null],[6,"SDL_RendererFlip","","",null,null],[6,"SDL_BlendMode","","",null,null],[17,"SDL_RENDERER_SOFTWARE","","",null,null],[17,"SDL_RENDERER_ACCELERATED","","",null,null],[17,"SDL_RENDERER_PRESENTVSYNC","","",null,null],[17,"SDL_RENDERER_TARGETTEXTURE","","",null,null],[17,"SDL_TEXTUREACCESS_STATIC","","",null,null],[17,"SDL_TEXTUREACCESS_STREAMING","","",null,null],[17,"SDL_TEXTUREACCESS_TARGET","","",null,null],[17,"SDL_TEXTUREMODULATE_NONE","","",null,null],[17,"SDL_TEXTUREMODULATE_COLOR","","",null,null],[17,"SDL_TEXTUREMODULATE_ALPHA","","",null,null],[17,"SDL_FLIP_NONE","","",null,null],[17,"SDL_FLIP_HORIZONTAL","","",null,null],[17,"SDL_FLIP_VERTICAL","","",null,null],[17,"SDL_BLENDMODE_NONE","","",null,null],[17,"SDL_BLENDMODE_BLEND","","",null,null],[17,"SDL_BLENDMODE_ADD","","",null,null],[17,"SDL_BLENDMODE_MOD","","",null,null],[0,"rwops","sdl2_sys","",null,null],[3,"SDL_RWops","sdl2_sys::rwops","",null,null],[12,"size","","",28,null],[12,"seek","","",28,null],[12,"read","","",28,null],[12,"write","","",28,null],[12,"close","","",28,null],[12,"type_","","",28,null],[5,"SDL_RWFromFile","","",null,null],[5,"SDL_RWFromFP","","",null,null],[5,"SDL_RWFromMem","","",null,null],[5,"SDL_RWFromConstMem","","",null,null],[5,"SDL_AllocRW","","",null,null],[5,"SDL_FreeRW","","",null,null],[7,"RW_SEEK_SET","","",null,null],[7,"RW_SEEK_CUR","","",null,null],[7,"RW_SEEK_END","","",null,null],[0,"surface","sdl2_sys","",null,null],[3,"SDL_BlitMap","sdl2_sys::surface","",null,null],[3,"SDL_Surface","","",null,null],[12,"flags","","",29,null],[12,"format","","",29,null],[12,"w","","",29,null],[12,"h","","",29,null],[12,"pitch","","",29,null],[12,"pixels","","",29,null],[12,"userdata","","",29,null],[12,"locked","","",29,null],[12,"lock_data","","",29,null],[12,"clip_rect","","",29,null],[12,"map","","",29,null],[12,"refcount","","",29,null],[5,"SDL_CreateRGBSurface","","",null,null],[5,"SDL_CreateRGBSurfaceFrom","","",null,null],[5,"SDL_FreeSurface","","",null,null],[5,"SDL_SetSurfacePalette","","",null,null],[5,"SDL_LockSurface","","",null,null],[5,"SDL_UnlockSurface","","",null,null],[5,"SDL_LoadBMP_RW","","",null,null],[5,"SDL_SaveBMP_RW","","",null,null],[5,"SDL_SetSurfaceRLE","","",null,null],[5,"SDL_SetColorKey","","",null,null],[5,"SDL_GetColorKey","","",null,null],[5,"SDL_SetSurfaceColorMod","","",null,null],[5,"SDL_GetSurfaceColorMod","","",null,null],[5,"SDL_SetSurfaceAlphaMod","","",null,null],[5,"SDL_GetSurfaceAlphaMod","","",null,null],[5,"SDL_SetSurfaceBlendMode","","",null,null],[5,"SDL_GetSurfaceBlendMode","","",null,null],[5,"SDL_SetClipRect","","",null,null],[5,"SDL_GetClipRect","","",null,null],[5,"SDL_ConvertSurface","","",null,null],[5,"SDL_ConvertSurfaceFormat","","",null,null],[5,"SDL_ConvertPixels","","",null,null],[5,"SDL_FillRect","","",null,null],[5,"SDL_FillRects","","",null,null],[5,"SDL_UpperBlit","","",null,null],[5,"SDL_LowerBlit","","",null,null],[5,"SDL_SoftStretch","","",null,null],[5,"SDL_UpperBlitScaled","","",null,null],[5,"SDL_LowerBlitScaled","","",null,null],[6,"SDL_SurfaceFlag","","",null,null],[17,"SDL_SWSURFACE","","",null,null],[17,"SDL_PREALLOC","","",null,null],[17,"SDL_RLEACCEL","","",null,null],[17,"SDL_DONTFREE","","",null,null],[0,"touch","sdl2_sys","",null,null],[3,"Finger","sdl2_sys::touch","",null,null],[5,"SDL_GetNumTouchDevices","","",null,null],[5,"SDL_GetTouchDevice","","",null,null],[5,"SDL_GetNumTouchFingers","","",null,null],[5,"SDL_GetTouchFinger","","",null,null],[6,"SDL_TouchID","","",null,null],[6,"SDL_FingerID","","",null,null],[6,"SDL_Finger","","",null,null],[6,"TouchDevice","","",null,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"finger"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"finger"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"finger"}}],[0,"video","sdl2_sys","",null,null],[3,"SDL_Window","sdl2_sys::video","",null,null],[3,"SDL_DisplayMode","","",null,null],[12,"format","","",31,null],[12,"w","","",31,null],[12,"h","","",31,null],[12,"refresh_rate","","",31,null],[12,"driverdata","","",31,null],[4,"SDL_WindowFlags","","",null,null],[13,"SDL_WINDOW_FULLSCREEN","","",32,null],[13,"SDL_WINDOW_OPENGL","","",32,null],[13,"SDL_WINDOW_SHOWN","","",32,null],[13,"SDL_WINDOW_HIDDEN","","",32,null],[13,"SDL_WINDOW_BORDERLESS","","",32,null],[13,"SDL_WINDOW_RESIZABLE","","",32,null],[13,"SDL_WINDOW_MINIMIZED","","",32,null],[13,"SDL_WINDOW_MAXIMIZED","","",32,null],[13,"SDL_WINDOW_INPUT_GRABBED","","",32,null],[13,"SDL_WINDOW_INPUT_FOCUS","","",32,null],[13,"SDL_WINDOW_MOUSE_FOCUS","","",32,null],[13,"SDL_WINDOW_FULLSCREEN_DESKTOP","","",32,null],[13,"SDL_WINDOW_FOREIGN","","",32,null],[13,"SDL_WINDOW_ALLOW_HIGHDPI","","",32,null],[4,"SDL_WindowEventID","","",null,null],[13,"SDL_WINDOWEVENT_NONE","","",33,null],[13,"SDL_WINDOWEVENT_SHOWN","","",33,null],[13,"SDL_WINDOWEVENT_HIDDEN","","",33,null],[13,"SDL_WINDOWEVENT_EXPOSED","","",33,null],[13,"SDL_WINDOWEVENT_MOVED","","",33,null],[13,"SDL_WINDOWEVENT_RESIZED","","",33,null],[13,"SDL_WINDOWEVENT_SIZE_CHANGED","","",33,null],[13,"SDL_WINDOWEVENT_MINIMIZED","","",33,null],[13,"SDL_WINDOWEVENT_MAXIMIZED","","",33,null],[13,"SDL_WINDOWEVENT_RESTORED","","",33,null],[13,"SDL_WINDOWEVENT_ENTER","","",33,null],[13,"SDL_WINDOWEVENT_LEAVE","","",33,null],[13,"SDL_WINDOWEVENT_FOCUS_GAINED","","",33,null],[13,"SDL_WINDOWEVENT_FOCUS_LOST","","",33,null],[13,"SDL_WINDOWEVENT_CLOSE","","",33,null],[4,"SDL_GLattr","","",null,null],[13,"SDL_GL_RED_SIZE","","",34,null],[13,"SDL_GL_GREEN_SIZE","","",34,null],[13,"SDL_GL_BLUE_SIZE","","",34,null],[13,"SDL_GL_ALPHA_SIZE","","",34,null],[13,"SDL_GL_BUFFER_SIZE","","",34,null],[13,"SDL_GL_DOUBLEBUFFER","","",34,null],[13,"SDL_GL_DEPTH_SIZE","","",34,null],[13,"SDL_GL_STENCIL_SIZE","","",34,null],[13,"SDL_GL_ACCUM_RED_SIZE","","",34,null],[13,"SDL_GL_ACCUM_GREEN_SIZE","","",34,null],[13,"SDL_GL_ACCUM_BLUE_SIZE","","",34,null],[13,"SDL_GL_ACCUM_ALPHA_SIZE","","",34,null],[13,"SDL_GL_STEREO","","",34,null],[13,"SDL_GL_MULTISAMPLEBUFFERS","","",34,null],[13,"SDL_GL_MULTISAMPLESAMPLES","","",34,null],[13,"SDL_GL_ACCELERATED_VISUAL","","",34,null],[13,"SDL_GL_RETAINED_BACKING","","",34,null],[13,"SDL_GL_CONTEXT_MAJOR_VERSION","","",34,null],[13,"SDL_GL_CONTEXT_MINOR_VERSION","","",34,null],[13,"SDL_GL_CONTEXT_EGL","","",34,null],[13,"SDL_GL_CONTEXT_FLAGS","","",34,null],[13,"SDL_GL_CONTEXT_PROFILE_MASK","","",34,null],[13,"SDL_GL_SHARE_WITH_CURRENT_CONTEXT","","",34,null],[13,"SDL_GL_FRAMEBUFFER_SRGB_CAPABLE","","",34,null],[4,"SDL_GLprofile","","",null,null],[13,"SDL_GL_CONTEXT_PROFILE_CORE","","",35,null],[13,"SDL_GL_CONTEXT_PROFILE_COMPATIBILITY","","",35,null],[13,"SDL_GL_CONTEXT_PROFILE_ES","","",35,null],[5,"SDL_GetNumVideoDrivers","","",null,null],[5,"SDL_GetVideoDriver","","",null,null],[5,"SDL_VideoInit","","",null,null],[5,"SDL_VideoQuit","","",null,null],[5,"SDL_GetCurrentVideoDriver","","",null,null],[5,"SDL_GetNumVideoDisplays","","",null,null],[5,"SDL_GetDisplayName","","",null,null],[5,"SDL_GetDisplayBounds","","",null,null],[5,"SDL_GetNumDisplayModes","","",null,null],[5,"SDL_GetDisplayMode","","",null,null],[5,"SDL_GetDesktopDisplayMode","","",null,null],[5,"SDL_GetCurrentDisplayMode","","",null,null],[5,"SDL_GetClosestDisplayMode","","",null,null],[5,"SDL_GetWindowDisplayIndex","","",null,null],[5,"SDL_SetWindowDisplayMode","","",null,null],[5,"SDL_GetWindowDisplayMode","","",null,null],[5,"SDL_GetDisplayDPI","","",null,null],[5,"SDL_GetWindowPixelFormat","","",null,null],[5,"SDL_CreateWindow","","",null,null],[5,"SDL_CreateWindowFrom","","",null,null],[5,"SDL_GetWindowID","","",null,null],[5,"SDL_GetWindowFromID","","",null,null],[5,"SDL_GetWindowFlags","","",null,null],[5,"SDL_SetWindowTitle","","",null,null],[5,"SDL_GetWindowTitle","","",null,null],[5,"SDL_SetWindowIcon","","",null,null],[5,"SDL_SetWindowData","","",null,null],[5,"SDL_GetWindowData","","",null,null],[5,"SDL_SetWindowPosition","","",null,null],[5,"SDL_GetWindowPosition","","",null,null],[5,"SDL_SetWindowSize","","",null,null],[5,"SDL_GetWindowSize","","",null,null],[5,"SDL_SetWindowMinimumSize","","",null,null],[5,"SDL_GetWindowMinimumSize","","",null,null],[5,"SDL_SetWindowMaximumSize","","",null,null],[5,"SDL_GetWindowMaximumSize","","",null,null],[5,"SDL_SetWindowBordered","","",null,null],[5,"SDL_ShowWindow","","",null,null],[5,"SDL_HideWindow","","",null,null],[5,"SDL_RaiseWindow","","",null,null],[5,"SDL_MaximizeWindow","","",null,null],[5,"SDL_MinimizeWindow","","",null,null],[5,"SDL_RestoreWindow","","",null,null],[5,"SDL_SetWindowFullscreen","","",null,null],[5,"SDL_GetWindowSurface","","",null,null],[5,"SDL_UpdateWindowSurface","","",null,null],[5,"SDL_UpdateWindowSurfaceRects","","",null,null],[5,"SDL_SetWindowGrab","","",null,null],[5,"SDL_GetWindowGrab","","",null,null],[5,"SDL_SetWindowBrightness","","",null,null],[5,"SDL_GetWindowBrightness","","",null,null],[5,"SDL_SetWindowGammaRamp","","",null,null],[5,"SDL_GetWindowGammaRamp","","",null,null],[5,"SDL_DestroyWindow","","",null,null],[5,"SDL_IsScreenSaverEnabled","","",null,null],[5,"SDL_EnableScreenSaver","","",null,null],[5,"SDL_DisableScreenSaver","","",null,null],[5,"SDL_GL_GetDrawableSize","","",null,null],[5,"SDL_GL_LoadLibrary","","",null,null],[5,"SDL_GL_GetProcAddress","","",null,null],[5,"SDL_GL_UnloadLibrary","","",null,null],[5,"SDL_GL_ExtensionSupported","","",null,null],[5,"SDL_GL_SetAttribute","","",null,null],[5,"SDL_GL_GetAttribute","","",null,null],[5,"SDL_GL_CreateContext","","",null,null],[5,"SDL_GL_MakeCurrent","","",null,null],[5,"SDL_GL_GetCurrentWindow","","",null,null],[5,"SDL_GL_GetCurrentContext","","",null,null],[5,"SDL_GL_SetSwapInterval","","",null,null],[5,"SDL_GL_GetSwapInterval","","",null,null],[5,"SDL_GL_SwapWindow","","",null,null],[5,"SDL_GL_DeleteContext","","",null,null],[6,"SDL_WindowPos","","",null,null],[6,"SDL_GLContext","","",null,null],[17,"SDL_WINDOWPOS_CENTERED","","",null,null],[17,"SDL_WINDOWPOS_UNDEFINED","","",null,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sdl_windowflags"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"sdl_windoweventid"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sdl_glattr"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"sdl_glprofile"}}],[0,"mouse","sdl2_sys","",null,null],[5,"SDL_GetMouseFocus","sdl2_sys::mouse","",null,null],[5,"SDL_GetMouseState","","",null,null],[5,"SDL_GetRelativeMouseState","","",null,null],[5,"SDL_WarpMouseInWindow","","",null,null],[5,"SDL_SetRelativeMouseMode","","",null,null],[5,"SDL_GetRelativeMouseMode","","",null,null],[5,"SDL_CreateCursor","","",null,null],[5,"SDL_CreateColorCursor","","",null,null],[5,"SDL_CreateSystemCursor","","",null,null],[5,"SDL_SetCursor","","",null,null],[5,"SDL_GetCursor","","",null,null],[5,"SDL_GetDefaultCursor","","",null,null],[5,"SDL_FreeCursor","","",null,null],[5,"SDL_ShowCursor","","",null,null],[6,"SDL_Cursor","","",null,null],[6,"SDL_SystemCursor","","",null,null],[17,"SDL_SYSTEM_CURSOR_ARROW","","",null,null],[17,"SDL_SYSTEM_CURSOR_IBEAM","","",null,null],[17,"SDL_SYSTEM_CURSOR_WAIT","","",null,null],[17,"SDL_SYSTEM_CURSOR_CROSSHAIR","","",null,null],[17,"SDL_SYSTEM_CURSOR_WAITARROW","","",null,null],[17,"SDL_SYSTEM_CURSOR_SIZENWSE","","",null,null],[17,"SDL_SYSTEM_CURSOR_SIZENESW","","",null,null],[17,"SDL_SYSTEM_CURSOR_SIZEWE","","",null,null],[17,"SDL_SYSTEM_CURSOR_SIZENS","","",null,null],[17,"SDL_SYSTEM_CURSOR_SIZEALL","","",null,null],[17,"SDL_SYSTEM_CURSOR_NO","","",null,null],[17,"SDL_SYSTEM_CURSOR_HAND","","",null,null],[17,"SDL_NUM_SYSTEM_CURSORS","","",null,null],[17,"SDL_BUTTON_UNKNOWN","","",null,null],[17,"SDL_BUTTON_LEFT","","",null,null],[17,"SDL_BUTTON_MIDDLE","","",null,null],[17,"SDL_BUTTON_RIGHT","","",null,null],[17,"SDL_BUTTON_X1","","",null,null],[17,"SDL_BUTTON_X2","","",null,null],[17,"SDL_BUTTON_LMASK","","",null,null],[17,"SDL_BUTTON_MMASK","","",null,null],[17,"SDL_BUTTON_RMASK","","",null,null],[17,"SDL_BUTTON_X1MASK","","",null,null],[17,"SDL_BUTTON_X2MASK","","",null,null],[0,"sdl","sdl2_sys","",null,null],[5,"SDL_ClearError","sdl2_sys::sdl","",null,null],[5,"SDL_Error","","",null,null],[5,"SDL_SetError","","",null,null],[5,"SDL_GetError","","",null,null],[5,"SDL_Init","","",null,null],[5,"SDL_InitSubSystem","","",null,null],[5,"SDL_QuitSubSystem","","",null,null],[5,"SDL_WasInit","","",null,null],[5,"SDL_Quit","","",null,null],[6,"SDL_bool","","",null,null],[6,"SDL_errorcode","","",null,null],[6,"SDL_InitFlag","","",null,null],[17,"SDL_ENOMEM","","",null,null],[17,"SDL_EFREAD","","",null,null],[17,"SDL_EFWRITE","","",null,null],[17,"SDL_EFSEEK","","",null,null],[17,"SDL_UNSUPPORTED","","",null,null],[17,"SDL_LASTERROR","","",null,null],[17,"SDL_INIT_TIMER","","",null,null],[17,"SDL_INIT_AUDIO","","",null,null],[17,"SDL_INIT_VIDEO","","",null,null],[17,"SDL_INIT_JOYSTICK","","",null,null],[17,"SDL_INIT_HAPTIC","","",null,null],[17,"SDL_INIT_GAMECONTROLLER","","",null,null],[17,"SDL_INIT_EVENTS","","",null,null],[17,"SDL_INIT_NOPARACHUTE","","",null,null],[17,"SDL_INIT_EVERYTHING","","",null,null],[0,"timer","sdl2_sys","",null,null],[5,"SDL_GetTicks","sdl2_sys::timer","",null,null],[5,"SDL_GetPerformanceCounter","","",null,null],[5,"SDL_GetPerformanceFrequency","","",null,null],[5,"SDL_Delay","","",null,null],[5,"SDL_AddTimer","","",null,null],[5,"SDL_RemoveTimer","","",null,null],[6,"SDL_TimerCallback","","",null,null],[6,"SDL_TimerID","","",null,null],[0,"hint","sdl2_sys","",null,null],[4,"SDL_HintPriority","sdl2_sys::hint","",null,null],[13,"SDL_HINT_DEFAULT","","",36,null],[13,"SDL_HINT_NORMAL","","",36,null],[13,"SDL_HINT_OVERRIDE","","",36,null],[5,"SDL_SetHint","","",null,null],[5,"SDL_GetHint","","",null,null],[5,"SDL_SetHintWithPriority","","",null,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"sdl_hintpriority"}}]],"paths":[[3,"SDL_AudioSpec"],[3,"SDL_AudioCVT"],[3,"SDL_GameControllerButtonBind"],[3,"SDL_GameControllerButtonBindData"],[3,"SDL_GameControllerButtonBindDataHat"],[3,"SDL_HapticDirection"],[3,"SDL_HapticConstant"],[3,"SDL_HapticPeriodic"],[3,"SDL_HapticCondition"],[3,"SDL_HapticRamp"],[3,"SDL_HapticLeftRight"],[3,"SDL_HapticCustom"],[3,"SDL_HapticEffect"],[3,"SDL_JoystickGUID"],[3,"SDL_Keysym"],[3,"SDL_MessageBoxButtonData"],[3,"SDL_MessageBoxColor"],[3,"SDL_MessageBoxColorScheme"],[3,"SDL_MessageBoxData"],[4,"SDL_MessageBoxFlags"],[4,"SDL_MessageBoxButtonFlags"],[4,"SDL_MessageBoxColorType"],[3,"SDL_Point"],[3,"SDL_Rect"],[3,"SDL_Color"],[3,"SDL_Palette"],[3,"SDL_PixelFormat"],[3,"SDL_RendererInfo"],[3,"SDL_RWops"],[3,"SDL_Surface"],[3,"Finger"],[3,"SDL_DisplayMode"],[4,"SDL_WindowFlags"],[4,"SDL_WindowEventID"],[4,"SDL_GLattr"],[4,"SDL_GLprofile"],[4,"SDL_HintPriority"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec<u8>` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&[u8]` in order to serialize into a byte array.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytebuf"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",0,null],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",1,null],[11,"visit_byte_buf","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"visit_str","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"new","","Wrap an existing `&[u8]`.",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",2,null],[11,"deref","","",2,null],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by `Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option<T>` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"FieldName","","Represents a struct field name.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"VariantName","","Represents an enum variant name.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements Deserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_unit","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",7,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",8,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",9,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",10,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",11,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new sequence visitor.",12,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",13,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",14,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",15,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",16,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",17,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",18,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",19,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",20,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",21,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",22,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",23,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",24,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",25,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",26,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",27,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",28,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",29,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_map","","",29,{"inputs":[{"name":"self"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",30,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_map","","",30,{"inputs":[{"name":"self"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","","",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",32,null],[13,"InvalidType","","The value had an incorrect type.",32,null],[13,"InvalidLength","","The value had an invalid length.",32,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",32,null],[13,"EndOfStream","","EOF while deserializing a value.",32,null],[13,"UnknownVariant","","Unknown variant in enum.",32,null],[13,"UnknownField","","Unknown field in struct.",32,null],[13,"MissingField","","Struct is missing a field.",32,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",33,null],[10,"into_deserializer","","Convert this value into a deserializer.",33,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",32,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",32,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_struct_field","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",34,null],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_struct_field","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",35,null],[11,"deserialize_ignored_any","","",35,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_struct_field","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",36,null],[11,"deserialize_ignored_any","","",36,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",37,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",37,null],[11,"deserialize_struct_field","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",37,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",37,null],[11,"deserialize_ignored_any","","",37,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",38,null],[11,"deserialize_struct_field","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",38,null],[11,"deserialize_ignored_any","","",38,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",39,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",39,null],[11,"deserialize_struct_field","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",39,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",39,null],[11,"deserialize_ignored_any","","",39,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",39,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",40,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",40,null],[11,"deserialize_struct_field","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",40,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",40,null],[11,"deserialize_ignored_any","","",40,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",40,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",41,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",41,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",41,null],[11,"deserialize_struct_field","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",41,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",41,null],[11,"deserialize_ignored_any","","",41,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",42,null],[11,"deserialize_struct_field","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",42,null],[11,"deserialize_ignored_any","","",42,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",43,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",43,null],[11,"deserialize_struct_field","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",43,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",43,null],[11,"deserialize_ignored_any","","",43,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",43,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",44,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",44,null],[11,"deserialize_struct_field","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",44,null],[11,"deserialize_ignored_any","","",44,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",44,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",45,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",45,null],[11,"deserialize_struct_field","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",45,null],[11,"deserialize_ignored_any","","",45,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",46,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",46,null],[11,"deserialize_struct_field","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",46,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",46,null],[11,"deserialize_ignored_any","","",46,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",47,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",47,null],[11,"deserialize_struct_field","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",47,null],[11,"deserialize_ignored_any","","",47,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",47,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",48,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",48,null],[11,"deserialize_struct_field","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",48,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",48,null],[11,"deserialize_ignored_any","","",48,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",48,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",49,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",49,null],[11,"deserialize_bool","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",49,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",49,null],[11,"deserialize_struct_field","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",49,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",49,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",49,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",49,null],[11,"deserialize","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",50,null],[11,"deserialize_bool","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",50,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",50,null],[11,"deserialize_struct_field","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",50,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",50,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",50,null],[11,"deserialize","","",51,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",51,null],[11,"deserialize_bool","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",51,null],[11,"deserialize_struct_field","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",51,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype","","",51,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_tuple","","",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",51,null],[11,"new","","Construct a new `SeqDeserializer<I>`.",52,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",52,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",52,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",52,null],[11,"deserialize_struct_field","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",52,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",52,null],[11,"deserialize_ignored_any","","",52,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit","","",52,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",52,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",52,null],[11,"new","","Construct a new `SeqVisitorDeserializer<V_, E>`.",53,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",53,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",53,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",53,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",53,null],[11,"deserialize_struct_field","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",53,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",53,null],[11,"deserialize_ignored_any","","",53,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, K, V, E>` with a specific length.",54,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"unbounded","","Construct a new `MapDeserializer<I, K, V, E>` that is not bounded by a specific length and that delegates to `iter` for its size hint.",54,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deserialize","","",54,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",54,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",54,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",54,null],[11,"deserialize_struct_field","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",54,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",54,null],[11,"deserialize_ignored_any","","",54,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_key","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_value","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",54,null],[11,"visit","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"end","","",54,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",54,null],[11,"new","","Construct a new `MapVisitorDeserializer<V_, E>`.",55,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",55,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",55,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",55,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",55,null],[11,"deserialize_struct_field","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",55,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",55,null],[11,"deserialize_ignored_any","","",55,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",56,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",56,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",56,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",56,null],[11,"deserialize_struct_field","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",56,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",56,null],[11,"deserialize_ignored_any","","",56,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",57,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",57,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",57,null],[11,"deserialize_struct_field","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",57,null],[11,"deserialize_ignored_any","","",57,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a `Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",58,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",58,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",58,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",58,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same struct field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",59,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a value. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",60,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value. A reasonable default is to forward to `deserialize_u64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value. A reasonable default is to forward to `deserialize_i64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value. A reasonable default is to forward to `deserialize_f64`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&str` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows deserializers that encode an optional value as a nullable value to convert the null value into a `None`, and a regular value as `Some(value)`.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows deserializers to parse sequences that aren't tagged as sequences.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows deserializers to parse arrays that aren't tagged as arrays.",60,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec<u8>`. This allows deserializers that provide a custom byte vector serialization to properly deserialize the type.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows deserializers to parse sequences that aren't tagged as maps.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows deserializers to a unit struct that aren't tagged as a unit struct.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows deserializers to a newtype struct that aren't tagged as a newtype struct. A reasonable default is to simply deserialize the expected value directly.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows deserializers to parse sequences that aren't tagged as sequences.",60,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows deserializers to parse sequences that aren't tagged as maps.",60,null],[10,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field name.  This allows deserializers to choose between &str, usize, or &[u8] to properly deserialize a struct field.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows deserializers that provide a custom tuple serialization to properly deserialize the type.",60,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows deserializers that provide a custom enumeration serialization to properly deserialize the type.",60,null],[10,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",60,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",61,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&str` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid a copy if it is deserializing a string from a `String` type.  By default it passes a `&str` to the `visit_str` method.",61,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&[u8]` into a `Value`.",61,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec<u8>` into a `Value`.",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",62,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",62,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",63,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining items.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",63,null],[11,"missing_field","","Report that the struct has a field that wasn't deserialized",63,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the `Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",64,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",64,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",65,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",65,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",65,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. A good default is often to use the `visit_tuple` method to deserialize a `(value,)`.",65,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant. If no tuple variants are expected, yield a `Err(serde::de::Error::invalid_type(serde::de::Type::TupleVariant))`",65,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant. If no struct variants are expected, yield a `Err(serde::de::Error::invalid_type(serde::de::Type::StructVariant))`",65,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position's line and column.",null,null],[11,"new","","Construct a new `LineColIterator<Iter>`.",66,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",66,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework. # For Developers who want to serialize objects Implement the `Serialize` trait for the type of objects you want to serialize. Call methods of the `serializer` object. For which methods to call and how to do so, look at the documentation of the `Serializer` trait.",null,null],[0,"impls","serde::ser","Implementations for all of Rust's builtin types. Tuples implement the `Serialize` trait if they have at most 16 fields. Arrays implement the `Serialize` trait if their length is 32 or less. You can always forward array serialization to slice serialization, which works for any length. Long tuples are best replaced by tuple structs, for which you can use `derive(Serialize)`. In that case the number of fields is irrelevant.",null,null],[8,"Error","","`Error` is a trait that allows a `Serialize` to generically create a `Serializer` error.",null,null],[10,"custom","","Raised when there is a general error when serializing a type.",67,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",67,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",69,null],[16,"SeqState","","A state object that is initialized by `serialize_seq`, passed to `serialize_seq_elt`, and consumed by `serialize_seq_end`. Use `()` if no state is required.",69,null],[16,"TupleState","","A state object that is initialized by `serialize_tuple`, passed to `serialize_tuple_elt`, and consumed by `serialize_tuple_end`. Use `()` if no state is required.",69,null],[16,"TupleStructState","","A state object that is initialized by `serialize_tuple_struct`, passed to `serialize_tuple_struct_elt`, and consumed by `serialize_tuple_struct_end`. Use `()` if no state is required.",69,null],[16,"TupleVariantState","","A state object that is initialized by `serialize_tuple_variant`, passed to `serialize_tuple_variant_elt`, and consumed by `serialize_tuple_variant_end`. Use `()` if no state is required.",69,null],[16,"MapState","","A state object that is initialized by `serialize_map`, passed to `serialize_map_elt`, and consumed by `serialize_map_end`. Use `()` if no state is required.",69,null],[16,"StructState","","A state object that is initialized by `serialize_struct`, passed to `serialize_struct_elt`, and consumed by `serialize_struct_end`. Use `()` if no state is required.",69,null],[16,"StructVariantState","","A state object that is initialized by `serialize_struct_variant`, passed to `serialize_struct_variant_elt`, and consumed by `serialize_struct_variant_end`. Use `()` if no state is required.",69,null],[10,"serialize_bool","","Serializes a `bool` value.",69,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_isize","","Serializes an `isize` value. If the format does not differentiate between `isize` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serializes an `i8` value. If the format does not differentiate between `i8` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serializes an `i16` value. If the format does not differentiate between `i16` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serializes an `i32` value. If the format does not differentiate between `i32` and `i64`, a reasonable implementation would be to cast the value to `i64` and forward to `serialize_i64`.",69,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serializes an `i64` value.",69,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_usize","","Serializes a `usize` value. If the format does not differentiate between `usize` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serializes a `u8` value. If the format does not differentiate between `u8` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serializes a `u16` value. If the format does not differentiate between `u16` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serializes a `u32` value. If the format does not differentiate between `u32` and `u64`, a reasonable implementation would be to cast the value to `u64` and forward to `serialize_u64`.",69,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","`Serializes a `u64` value.",69,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serializes an `f32` value. If the format does not differentiate between `f32` and `f64`, a reasonable implementation would be to cast the value to `f64` and forward to `serialize_f64`.",69,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serializes an `f64` value.",69,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serializes a character. If the format does not support characters, it is reasonable to serialize it as a single element `str` or a `u32`.",69,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serializes a `&str`.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Enables serializers to serialize byte slices more compactly or more efficiently than other types of slices. If no efficient implementation is available, a reasonable implementation would be to forward to `serialize_seq`. If forwarded, the implementation looks usually just like this: ```rust let mut state = try!(self.serialize_seq(value)); for b in value {     try!(self.serialize_seq_elt(&mut state, b)); } self.serialize_seq_end(state) ```",69,null],[10,"serialize_unit","","Serializes a `()` value. It's reasonable to just not serialize anything.",69,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serializes a unit struct value. A reasonable implementation would be to forward to `serialize_unit`.",69,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments. A reasonable implementation would be to forward to `serialize_unit`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a newtype struct, to be more efficiently serialized than a tuple struct with multiple items. A reasonable implementation would be to forward to `serialize_tuple_struct` or to just serialize the inner value without wrapping.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently serialized than a variant with multiple items. A reasonable implementation would be to forward to `serialize_tuple_variant`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_none","","Serializes a `None` value.",69,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serializes a `Some(...)` value.",69,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begins to serialize a sequence. This call must be followed by zero or more calls to `serialize_seq_elt`, then a call to `serialize_seq_end`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_elt","","Serializes a sequence element. Must have previously called `serialize_seq`.",69,null],[10,"serialize_seq_end","","Finishes serializing a sequence.",69,null],[10,"serialize_seq_fixed_size","","Begins to serialize a sequence whose length will be known at deserialization time. This call must be followed by zero or more calls to `serialize_seq_elt`, then a call to `serialize_seq_end`. A reasonable implementation would be to forward to `serialize_seq`.",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begins to serialize a tuple. This call must be followed by zero or more calls to `serialize_tuple_elt`, then a call to `serialize_tuple_end`. A reasonable implementation would be to forward to `serialize_seq`.",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_elt","","Serializes a tuple element. Must have previously called `serialize_tuple`.",69,null],[10,"serialize_tuple_end","","Finishes serializing a tuple.",69,null],[10,"serialize_tuple_struct","","Begins to serialize a tuple struct. This call must be followed by zero or more calls to `serialize_tuple_struct_elt`, then a call to `serialize_tuple_struct_end`. A reasonable implementation would be to forward to `serialize_tuple`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct_elt","","Serializes a tuple struct element. Must have previously called `serialize_tuple_struct`.",69,null],[10,"serialize_tuple_struct_end","","Finishes serializing a tuple struct.",69,null],[10,"serialize_tuple_variant","","Begins to serialize a tuple variant. This call must be followed by zero or more calls to `serialize_tuple_variant_elt`, then a call to `serialize_tuple_variant_end`. A reasonable implementation would be to forward to `serialize_tuple_struct`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant_elt","","Serializes a tuple variant element. Must have previously called `serialize_tuple_variant`.",69,null],[10,"serialize_tuple_variant_end","","Finishes serializing a tuple variant.",69,null],[10,"serialize_map","","Begins to serialize a map. This call must be followed by zero or more calls to `serialize_map_key` and `serialize_map_value`, then a call to `serialize_map_end`.",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_map_key","","Serialize a map key. Must have previously called `serialize_map`.",69,null],[10,"serialize_map_value","","Serialize a map value. Must have previously called `serialize_map`.",69,null],[10,"serialize_map_end","","Finishes serializing a map.",69,null],[10,"serialize_struct","","Begins to serialize a struct. This call must be followed by zero or more calls to `serialize_struct_elt`, then a call to `serialize_struct_end`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_elt","","Serializes a struct field. Must have previously called `serialize_struct`.",69,null],[10,"serialize_struct_end","","Finishes serializing a struct.",69,null],[10,"serialize_struct_variant","","Begins to serialize a struct variant. This call must be followed by zero or more calls to `serialize_struct_variant_elt`, then a call to `serialize_struct_variant_end`.",69,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant_elt","","Serialize a struct variant element. Must have previously called `serialize_struct_variant`.",69,null],[10,"serialize_struct_variant_end","","Finishes serializing a struct variant.",69,null],[14,"forward_to_deserialize","serde","Helper to forward `Deserializer` methods to `Deserializer::deserialize`. Every given method ignores all arguments and forwards to `deserialize`. Note that `deserialize_enum` simply returns an `Error::invalid_type`; a better approach is tracked in [serde-rs/serde#521][1].",null,null]],"paths":[[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[8,"Error"],[8,"Serialize"],[8,"Serializer"]]};
searchIndex["serde_codegen"] = {"doc":"","items":[],"paths":[]};
searchIndex["serde_codegen_internals"] = {"doc":"","items":[[3,"Ctxt","serde_codegen_internals","",null,null],[0,"ast","","",null,null],[3,"Item","serde_codegen_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"item"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[0,"attr","serde_codegen_internals","",null,null],[3,"Name","serde_codegen_internals::attr","",null,null],[3,"Item","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"FieldDefault","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",5,null],[13,"Default","","The default is given by `std::default::Default::default()`.",5,null],[13,"Path","","The default is given by this function.",5,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",7,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"self"}}],[11,"name","","",7,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"deny_unknown_fields","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ser_bound","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",8,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",8,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"skip_deserializing","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fielddefault"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"fielddefault"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",9,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"skip_serializing","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",9,{"inputs":[{"name":"self"}],"output":{"name":"fielddefault"}}],[11,"serialize_with","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ser_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","serde_codegen_internals","",10,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Item"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"FieldDefault"],[3,"Name"],[3,"Item"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_derive"] = {"doc":"","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","",null,null],[12,"ident","","",1,null],[12,"vis","","",1,null],[12,"attrs","","",1,null],[12,"ty","","",1,null],[3,"Variant","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"data","","",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",9,null],[12,"bounds","","",9,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"MacroInput","","",null,null],[12,"ident","","",10,null],[12,"vis","","",10,null],[12,"attrs","","",10,null],[12,"generics","","",10,null],[12,"body","","",10,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",11,null],[12,"types","","The type parameters for this path segment, if present.",11,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",11,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",12,null],[12,"ty","","",12,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",13,null],[12,"abi","","",13,null],[12,"lifetimes","","",13,null],[12,"inputs","","",13,null],[12,"output","","",13,null],[12,"variadic","","",13,null],[3,"MutTy","","",null,null],[12,"ty","","",14,null],[12,"mutability","","",14,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",15,null],[12,"output","","`C`",15,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","",16,null],[12,"segments","","",16,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","",17,null],[12,"parameters","","",17,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",18,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",18,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",19,null],[12,"position","","",19,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",20,null],[12,"ty","","",20,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","",21,null],[13,"Inner","","",21,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",22,null],[13,"List","","List meta item.",22,null],[13,"NameValue","","Name value meta item.",22,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",23,null],[13,"Literal","","A literal.",23,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",24,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",24,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",24,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",24,null],[13,"Cast","","A cast (`foo as f64`)",24,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::<baz>.",24,null],[13,"Index","","An indexing operation (`foo[2]`)",24,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",24,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",24,null],[4,"VariantData","","",null,null],[13,"Struct","","",25,null],[13,"Tuple","","",25,null],[13,"Unit","","",25,null],[4,"Visibility","","",null,null],[13,"Public","","",26,null],[13,"Crate","","",26,null],[13,"Restricted","","",26,null],[13,"Inherited","","",26,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",27,null],[13,"Maybe","","",27,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",28,null],[13,"Region","","",28,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",29,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",29,null],[4,"FloatTy","","",null,null],[13,"F32","","",30,null],[13,"F64","","",30,null],[13,"Unsuffixed","","",30,null],[4,"IntTy","","",null,null],[13,"Isize","","",31,null],[13,"I8","","",31,null],[13,"I16","","",31,null],[13,"I32","","",31,null],[13,"I64","","",31,null],[13,"Usize","","",31,null],[13,"U8","","",31,null],[13,"U16","","",31,null],[13,"U32","","",31,null],[13,"U64","","",31,null],[13,"Unsuffixed","","",31,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",32,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",32,null],[13,"Byte","","A byte char (`b'f'`)",32,null],[13,"Char","","A character literal (`'a'`)",32,null],[13,"Int","","An integer literal (`1`)",32,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",32,null],[13,"Bool","","A boolean literal",32,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",33,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",33,null],[4,"Body","","",null,null],[13,"Enum","","",34,null],[13,"Struct","","",34,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",35,null],[13,"Sub","","The `-` operator (subtraction)",35,null],[13,"Mul","","The `*` operator (multiplication)",35,null],[13,"Div","","The `/` operator (division)",35,null],[13,"Rem","","The `%` operator (modulus)",35,null],[13,"And","","The `&&` operator (logical and)",35,null],[13,"Or","","The `||` operator (logical or)",35,null],[13,"BitXor","","The `^` operator (bitwise xor)",35,null],[13,"BitAnd","","The `&` operator (bitwise and)",35,null],[13,"BitOr","","The `|` operator (bitwise or)",35,null],[13,"Shl","","The `<<` operator (shift left)",35,null],[13,"Shr","","The `>>` operator (shift right)",35,null],[13,"Eq","","The `==` operator (equality)",35,null],[13,"Lt","","The `<` operator (less than)",35,null],[13,"Le","","The `<=` operator (less than or equal to)",35,null],[13,"Ne","","The `!=` operator (not equal to)",35,null],[13,"Ge","","The `>=` operator (greater than or equal to)",35,null],[13,"Gt","","The `>` operator (greater than)",35,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",36,null],[13,"Not","","The `!` operator for logical inversion",36,null],[13,"Neg","","The `-` operator for negation",36,null],[4,"Abi","","",null,null],[13,"Named","","",37,null],[13,"Rust","","",37,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",38,null],[13,"Ty","","Everything else",38,null],[4,"Mutability","","",null,null],[13,"Mutable","","",39,null],[13,"Immutable","","",39,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",40,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",40,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",41,null],[13,"Array","","A fixed length array (`[T; n]`)",41,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",41,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",41,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",41,null],[13,"Never","","The never type (`!`)",41,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",41,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",41,null],[13,"ObjectSum","","Something like `A+B`. Note that `B` must always be a path.",41,null],[13,"PolyTraitRef","","A type like `for<'a> Foo<&'a Bar>`",41,null],[13,"ImplTrait","","An `impl TraitA+TraitB` type.",41,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",41,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",41,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",42,null],[13,"Normal","","",42,null],[5,"parse_macro_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"aster","","",null,null],[5,"id","syn::aster","",null,{"inputs":[{"name":"i"}],"output":{"name":"ident"}}],[5,"from_generics","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"genericsbuilder"}}],[5,"where_predicate","","",null,{"inputs":[],"output":{"name":"wherepredicatebuilder"}}],[5,"ty","","",null,{"inputs":[],"output":{"name":"tybuilder"}}],[5,"path","","",null,{"inputs":[],"output":{"name":"pathbuilder"}}],[0,"generics","","",null,null],[3,"GenericsBuilder","syn::aster::generics","",null,null],[11,"new","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"from_generics","","",43,{"inputs":[{"name":"generics"}],"output":{"name":"self"}}],[11,"with_callback","","",43,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"from_generics_with_callback","","",43,{"inputs":[{"name":"generics"},{"name":"f"}],"output":{"name":"self"}}],[11,"with","","",43,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime_names","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",43,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"lifetime_name","","",43,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"lifetime","","",43,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_ty_params","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param_ids","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param","","",43,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"ty_param_id","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"ty_param","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"typarambuilder"}}],[11,"with_predicates","","",43,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_predicate","","",43,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[11,"predicate","","",43,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicatebuilder"}}],[11,"add_lifetime_bound","","",43,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"add_ty_param_bound","","",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"strip_bounds","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_lifetimes","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_ty_params","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_predicates","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"build","","",43,null],[11,"invoke","","",43,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",43,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"invoke","","",43,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[0,"ident","syn::aster","",null,null],[8,"ToIdent","syn::aster::ident","",null,null],[10,"to_ident","","",44,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"to_ident","syn","",45,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[0,"invoke","syn::aster","",null,null],[3,"Identity","syn::aster::invoke","",null,null],[8,"Invoke","","",null,null],[16,"Result","","",46,null],[10,"invoke","","",46,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"identity"}}],[11,"invoke","","",47,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"a"}}],[0,"lifetime","syn::aster","",null,null],[3,"LifetimeDefBuilder","syn::aster::lifetime","",null,null],[8,"IntoLifetime","","",null,null],[10,"into_lifetime","","",48,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[8,"IntoLifetimeDef","","",null,null],[10,"into_lifetime_def","","",49,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime","syn","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"into_lifetime_def","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime_def","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"new","syn::aster::lifetime","",50,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"with_callback","","",50,{"inputs":[{"name":"n"},{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",50,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build","","",50,null],[0,"path","syn::aster","",null,null],[3,"PathBuilder","syn::aster::path","",null,null],[3,"PathSegmentsBuilder","","",null,null],[3,"PathSegmentBuilder","","",null,null],[3,"TypeBindingBuilder","","",null,null],[3,"PathSegmentReturnBuilder","","",null,null],[8,"IntoPath","","",null,null],[10,"into_path","","",51,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","syn","",16,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","",45,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"new","syn::aster::path","",52,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",52,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",52,null],[11,"global","","",52,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ids","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentbuilder"}}],[11,"ids","","",53,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",53,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"build","","",53,null],[11,"invoke","","",53,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"self"}}],[11,"with_callback","","",54,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_generics","","",54,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",54,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",54,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",54,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"with_tys","","",54,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",54,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",54,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_binding","","",54,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"self"}}],[11,"binding","","",54,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"tybuilder"}}],[11,"no_return","","",54,null],[11,"return_","","",54,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build_return","","",54,null],[11,"build","","",54,null],[11,"invoke","","",54,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",55,null],[11,"invoke","","",56,null],[0,"qpath","syn::aster","",null,null],[3,"QPathBuilder","syn::aster::qpath","",null,null],[3,"QPathTyBuilder","","",null,null],[3,"QPathQSelfBuilder","","",null,null],[11,"new","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","Construct a `QPathBuilder` that will call the `callback` with a constructed `QSelf` and `Path`.",57,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_ty","","Build a qualified path first by starting with a type builder.",57,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"ty","","Build a qualified path first by starting with a type builder.",57,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","Build a qualified path with a concrete type and path.",57,null],[11,"invoke","","",57,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"as_","","Build a qualified path with a path builder.",58,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"id","","",58,null],[11,"segment","","",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"qpathqselfbuilder"}}],[11,"id","","",59,null],[11,"segment","","",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",59,null],[0,"ty","syn::aster","",null,null],[3,"TyBuilder","syn::aster::ty","",null,null],[3,"TyPathBuilder","","",null,null],[3,"TyQPathBuilder","","",null,null],[3,"TySliceBuilder","","",null,null],[3,"TyRefBuilder","","",null,null],[3,"TyOptionBuilder","","",null,null],[3,"TyResultOkBuilder","","",null,null],[3,"TyResultErrBuilder","","",null,null],[3,"TyPhantomDataBuilder","","",null,null],[3,"TyBoxBuilder","","",null,null],[3,"TyIteratorBuilder","","",null,null],[3,"TyObjectSumBuilder","","",null,null],[3,"TyObjectSumTyBuilder","","",null,null],[3,"TyImplTraitTyBuilder","","",null,null],[3,"TyTupleBuilder","","",null,null],[11,"new","","",60,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",60,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",60,null],[11,"id","","",60,null],[11,"build_path","","",60,null],[11,"build_qpath","","",60,null],[11,"path","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"qpath","","",60,{"inputs":[{"name":"self"}],"output":{"name":"qpathbuilder"}}],[11,"isize","","",60,null],[11,"i8","","",60,null],[11,"i16","","",60,null],[11,"i32","","",60,null],[11,"i64","","",60,null],[11,"usize","","",60,null],[11,"u8","","",60,null],[11,"u16","","",60,null],[11,"u32","","",60,null],[11,"u64","","",60,null],[11,"f32","","",60,null],[11,"f64","","",60,null],[11,"bool","","",60,null],[11,"unit","","",60,null],[11,"tuple","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tytuplebuilder"}}],[11,"build_slice","","",60,null],[11,"slice","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"ref_","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tyrefbuilder"}}],[11,"never","","",60,null],[11,"infer","","",60,null],[11,"option","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"result","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"phantom_data","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"box_","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"iterator","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"object_sum","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"impl_trait","","",60,{"inputs":[{"name":"self"}],"output":{"name":"tyimpltraittybuilder"}}],[11,"invoke","","",61,null],[11,"invoke","","",62,null],[11,"invoke","","",63,null],[11,"mut_","","",64,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"lifetime","","",64,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build_ty","","",64,null],[11,"ty","","",64,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",64,null],[11,"invoke","","",65,null],[11,"invoke","","",66,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",67,null],[11,"invoke","","",68,null],[11,"invoke","","",69,null],[11,"invoke","","",70,null],[11,"invoke","","",71,null],[11,"with_bounds","","",72,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",72,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",72,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_generics","","",72,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",72,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"lifetime","","",72,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",72,null],[11,"invoke","","",72,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"with_bounds","","",73,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",73,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",73,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_generics","","",73,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",73,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"lifetime","","",73,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",73,null],[11,"invoke","","",73,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"with_tys","","",74,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",74,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",74,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","",74,null],[11,"invoke","","",74,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[0,"ty_param","syn::aster","",null,null],[3,"TyParamBuilder","syn::aster::ty_param","",null,null],[3,"TyParamBoundBuilder","","",null,null],[3,"TraitTyParamBoundBuilder","","",null,null],[3,"PolyTraitRefBuilder","","",null,null],[11,"new","","",75,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_ty_param","","",75,{"inputs":[{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_callback","","",75,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_ty_param_with_callback","","",75,{"inputs":[{"name":"f"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_default","","",75,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"default","","",75,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_bound","","",75,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",75,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_trait_bound","","",75,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"trait_bound","","",75,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime_bound","","",75,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",75,null],[11,"invoke","","",75,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",75,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"invoke","","",75,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"new","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",76,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build_trait","","",76,null],[11,"trait_","","",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"maybe_trait","","",76,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"iterator","","",76,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",76,null],[11,"invoke","","",77,null],[11,"with_callback","","",78,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_lifetime","","",78,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",78,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"build","","",78,null],[11,"invoke","","",78,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[0,"where_predicate","syn::aster","",null,null],[3,"WherePredicateBuilder","syn::aster::where_predicate","",null,null],[3,"WhereBoundPredicateBuilder","","",null,null],[3,"WhereBoundPredicateTyBuilder","","",null,null],[3,"WhereBoundPredicateTyBoundsBuilder","","",null,null],[3,"WhereRegionPredicateBuilder","","",null,null],[11,"new","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",79,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",79,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"lifetime","","",79,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereregionpredicatebuilder"}}],[11,"invoke","","",79,null],[11,"invoke","","",80,null],[11,"with_for_lifetime","","",81,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",81,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",81,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"bound","","",81,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",81,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",81,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"invoke","","",81,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",81,null],[11,"with_for_lifetime","","",82,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",82,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",82,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",82,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",82,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",82,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",82,null],[11,"invoke","","",82,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",82,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",83,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",83,null],[11,"to_tokens","syn","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fields","","",25,null],[11,"fields_mut","","",25,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",84,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",85,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",45,null],[11,"new","","",45,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",45,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",45,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",45,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",45,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"from","","",32,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",32,null],[11,"from","","",32,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"from","","",32,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",32,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"macroinput"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"macroinput"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"macroinput"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"op","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"from","","",16,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"from","","",17,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"none","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",11,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_macro_input","","",null,{"inputs":[{"name":"v"},{"name":"macroinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",86,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_macro_input","","",86,{"inputs":[{"name":"self"},{"name":"macroinput"}],"output":null}],[11,"visit_ty","","",86,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",86,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",86,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",86,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",86,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",86,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",86,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",86,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",86,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",86,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",86,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",86,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",86,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",86,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",86,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",86,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",86,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[14,"walk_list","syn","",null,null]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereRegionPredicate"],[3,"MacroInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"GenericsBuilder"],[8,"ToIdent"],[3,"Ident"],[8,"Invoke"],[3,"Identity"],[8,"IntoLifetime"],[8,"IntoLifetimeDef"],[3,"LifetimeDefBuilder"],[8,"IntoPath"],[3,"PathBuilder"],[3,"PathSegmentsBuilder"],[3,"PathSegmentBuilder"],[3,"TypeBindingBuilder"],[3,"PathSegmentReturnBuilder"],[3,"QPathBuilder"],[3,"QPathTyBuilder"],[3,"QPathQSelfBuilder"],[3,"TyBuilder"],[3,"TyPathBuilder"],[3,"TyQPathBuilder"],[3,"TySliceBuilder"],[3,"TyRefBuilder"],[3,"TyOptionBuilder"],[3,"TyResultOkBuilder"],[3,"TyResultErrBuilder"],[3,"TyPhantomDataBuilder"],[3,"TyBoxBuilder"],[3,"TyIteratorBuilder"],[3,"TyObjectSumBuilder"],[3,"TyObjectSumTyBuilder"],[3,"TyImplTraitTyBuilder"],[3,"TyTupleBuilder"],[3,"TyParamBuilder"],[3,"TyParamBoundBuilder"],[3,"TraitTyParamBoundBuilder"],[3,"PolyTraitRefBuilder"],[3,"WherePredicateBuilder"],[3,"WhereBoundPredicateBuilder"],[3,"WhereBoundPredicateTyBuilder"],[3,"WhereBoundPredicateTyBoundsBuilder"],[3,"WhereRegionPredicateBuilder"],[3,"ImplGenerics"],[3,"TyGenerics"],[8,"Visitor"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["typenum"] = {"doc":"This crate provides type-level numbers evaluated at compile time. It depends only on libcore.","items":[[3,"Greater","typenum","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Greater`.",null,null],[3,"Less","","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Less`.",null,null],[3,"Equal","","A potential output from `Cmp`, this is the type equivalent to the enum variant `core::cmp::Ordering::Equal`.",null,null],[0,"consts","","This module defines aliases for many constants. It is generated by typenum's build script.",null,null],[6,"U0","typenum::consts","",null,null],[6,"U1","","",null,null],[6,"P1","","",null,null],[6,"N1","","",null,null],[6,"U2","","",null,null],[6,"P2","","",null,null],[6,"N2","","",null,null],[6,"U3","","",null,null],[6,"P3","","",null,null],[6,"N3","","",null,null],[6,"U4","","",null,null],[6,"P4","","",null,null],[6,"N4","","",null,null],[6,"U5","","",null,null],[6,"P5","","",null,null],[6,"N5","","",null,null],[6,"U6","","",null,null],[6,"P6","","",null,null],[6,"N6","","",null,null],[6,"U7","","",null,null],[6,"P7","","",null,null],[6,"N7","","",null,null],[6,"U8","","",null,null],[6,"P8","","",null,null],[6,"N8","","",null,null],[6,"U9","","",null,null],[6,"P9","","",null,null],[6,"N9","","",null,null],[6,"U10","","",null,null],[6,"P10","","",null,null],[6,"N10","","",null,null],[6,"U11","","",null,null],[6,"P11","","",null,null],[6,"N11","","",null,null],[6,"U12","","",null,null],[6,"P12","","",null,null],[6,"N12","","",null,null],[6,"U13","","",null,null],[6,"P13","","",null,null],[6,"N13","","",null,null],[6,"U14","","",null,null],[6,"P14","","",null,null],[6,"N14","","",null,null],[6,"U15","","",null,null],[6,"P15","","",null,null],[6,"N15","","",null,null],[6,"U16","","",null,null],[6,"P16","","",null,null],[6,"N16","","",null,null],[6,"U17","","",null,null],[6,"P17","","",null,null],[6,"N17","","",null,null],[6,"U18","","",null,null],[6,"P18","","",null,null],[6,"N18","","",null,null],[6,"U19","","",null,null],[6,"P19","","",null,null],[6,"N19","","",null,null],[6,"U20","","",null,null],[6,"P20","","",null,null],[6,"N20","","",null,null],[6,"U21","","",null,null],[6,"P21","","",null,null],[6,"N21","","",null,null],[6,"U22","","",null,null],[6,"P22","","",null,null],[6,"N22","","",null,null],[6,"U23","","",null,null],[6,"P23","","",null,null],[6,"N23","","",null,null],[6,"U24","","",null,null],[6,"P24","","",null,null],[6,"N24","","",null,null],[6,"U25","","",null,null],[6,"P25","","",null,null],[6,"N25","","",null,null],[6,"U26","","",null,null],[6,"P26","","",null,null],[6,"N26","","",null,null],[6,"U27","","",null,null],[6,"P27","","",null,null],[6,"N27","","",null,null],[6,"U28","","",null,null],[6,"P28","","",null,null],[6,"N28","","",null,null],[6,"U29","","",null,null],[6,"P29","","",null,null],[6,"N29","","",null,null],[6,"U30","","",null,null],[6,"P30","","",null,null],[6,"N30","","",null,null],[6,"U31","","",null,null],[6,"P31","","",null,null],[6,"N31","","",null,null],[6,"U32","","",null,null],[6,"P32","","",null,null],[6,"N32","","",null,null],[6,"U33","","",null,null],[6,"P33","","",null,null],[6,"N33","","",null,null],[6,"U34","","",null,null],[6,"P34","","",null,null],[6,"N34","","",null,null],[6,"U35","","",null,null],[6,"P35","","",null,null],[6,"N35","","",null,null],[6,"U36","","",null,null],[6,"P36","","",null,null],[6,"N36","","",null,null],[6,"U37","","",null,null],[6,"P37","","",null,null],[6,"N37","","",null,null],[6,"U38","","",null,null],[6,"P38","","",null,null],[6,"N38","","",null,null],[6,"U39","","",null,null],[6,"P39","","",null,null],[6,"N39","","",null,null],[6,"U40","","",null,null],[6,"P40","","",null,null],[6,"N40","","",null,null],[6,"U41","","",null,null],[6,"P41","","",null,null],[6,"N41","","",null,null],[6,"U42","","",null,null],[6,"P42","","",null,null],[6,"N42","","",null,null],[6,"U43","","",null,null],[6,"P43","","",null,null],[6,"N43","","",null,null],[6,"U44","","",null,null],[6,"P44","","",null,null],[6,"N44","","",null,null],[6,"U45","","",null,null],[6,"P45","","",null,null],[6,"N45","","",null,null],[6,"U46","","",null,null],[6,"P46","","",null,null],[6,"N46","","",null,null],[6,"U47","","",null,null],[6,"P47","","",null,null],[6,"N47","","",null,null],[6,"U48","","",null,null],[6,"P48","","",null,null],[6,"N48","","",null,null],[6,"U49","","",null,null],[6,"P49","","",null,null],[6,"N49","","",null,null],[6,"U50","","",null,null],[6,"P50","","",null,null],[6,"N50","","",null,null],[6,"U51","","",null,null],[6,"P51","","",null,null],[6,"N51","","",null,null],[6,"U52","","",null,null],[6,"P52","","",null,null],[6,"N52","","",null,null],[6,"U53","","",null,null],[6,"P53","","",null,null],[6,"N53","","",null,null],[6,"U54","","",null,null],[6,"P54","","",null,null],[6,"N54","","",null,null],[6,"U55","","",null,null],[6,"P55","","",null,null],[6,"N55","","",null,null],[6,"U56","","",null,null],[6,"P56","","",null,null],[6,"N56","","",null,null],[6,"U57","","",null,null],[6,"P57","","",null,null],[6,"N57","","",null,null],[6,"U58","","",null,null],[6,"P58","","",null,null],[6,"N58","","",null,null],[6,"U59","","",null,null],[6,"P59","","",null,null],[6,"N59","","",null,null],[6,"U60","","",null,null],[6,"P60","","",null,null],[6,"N60","","",null,null],[6,"U61","","",null,null],[6,"P61","","",null,null],[6,"N61","","",null,null],[6,"U62","","",null,null],[6,"P62","","",null,null],[6,"N62","","",null,null],[6,"U63","","",null,null],[6,"P63","","",null,null],[6,"N63","","",null,null],[6,"U64","","",null,null],[6,"P64","","",null,null],[6,"N64","","",null,null],[6,"U65","","",null,null],[6,"P65","","",null,null],[6,"N65","","",null,null],[6,"U66","","",null,null],[6,"P66","","",null,null],[6,"N66","","",null,null],[6,"U67","","",null,null],[6,"P67","","",null,null],[6,"N67","","",null,null],[6,"U68","","",null,null],[6,"P68","","",null,null],[6,"N68","","",null,null],[6,"U69","","",null,null],[6,"P69","","",null,null],[6,"N69","","",null,null],[6,"U70","","",null,null],[6,"P70","","",null,null],[6,"N70","","",null,null],[6,"U71","","",null,null],[6,"P71","","",null,null],[6,"N71","","",null,null],[6,"U72","","",null,null],[6,"P72","","",null,null],[6,"N72","","",null,null],[6,"U73","","",null,null],[6,"P73","","",null,null],[6,"N73","","",null,null],[6,"U74","","",null,null],[6,"P74","","",null,null],[6,"N74","","",null,null],[6,"U75","","",null,null],[6,"P75","","",null,null],[6,"N75","","",null,null],[6,"U76","","",null,null],[6,"P76","","",null,null],[6,"N76","","",null,null],[6,"U77","","",null,null],[6,"P77","","",null,null],[6,"N77","","",null,null],[6,"U78","","",null,null],[6,"P78","","",null,null],[6,"N78","","",null,null],[6,"U79","","",null,null],[6,"P79","","",null,null],[6,"N79","","",null,null],[6,"U80","","",null,null],[6,"P80","","",null,null],[6,"N80","","",null,null],[6,"U81","","",null,null],[6,"P81","","",null,null],[6,"N81","","",null,null],[6,"U82","","",null,null],[6,"P82","","",null,null],[6,"N82","","",null,null],[6,"U83","","",null,null],[6,"P83","","",null,null],[6,"N83","","",null,null],[6,"U84","","",null,null],[6,"P84","","",null,null],[6,"N84","","",null,null],[6,"U85","","",null,null],[6,"P85","","",null,null],[6,"N85","","",null,null],[6,"U86","","",null,null],[6,"P86","","",null,null],[6,"N86","","",null,null],[6,"U87","","",null,null],[6,"P87","","",null,null],[6,"N87","","",null,null],[6,"U88","","",null,null],[6,"P88","","",null,null],[6,"N88","","",null,null],[6,"U89","","",null,null],[6,"P89","","",null,null],[6,"N89","","",null,null],[6,"U90","","",null,null],[6,"P90","","",null,null],[6,"N90","","",null,null],[6,"U91","","",null,null],[6,"P91","","",null,null],[6,"N91","","",null,null],[6,"U92","","",null,null],[6,"P92","","",null,null],[6,"N92","","",null,null],[6,"U93","","",null,null],[6,"P93","","",null,null],[6,"N93","","",null,null],[6,"U94","","",null,null],[6,"P94","","",null,null],[6,"N94","","",null,null],[6,"U95","","",null,null],[6,"P95","","",null,null],[6,"N95","","",null,null],[6,"U96","","",null,null],[6,"P96","","",null,null],[6,"N96","","",null,null],[6,"U97","","",null,null],[6,"P97","","",null,null],[6,"N97","","",null,null],[6,"U98","","",null,null],[6,"P98","","",null,null],[6,"N98","","",null,null],[6,"U99","","",null,null],[6,"P99","","",null,null],[6,"N99","","",null,null],[6,"U100","","",null,null],[6,"P100","","",null,null],[6,"N100","","",null,null],[6,"U101","","",null,null],[6,"P101","","",null,null],[6,"N101","","",null,null],[6,"U102","","",null,null],[6,"P102","","",null,null],[6,"N102","","",null,null],[6,"U103","","",null,null],[6,"P103","","",null,null],[6,"N103","","",null,null],[6,"U104","","",null,null],[6,"P104","","",null,null],[6,"N104","","",null,null],[6,"U105","","",null,null],[6,"P105","","",null,null],[6,"N105","","",null,null],[6,"U106","","",null,null],[6,"P106","","",null,null],[6,"N106","","",null,null],[6,"U107","","",null,null],[6,"P107","","",null,null],[6,"N107","","",null,null],[6,"U108","","",null,null],[6,"P108","","",null,null],[6,"N108","","",null,null],[6,"U109","","",null,null],[6,"P109","","",null,null],[6,"N109","","",null,null],[6,"U110","","",null,null],[6,"P110","","",null,null],[6,"N110","","",null,null],[6,"U111","","",null,null],[6,"P111","","",null,null],[6,"N111","","",null,null],[6,"U112","","",null,null],[6,"P112","","",null,null],[6,"N112","","",null,null],[6,"U113","","",null,null],[6,"P113","","",null,null],[6,"N113","","",null,null],[6,"U114","","",null,null],[6,"P114","","",null,null],[6,"N114","","",null,null],[6,"U115","","",null,null],[6,"P115","","",null,null],[6,"N115","","",null,null],[6,"U116","","",null,null],[6,"P116","","",null,null],[6,"N116","","",null,null],[6,"U117","","",null,null],[6,"P117","","",null,null],[6,"N117","","",null,null],[6,"U118","","",null,null],[6,"P118","","",null,null],[6,"N118","","",null,null],[6,"U119","","",null,null],[6,"P119","","",null,null],[6,"N119","","",null,null],[6,"U120","","",null,null],[6,"P120","","",null,null],[6,"N120","","",null,null],[6,"U121","","",null,null],[6,"P121","","",null,null],[6,"N121","","",null,null],[6,"U122","","",null,null],[6,"P122","","",null,null],[6,"N122","","",null,null],[6,"U123","","",null,null],[6,"P123","","",null,null],[6,"N123","","",null,null],[6,"U124","","",null,null],[6,"P124","","",null,null],[6,"N124","","",null,null],[6,"U125","","",null,null],[6,"P125","","",null,null],[6,"N125","","",null,null],[6,"U126","","",null,null],[6,"P126","","",null,null],[6,"N126","","",null,null],[6,"U127","","",null,null],[6,"P127","","",null,null],[6,"N127","","",null,null],[6,"U128","","",null,null],[6,"P128","","",null,null],[6,"N128","","",null,null],[6,"U129","","",null,null],[6,"P129","","",null,null],[6,"N129","","",null,null],[6,"U130","","",null,null],[6,"P130","","",null,null],[6,"N130","","",null,null],[6,"U131","","",null,null],[6,"P131","","",null,null],[6,"N131","","",null,null],[6,"U132","","",null,null],[6,"P132","","",null,null],[6,"N132","","",null,null],[6,"U133","","",null,null],[6,"P133","","",null,null],[6,"N133","","",null,null],[6,"U134","","",null,null],[6,"P134","","",null,null],[6,"N134","","",null,null],[6,"U135","","",null,null],[6,"P135","","",null,null],[6,"N135","","",null,null],[6,"U136","","",null,null],[6,"P136","","",null,null],[6,"N136","","",null,null],[6,"U137","","",null,null],[6,"P137","","",null,null],[6,"N137","","",null,null],[6,"U138","","",null,null],[6,"P138","","",null,null],[6,"N138","","",null,null],[6,"U139","","",null,null],[6,"P139","","",null,null],[6,"N139","","",null,null],[6,"U140","","",null,null],[6,"P140","","",null,null],[6,"N140","","",null,null],[6,"U141","","",null,null],[6,"P141","","",null,null],[6,"N141","","",null,null],[6,"U142","","",null,null],[6,"P142","","",null,null],[6,"N142","","",null,null],[6,"U143","","",null,null],[6,"P143","","",null,null],[6,"N143","","",null,null],[6,"U144","","",null,null],[6,"P144","","",null,null],[6,"N144","","",null,null],[6,"U145","","",null,null],[6,"P145","","",null,null],[6,"N145","","",null,null],[6,"U146","","",null,null],[6,"P146","","",null,null],[6,"N146","","",null,null],[6,"U147","","",null,null],[6,"P147","","",null,null],[6,"N147","","",null,null],[6,"U148","","",null,null],[6,"P148","","",null,null],[6,"N148","","",null,null],[6,"U149","","",null,null],[6,"P149","","",null,null],[6,"N149","","",null,null],[6,"U150","","",null,null],[6,"P150","","",null,null],[6,"N150","","",null,null],[6,"U151","","",null,null],[6,"P151","","",null,null],[6,"N151","","",null,null],[6,"U152","","",null,null],[6,"P152","","",null,null],[6,"N152","","",null,null],[6,"U153","","",null,null],[6,"P153","","",null,null],[6,"N153","","",null,null],[6,"U154","","",null,null],[6,"P154","","",null,null],[6,"N154","","",null,null],[6,"U155","","",null,null],[6,"P155","","",null,null],[6,"N155","","",null,null],[6,"U156","","",null,null],[6,"P156","","",null,null],[6,"N156","","",null,null],[6,"U157","","",null,null],[6,"P157","","",null,null],[6,"N157","","",null,null],[6,"U158","","",null,null],[6,"P158","","",null,null],[6,"N158","","",null,null],[6,"U159","","",null,null],[6,"P159","","",null,null],[6,"N159","","",null,null],[6,"U160","","",null,null],[6,"P160","","",null,null],[6,"N160","","",null,null],[6,"U161","","",null,null],[6,"P161","","",null,null],[6,"N161","","",null,null],[6,"U162","","",null,null],[6,"P162","","",null,null],[6,"N162","","",null,null],[6,"U163","","",null,null],[6,"P163","","",null,null],[6,"N163","","",null,null],[6,"U164","","",null,null],[6,"P164","","",null,null],[6,"N164","","",null,null],[6,"U165","","",null,null],[6,"P165","","",null,null],[6,"N165","","",null,null],[6,"U166","","",null,null],[6,"P166","","",null,null],[6,"N166","","",null,null],[6,"U167","","",null,null],[6,"P167","","",null,null],[6,"N167","","",null,null],[6,"U168","","",null,null],[6,"P168","","",null,null],[6,"N168","","",null,null],[6,"U169","","",null,null],[6,"P169","","",null,null],[6,"N169","","",null,null],[6,"U170","","",null,null],[6,"P170","","",null,null],[6,"N170","","",null,null],[6,"U171","","",null,null],[6,"P171","","",null,null],[6,"N171","","",null,null],[6,"U172","","",null,null],[6,"P172","","",null,null],[6,"N172","","",null,null],[6,"U173","","",null,null],[6,"P173","","",null,null],[6,"N173","","",null,null],[6,"U174","","",null,null],[6,"P174","","",null,null],[6,"N174","","",null,null],[6,"U175","","",null,null],[6,"P175","","",null,null],[6,"N175","","",null,null],[6,"U176","","",null,null],[6,"P176","","",null,null],[6,"N176","","",null,null],[6,"U177","","",null,null],[6,"P177","","",null,null],[6,"N177","","",null,null],[6,"U178","","",null,null],[6,"P178","","",null,null],[6,"N178","","",null,null],[6,"U179","","",null,null],[6,"P179","","",null,null],[6,"N179","","",null,null],[6,"U180","","",null,null],[6,"P180","","",null,null],[6,"N180","","",null,null],[6,"U181","","",null,null],[6,"P181","","",null,null],[6,"N181","","",null,null],[6,"U182","","",null,null],[6,"P182","","",null,null],[6,"N182","","",null,null],[6,"U183","","",null,null],[6,"P183","","",null,null],[6,"N183","","",null,null],[6,"U184","","",null,null],[6,"P184","","",null,null],[6,"N184","","",null,null],[6,"U185","","",null,null],[6,"P185","","",null,null],[6,"N185","","",null,null],[6,"U186","","",null,null],[6,"P186","","",null,null],[6,"N186","","",null,null],[6,"U187","","",null,null],[6,"P187","","",null,null],[6,"N187","","",null,null],[6,"U188","","",null,null],[6,"P188","","",null,null],[6,"N188","","",null,null],[6,"U189","","",null,null],[6,"P189","","",null,null],[6,"N189","","",null,null],[6,"U190","","",null,null],[6,"P190","","",null,null],[6,"N190","","",null,null],[6,"U191","","",null,null],[6,"P191","","",null,null],[6,"N191","","",null,null],[6,"U192","","",null,null],[6,"P192","","",null,null],[6,"N192","","",null,null],[6,"U193","","",null,null],[6,"P193","","",null,null],[6,"N193","","",null,null],[6,"U194","","",null,null],[6,"P194","","",null,null],[6,"N194","","",null,null],[6,"U195","","",null,null],[6,"P195","","",null,null],[6,"N195","","",null,null],[6,"U196","","",null,null],[6,"P196","","",null,null],[6,"N196","","",null,null],[6,"U197","","",null,null],[6,"P197","","",null,null],[6,"N197","","",null,null],[6,"U198","","",null,null],[6,"P198","","",null,null],[6,"N198","","",null,null],[6,"U199","","",null,null],[6,"P199","","",null,null],[6,"N199","","",null,null],[6,"U200","","",null,null],[6,"P200","","",null,null],[6,"N200","","",null,null],[6,"U201","","",null,null],[6,"P201","","",null,null],[6,"N201","","",null,null],[6,"U202","","",null,null],[6,"P202","","",null,null],[6,"N202","","",null,null],[6,"U203","","",null,null],[6,"P203","","",null,null],[6,"N203","","",null,null],[6,"U204","","",null,null],[6,"P204","","",null,null],[6,"N204","","",null,null],[6,"U205","","",null,null],[6,"P205","","",null,null],[6,"N205","","",null,null],[6,"U206","","",null,null],[6,"P206","","",null,null],[6,"N206","","",null,null],[6,"U207","","",null,null],[6,"P207","","",null,null],[6,"N207","","",null,null],[6,"U208","","",null,null],[6,"P208","","",null,null],[6,"N208","","",null,null],[6,"U209","","",null,null],[6,"P209","","",null,null],[6,"N209","","",null,null],[6,"U210","","",null,null],[6,"P210","","",null,null],[6,"N210","","",null,null],[6,"U211","","",null,null],[6,"P211","","",null,null],[6,"N211","","",null,null],[6,"U212","","",null,null],[6,"P212","","",null,null],[6,"N212","","",null,null],[6,"U213","","",null,null],[6,"P213","","",null,null],[6,"N213","","",null,null],[6,"U214","","",null,null],[6,"P214","","",null,null],[6,"N214","","",null,null],[6,"U215","","",null,null],[6,"P215","","",null,null],[6,"N215","","",null,null],[6,"U216","","",null,null],[6,"P216","","",null,null],[6,"N216","","",null,null],[6,"U217","","",null,null],[6,"P217","","",null,null],[6,"N217","","",null,null],[6,"U218","","",null,null],[6,"P218","","",null,null],[6,"N218","","",null,null],[6,"U219","","",null,null],[6,"P219","","",null,null],[6,"N219","","",null,null],[6,"U220","","",null,null],[6,"P220","","",null,null],[6,"N220","","",null,null],[6,"U221","","",null,null],[6,"P221","","",null,null],[6,"N221","","",null,null],[6,"U222","","",null,null],[6,"P222","","",null,null],[6,"N222","","",null,null],[6,"U223","","",null,null],[6,"P223","","",null,null],[6,"N223","","",null,null],[6,"U224","","",null,null],[6,"P224","","",null,null],[6,"N224","","",null,null],[6,"U225","","",null,null],[6,"P225","","",null,null],[6,"N225","","",null,null],[6,"U226","","",null,null],[6,"P226","","",null,null],[6,"N226","","",null,null],[6,"U227","","",null,null],[6,"P227","","",null,null],[6,"N227","","",null,null],[6,"U228","","",null,null],[6,"P228","","",null,null],[6,"N228","","",null,null],[6,"U229","","",null,null],[6,"P229","","",null,null],[6,"N229","","",null,null],[6,"U230","","",null,null],[6,"P230","","",null,null],[6,"N230","","",null,null],[6,"U231","","",null,null],[6,"P231","","",null,null],[6,"N231","","",null,null],[6,"U232","","",null,null],[6,"P232","","",null,null],[6,"N232","","",null,null],[6,"U233","","",null,null],[6,"P233","","",null,null],[6,"N233","","",null,null],[6,"U234","","",null,null],[6,"P234","","",null,null],[6,"N234","","",null,null],[6,"U235","","",null,null],[6,"P235","","",null,null],[6,"N235","","",null,null],[6,"U236","","",null,null],[6,"P236","","",null,null],[6,"N236","","",null,null],[6,"U237","","",null,null],[6,"P237","","",null,null],[6,"N237","","",null,null],[6,"U238","","",null,null],[6,"P238","","",null,null],[6,"N238","","",null,null],[6,"U239","","",null,null],[6,"P239","","",null,null],[6,"N239","","",null,null],[6,"U240","","",null,null],[6,"P240","","",null,null],[6,"N240","","",null,null],[6,"U241","","",null,null],[6,"P241","","",null,null],[6,"N241","","",null,null],[6,"U242","","",null,null],[6,"P242","","",null,null],[6,"N242","","",null,null],[6,"U243","","",null,null],[6,"P243","","",null,null],[6,"N243","","",null,null],[6,"U244","","",null,null],[6,"P244","","",null,null],[6,"N244","","",null,null],[6,"U245","","",null,null],[6,"P245","","",null,null],[6,"N245","","",null,null],[6,"U246","","",null,null],[6,"P246","","",null,null],[6,"N246","","",null,null],[6,"U247","","",null,null],[6,"P247","","",null,null],[6,"N247","","",null,null],[6,"U248","","",null,null],[6,"P248","","",null,null],[6,"N248","","",null,null],[6,"U249","","",null,null],[6,"P249","","",null,null],[6,"N249","","",null,null],[6,"U250","","",null,null],[6,"P250","","",null,null],[6,"N250","","",null,null],[6,"U251","","",null,null],[6,"P251","","",null,null],[6,"N251","","",null,null],[6,"U252","","",null,null],[6,"P252","","",null,null],[6,"N252","","",null,null],[6,"U253","","",null,null],[6,"P253","","",null,null],[6,"N253","","",null,null],[6,"U254","","",null,null],[6,"P254","","",null,null],[6,"N254","","",null,null],[6,"U255","","",null,null],[6,"P255","","",null,null],[6,"N255","","",null,null],[6,"U256","","",null,null],[6,"P256","","",null,null],[6,"N256","","",null,null],[6,"U257","","",null,null],[6,"P257","","",null,null],[6,"N257","","",null,null],[6,"U258","","",null,null],[6,"P258","","",null,null],[6,"N258","","",null,null],[6,"U259","","",null,null],[6,"P259","","",null,null],[6,"N259","","",null,null],[6,"U260","","",null,null],[6,"P260","","",null,null],[6,"N260","","",null,null],[6,"U261","","",null,null],[6,"P261","","",null,null],[6,"N261","","",null,null],[6,"U262","","",null,null],[6,"P262","","",null,null],[6,"N262","","",null,null],[6,"U263","","",null,null],[6,"P263","","",null,null],[6,"N263","","",null,null],[6,"U264","","",null,null],[6,"P264","","",null,null],[6,"N264","","",null,null],[6,"U265","","",null,null],[6,"P265","","",null,null],[6,"N265","","",null,null],[6,"U266","","",null,null],[6,"P266","","",null,null],[6,"N266","","",null,null],[6,"U267","","",null,null],[6,"P267","","",null,null],[6,"N267","","",null,null],[6,"U268","","",null,null],[6,"P268","","",null,null],[6,"N268","","",null,null],[6,"U269","","",null,null],[6,"P269","","",null,null],[6,"N269","","",null,null],[6,"U270","","",null,null],[6,"P270","","",null,null],[6,"N270","","",null,null],[6,"U271","","",null,null],[6,"P271","","",null,null],[6,"N271","","",null,null],[6,"U272","","",null,null],[6,"P272","","",null,null],[6,"N272","","",null,null],[6,"U273","","",null,null],[6,"P273","","",null,null],[6,"N273","","",null,null],[6,"U274","","",null,null],[6,"P274","","",null,null],[6,"N274","","",null,null],[6,"U275","","",null,null],[6,"P275","","",null,null],[6,"N275","","",null,null],[6,"U276","","",null,null],[6,"P276","","",null,null],[6,"N276","","",null,null],[6,"U277","","",null,null],[6,"P277","","",null,null],[6,"N277","","",null,null],[6,"U278","","",null,null],[6,"P278","","",null,null],[6,"N278","","",null,null],[6,"U279","","",null,null],[6,"P279","","",null,null],[6,"N279","","",null,null],[6,"U280","","",null,null],[6,"P280","","",null,null],[6,"N280","","",null,null],[6,"U281","","",null,null],[6,"P281","","",null,null],[6,"N281","","",null,null],[6,"U282","","",null,null],[6,"P282","","",null,null],[6,"N282","","",null,null],[6,"U283","","",null,null],[6,"P283","","",null,null],[6,"N283","","",null,null],[6,"U284","","",null,null],[6,"P284","","",null,null],[6,"N284","","",null,null],[6,"U285","","",null,null],[6,"P285","","",null,null],[6,"N285","","",null,null],[6,"U286","","",null,null],[6,"P286","","",null,null],[6,"N286","","",null,null],[6,"U287","","",null,null],[6,"P287","","",null,null],[6,"N287","","",null,null],[6,"U288","","",null,null],[6,"P288","","",null,null],[6,"N288","","",null,null],[6,"U289","","",null,null],[6,"P289","","",null,null],[6,"N289","","",null,null],[6,"U290","","",null,null],[6,"P290","","",null,null],[6,"N290","","",null,null],[6,"U291","","",null,null],[6,"P291","","",null,null],[6,"N291","","",null,null],[6,"U292","","",null,null],[6,"P292","","",null,null],[6,"N292","","",null,null],[6,"U293","","",null,null],[6,"P293","","",null,null],[6,"N293","","",null,null],[6,"U294","","",null,null],[6,"P294","","",null,null],[6,"N294","","",null,null],[6,"U295","","",null,null],[6,"P295","","",null,null],[6,"N295","","",null,null],[6,"U296","","",null,null],[6,"P296","","",null,null],[6,"N296","","",null,null],[6,"U297","","",null,null],[6,"P297","","",null,null],[6,"N297","","",null,null],[6,"U298","","",null,null],[6,"P298","","",null,null],[6,"N298","","",null,null],[6,"U299","","",null,null],[6,"P299","","",null,null],[6,"N299","","",null,null],[6,"U300","","",null,null],[6,"P300","","",null,null],[6,"N300","","",null,null],[6,"U301","","",null,null],[6,"P301","","",null,null],[6,"N301","","",null,null],[6,"U302","","",null,null],[6,"P302","","",null,null],[6,"N302","","",null,null],[6,"U303","","",null,null],[6,"P303","","",null,null],[6,"N303","","",null,null],[6,"U304","","",null,null],[6,"P304","","",null,null],[6,"N304","","",null,null],[6,"U305","","",null,null],[6,"P305","","",null,null],[6,"N305","","",null,null],[6,"U306","","",null,null],[6,"P306","","",null,null],[6,"N306","","",null,null],[6,"U307","","",null,null],[6,"P307","","",null,null],[6,"N307","","",null,null],[6,"U308","","",null,null],[6,"P308","","",null,null],[6,"N308","","",null,null],[6,"U309","","",null,null],[6,"P309","","",null,null],[6,"N309","","",null,null],[6,"U310","","",null,null],[6,"P310","","",null,null],[6,"N310","","",null,null],[6,"U311","","",null,null],[6,"P311","","",null,null],[6,"N311","","",null,null],[6,"U312","","",null,null],[6,"P312","","",null,null],[6,"N312","","",null,null],[6,"U313","","",null,null],[6,"P313","","",null,null],[6,"N313","","",null,null],[6,"U314","","",null,null],[6,"P314","","",null,null],[6,"N314","","",null,null],[6,"U315","","",null,null],[6,"P315","","",null,null],[6,"N315","","",null,null],[6,"U316","","",null,null],[6,"P316","","",null,null],[6,"N316","","",null,null],[6,"U317","","",null,null],[6,"P317","","",null,null],[6,"N317","","",null,null],[6,"U318","","",null,null],[6,"P318","","",null,null],[6,"N318","","",null,null],[6,"U319","","",null,null],[6,"P319","","",null,null],[6,"N319","","",null,null],[6,"U320","","",null,null],[6,"P320","","",null,null],[6,"N320","","",null,null],[6,"U321","","",null,null],[6,"P321","","",null,null],[6,"N321","","",null,null],[6,"U322","","",null,null],[6,"P322","","",null,null],[6,"N322","","",null,null],[6,"U323","","",null,null],[6,"P323","","",null,null],[6,"N323","","",null,null],[6,"U324","","",null,null],[6,"P324","","",null,null],[6,"N324","","",null,null],[6,"U325","","",null,null],[6,"P325","","",null,null],[6,"N325","","",null,null],[6,"U326","","",null,null],[6,"P326","","",null,null],[6,"N326","","",null,null],[6,"U327","","",null,null],[6,"P327","","",null,null],[6,"N327","","",null,null],[6,"U328","","",null,null],[6,"P328","","",null,null],[6,"N328","","",null,null],[6,"U329","","",null,null],[6,"P329","","",null,null],[6,"N329","","",null,null],[6,"U330","","",null,null],[6,"P330","","",null,null],[6,"N330","","",null,null],[6,"U331","","",null,null],[6,"P331","","",null,null],[6,"N331","","",null,null],[6,"U332","","",null,null],[6,"P332","","",null,null],[6,"N332","","",null,null],[6,"U333","","",null,null],[6,"P333","","",null,null],[6,"N333","","",null,null],[6,"U334","","",null,null],[6,"P334","","",null,null],[6,"N334","","",null,null],[6,"U335","","",null,null],[6,"P335","","",null,null],[6,"N335","","",null,null],[6,"U336","","",null,null],[6,"P336","","",null,null],[6,"N336","","",null,null],[6,"U337","","",null,null],[6,"P337","","",null,null],[6,"N337","","",null,null],[6,"U338","","",null,null],[6,"P338","","",null,null],[6,"N338","","",null,null],[6,"U339","","",null,null],[6,"P339","","",null,null],[6,"N339","","",null,null],[6,"U340","","",null,null],[6,"P340","","",null,null],[6,"N340","","",null,null],[6,"U341","","",null,null],[6,"P341","","",null,null],[6,"N341","","",null,null],[6,"U342","","",null,null],[6,"P342","","",null,null],[6,"N342","","",null,null],[6,"U343","","",null,null],[6,"P343","","",null,null],[6,"N343","","",null,null],[6,"U344","","",null,null],[6,"P344","","",null,null],[6,"N344","","",null,null],[6,"U345","","",null,null],[6,"P345","","",null,null],[6,"N345","","",null,null],[6,"U346","","",null,null],[6,"P346","","",null,null],[6,"N346","","",null,null],[6,"U347","","",null,null],[6,"P347","","",null,null],[6,"N347","","",null,null],[6,"U348","","",null,null],[6,"P348","","",null,null],[6,"N348","","",null,null],[6,"U349","","",null,null],[6,"P349","","",null,null],[6,"N349","","",null,null],[6,"U350","","",null,null],[6,"P350","","",null,null],[6,"N350","","",null,null],[6,"U351","","",null,null],[6,"P351","","",null,null],[6,"N351","","",null,null],[6,"U352","","",null,null],[6,"P352","","",null,null],[6,"N352","","",null,null],[6,"U353","","",null,null],[6,"P353","","",null,null],[6,"N353","","",null,null],[6,"U354","","",null,null],[6,"P354","","",null,null],[6,"N354","","",null,null],[6,"U355","","",null,null],[6,"P355","","",null,null],[6,"N355","","",null,null],[6,"U356","","",null,null],[6,"P356","","",null,null],[6,"N356","","",null,null],[6,"U357","","",null,null],[6,"P357","","",null,null],[6,"N357","","",null,null],[6,"U358","","",null,null],[6,"P358","","",null,null],[6,"N358","","",null,null],[6,"U359","","",null,null],[6,"P359","","",null,null],[6,"N359","","",null,null],[6,"U360","","",null,null],[6,"P360","","",null,null],[6,"N360","","",null,null],[6,"U361","","",null,null],[6,"P361","","",null,null],[6,"N361","","",null,null],[6,"U362","","",null,null],[6,"P362","","",null,null],[6,"N362","","",null,null],[6,"U363","","",null,null],[6,"P363","","",null,null],[6,"N363","","",null,null],[6,"U364","","",null,null],[6,"P364","","",null,null],[6,"N364","","",null,null],[6,"U365","","",null,null],[6,"P365","","",null,null],[6,"N365","","",null,null],[6,"U366","","",null,null],[6,"P366","","",null,null],[6,"N366","","",null,null],[6,"U367","","",null,null],[6,"P367","","",null,null],[6,"N367","","",null,null],[6,"U368","","",null,null],[6,"P368","","",null,null],[6,"N368","","",null,null],[6,"U369","","",null,null],[6,"P369","","",null,null],[6,"N369","","",null,null],[6,"U370","","",null,null],[6,"P370","","",null,null],[6,"N370","","",null,null],[6,"U371","","",null,null],[6,"P371","","",null,null],[6,"N371","","",null,null],[6,"U372","","",null,null],[6,"P372","","",null,null],[6,"N372","","",null,null],[6,"U373","","",null,null],[6,"P373","","",null,null],[6,"N373","","",null,null],[6,"U374","","",null,null],[6,"P374","","",null,null],[6,"N374","","",null,null],[6,"U375","","",null,null],[6,"P375","","",null,null],[6,"N375","","",null,null],[6,"U376","","",null,null],[6,"P376","","",null,null],[6,"N376","","",null,null],[6,"U377","","",null,null],[6,"P377","","",null,null],[6,"N377","","",null,null],[6,"U378","","",null,null],[6,"P378","","",null,null],[6,"N378","","",null,null],[6,"U379","","",null,null],[6,"P379","","",null,null],[6,"N379","","",null,null],[6,"U380","","",null,null],[6,"P380","","",null,null],[6,"N380","","",null,null],[6,"U381","","",null,null],[6,"P381","","",null,null],[6,"N381","","",null,null],[6,"U382","","",null,null],[6,"P382","","",null,null],[6,"N382","","",null,null],[6,"U383","","",null,null],[6,"P383","","",null,null],[6,"N383","","",null,null],[6,"U384","","",null,null],[6,"P384","","",null,null],[6,"N384","","",null,null],[6,"U385","","",null,null],[6,"P385","","",null,null],[6,"N385","","",null,null],[6,"U386","","",null,null],[6,"P386","","",null,null],[6,"N386","","",null,null],[6,"U387","","",null,null],[6,"P387","","",null,null],[6,"N387","","",null,null],[6,"U388","","",null,null],[6,"P388","","",null,null],[6,"N388","","",null,null],[6,"U389","","",null,null],[6,"P389","","",null,null],[6,"N389","","",null,null],[6,"U390","","",null,null],[6,"P390","","",null,null],[6,"N390","","",null,null],[6,"U391","","",null,null],[6,"P391","","",null,null],[6,"N391","","",null,null],[6,"U392","","",null,null],[6,"P392","","",null,null],[6,"N392","","",null,null],[6,"U393","","",null,null],[6,"P393","","",null,null],[6,"N393","","",null,null],[6,"U394","","",null,null],[6,"P394","","",null,null],[6,"N394","","",null,null],[6,"U395","","",null,null],[6,"P395","","",null,null],[6,"N395","","",null,null],[6,"U396","","",null,null],[6,"P396","","",null,null],[6,"N396","","",null,null],[6,"U397","","",null,null],[6,"P397","","",null,null],[6,"N397","","",null,null],[6,"U398","","",null,null],[6,"P398","","",null,null],[6,"N398","","",null,null],[6,"U399","","",null,null],[6,"P399","","",null,null],[6,"N399","","",null,null],[6,"U400","","",null,null],[6,"P400","","",null,null],[6,"N400","","",null,null],[6,"U401","","",null,null],[6,"P401","","",null,null],[6,"N401","","",null,null],[6,"U402","","",null,null],[6,"P402","","",null,null],[6,"N402","","",null,null],[6,"U403","","",null,null],[6,"P403","","",null,null],[6,"N403","","",null,null],[6,"U404","","",null,null],[6,"P404","","",null,null],[6,"N404","","",null,null],[6,"U405","","",null,null],[6,"P405","","",null,null],[6,"N405","","",null,null],[6,"U406","","",null,null],[6,"P406","","",null,null],[6,"N406","","",null,null],[6,"U407","","",null,null],[6,"P407","","",null,null],[6,"N407","","",null,null],[6,"U408","","",null,null],[6,"P408","","",null,null],[6,"N408","","",null,null],[6,"U409","","",null,null],[6,"P409","","",null,null],[6,"N409","","",null,null],[6,"U410","","",null,null],[6,"P410","","",null,null],[6,"N410","","",null,null],[6,"U411","","",null,null],[6,"P411","","",null,null],[6,"N411","","",null,null],[6,"U412","","",null,null],[6,"P412","","",null,null],[6,"N412","","",null,null],[6,"U413","","",null,null],[6,"P413","","",null,null],[6,"N413","","",null,null],[6,"U414","","",null,null],[6,"P414","","",null,null],[6,"N414","","",null,null],[6,"U415","","",null,null],[6,"P415","","",null,null],[6,"N415","","",null,null],[6,"U416","","",null,null],[6,"P416","","",null,null],[6,"N416","","",null,null],[6,"U417","","",null,null],[6,"P417","","",null,null],[6,"N417","","",null,null],[6,"U418","","",null,null],[6,"P418","","",null,null],[6,"N418","","",null,null],[6,"U419","","",null,null],[6,"P419","","",null,null],[6,"N419","","",null,null],[6,"U420","","",null,null],[6,"P420","","",null,null],[6,"N420","","",null,null],[6,"U421","","",null,null],[6,"P421","","",null,null],[6,"N421","","",null,null],[6,"U422","","",null,null],[6,"P422","","",null,null],[6,"N422","","",null,null],[6,"U423","","",null,null],[6,"P423","","",null,null],[6,"N423","","",null,null],[6,"U424","","",null,null],[6,"P424","","",null,null],[6,"N424","","",null,null],[6,"U425","","",null,null],[6,"P425","","",null,null],[6,"N425","","",null,null],[6,"U426","","",null,null],[6,"P426","","",null,null],[6,"N426","","",null,null],[6,"U427","","",null,null],[6,"P427","","",null,null],[6,"N427","","",null,null],[6,"U428","","",null,null],[6,"P428","","",null,null],[6,"N428","","",null,null],[6,"U429","","",null,null],[6,"P429","","",null,null],[6,"N429","","",null,null],[6,"U430","","",null,null],[6,"P430","","",null,null],[6,"N430","","",null,null],[6,"U431","","",null,null],[6,"P431","","",null,null],[6,"N431","","",null,null],[6,"U432","","",null,null],[6,"P432","","",null,null],[6,"N432","","",null,null],[6,"U433","","",null,null],[6,"P433","","",null,null],[6,"N433","","",null,null],[6,"U434","","",null,null],[6,"P434","","",null,null],[6,"N434","","",null,null],[6,"U435","","",null,null],[6,"P435","","",null,null],[6,"N435","","",null,null],[6,"U436","","",null,null],[6,"P436","","",null,null],[6,"N436","","",null,null],[6,"U437","","",null,null],[6,"P437","","",null,null],[6,"N437","","",null,null],[6,"U438","","",null,null],[6,"P438","","",null,null],[6,"N438","","",null,null],[6,"U439","","",null,null],[6,"P439","","",null,null],[6,"N439","","",null,null],[6,"U440","","",null,null],[6,"P440","","",null,null],[6,"N440","","",null,null],[6,"U441","","",null,null],[6,"P441","","",null,null],[6,"N441","","",null,null],[6,"U442","","",null,null],[6,"P442","","",null,null],[6,"N442","","",null,null],[6,"U443","","",null,null],[6,"P443","","",null,null],[6,"N443","","",null,null],[6,"U444","","",null,null],[6,"P444","","",null,null],[6,"N444","","",null,null],[6,"U445","","",null,null],[6,"P445","","",null,null],[6,"N445","","",null,null],[6,"U446","","",null,null],[6,"P446","","",null,null],[6,"N446","","",null,null],[6,"U447","","",null,null],[6,"P447","","",null,null],[6,"N447","","",null,null],[6,"U448","","",null,null],[6,"P448","","",null,null],[6,"N448","","",null,null],[6,"U449","","",null,null],[6,"P449","","",null,null],[6,"N449","","",null,null],[6,"U450","","",null,null],[6,"P450","","",null,null],[6,"N450","","",null,null],[6,"U451","","",null,null],[6,"P451","","",null,null],[6,"N451","","",null,null],[6,"U452","","",null,null],[6,"P452","","",null,null],[6,"N452","","",null,null],[6,"U453","","",null,null],[6,"P453","","",null,null],[6,"N453","","",null,null],[6,"U454","","",null,null],[6,"P454","","",null,null],[6,"N454","","",null,null],[6,"U455","","",null,null],[6,"P455","","",null,null],[6,"N455","","",null,null],[6,"U456","","",null,null],[6,"P456","","",null,null],[6,"N456","","",null,null],[6,"U457","","",null,null],[6,"P457","","",null,null],[6,"N457","","",null,null],[6,"U458","","",null,null],[6,"P458","","",null,null],[6,"N458","","",null,null],[6,"U459","","",null,null],[6,"P459","","",null,null],[6,"N459","","",null,null],[6,"U460","","",null,null],[6,"P460","","",null,null],[6,"N460","","",null,null],[6,"U461","","",null,null],[6,"P461","","",null,null],[6,"N461","","",null,null],[6,"U462","","",null,null],[6,"P462","","",null,null],[6,"N462","","",null,null],[6,"U463","","",null,null],[6,"P463","","",null,null],[6,"N463","","",null,null],[6,"U464","","",null,null],[6,"P464","","",null,null],[6,"N464","","",null,null],[6,"U465","","",null,null],[6,"P465","","",null,null],[6,"N465","","",null,null],[6,"U466","","",null,null],[6,"P466","","",null,null],[6,"N466","","",null,null],[6,"U467","","",null,null],[6,"P467","","",null,null],[6,"N467","","",null,null],[6,"U468","","",null,null],[6,"P468","","",null,null],[6,"N468","","",null,null],[6,"U469","","",null,null],[6,"P469","","",null,null],[6,"N469","","",null,null],[6,"U470","","",null,null],[6,"P470","","",null,null],[6,"N470","","",null,null],[6,"U471","","",null,null],[6,"P471","","",null,null],[6,"N471","","",null,null],[6,"U472","","",null,null],[6,"P472","","",null,null],[6,"N472","","",null,null],[6,"U473","","",null,null],[6,"P473","","",null,null],[6,"N473","","",null,null],[6,"U474","","",null,null],[6,"P474","","",null,null],[6,"N474","","",null,null],[6,"U475","","",null,null],[6,"P475","","",null,null],[6,"N475","","",null,null],[6,"U476","","",null,null],[6,"P476","","",null,null],[6,"N476","","",null,null],[6,"U477","","",null,null],[6,"P477","","",null,null],[6,"N477","","",null,null],[6,"U478","","",null,null],[6,"P478","","",null,null],[6,"N478","","",null,null],[6,"U479","","",null,null],[6,"P479","","",null,null],[6,"N479","","",null,null],[6,"U480","","",null,null],[6,"P480","","",null,null],[6,"N480","","",null,null],[6,"U481","","",null,null],[6,"P481","","",null,null],[6,"N481","","",null,null],[6,"U482","","",null,null],[6,"P482","","",null,null],[6,"N482","","",null,null],[6,"U483","","",null,null],[6,"P483","","",null,null],[6,"N483","","",null,null],[6,"U484","","",null,null],[6,"P484","","",null,null],[6,"N484","","",null,null],[6,"U485","","",null,null],[6,"P485","","",null,null],[6,"N485","","",null,null],[6,"U486","","",null,null],[6,"P486","","",null,null],[6,"N486","","",null,null],[6,"U487","","",null,null],[6,"P487","","",null,null],[6,"N487","","",null,null],[6,"U488","","",null,null],[6,"P488","","",null,null],[6,"N488","","",null,null],[6,"U489","","",null,null],[6,"P489","","",null,null],[6,"N489","","",null,null],[6,"U490","","",null,null],[6,"P490","","",null,null],[6,"N490","","",null,null],[6,"U491","","",null,null],[6,"P491","","",null,null],[6,"N491","","",null,null],[6,"U492","","",null,null],[6,"P492","","",null,null],[6,"N492","","",null,null],[6,"U493","","",null,null],[6,"P493","","",null,null],[6,"N493","","",null,null],[6,"U494","","",null,null],[6,"P494","","",null,null],[6,"N494","","",null,null],[6,"U495","","",null,null],[6,"P495","","",null,null],[6,"N495","","",null,null],[6,"U496","","",null,null],[6,"P496","","",null,null],[6,"N496","","",null,null],[6,"U497","","",null,null],[6,"P497","","",null,null],[6,"N497","","",null,null],[6,"U498","","",null,null],[6,"P498","","",null,null],[6,"N498","","",null,null],[6,"U499","","",null,null],[6,"P499","","",null,null],[6,"N499","","",null,null],[6,"U500","","",null,null],[6,"P500","","",null,null],[6,"N500","","",null,null],[6,"U501","","",null,null],[6,"P501","","",null,null],[6,"N501","","",null,null],[6,"U502","","",null,null],[6,"P502","","",null,null],[6,"N502","","",null,null],[6,"U503","","",null,null],[6,"P503","","",null,null],[6,"N503","","",null,null],[6,"U504","","",null,null],[6,"P504","","",null,null],[6,"N504","","",null,null],[6,"U505","","",null,null],[6,"P505","","",null,null],[6,"N505","","",null,null],[6,"U506","","",null,null],[6,"P506","","",null,null],[6,"N506","","",null,null],[6,"U507","","",null,null],[6,"P507","","",null,null],[6,"N507","","",null,null],[6,"U508","","",null,null],[6,"P508","","",null,null],[6,"N508","","",null,null],[6,"U509","","",null,null],[6,"P509","","",null,null],[6,"N509","","",null,null],[6,"U510","","",null,null],[6,"P510","","",null,null],[6,"N510","","",null,null],[6,"U511","","",null,null],[6,"P511","","",null,null],[6,"N511","","",null,null],[6,"U512","","",null,null],[6,"P512","","",null,null],[6,"N512","","",null,null],[6,"U513","","",null,null],[6,"P513","","",null,null],[6,"N513","","",null,null],[6,"U514","","",null,null],[6,"P514","","",null,null],[6,"N514","","",null,null],[6,"U515","","",null,null],[6,"P515","","",null,null],[6,"N515","","",null,null],[6,"U516","","",null,null],[6,"P516","","",null,null],[6,"N516","","",null,null],[6,"U517","","",null,null],[6,"P517","","",null,null],[6,"N517","","",null,null],[6,"U518","","",null,null],[6,"P518","","",null,null],[6,"N518","","",null,null],[6,"U519","","",null,null],[6,"P519","","",null,null],[6,"N519","","",null,null],[6,"U520","","",null,null],[6,"P520","","",null,null],[6,"N520","","",null,null],[6,"U521","","",null,null],[6,"P521","","",null,null],[6,"N521","","",null,null],[6,"U522","","",null,null],[6,"P522","","",null,null],[6,"N522","","",null,null],[6,"U523","","",null,null],[6,"P523","","",null,null],[6,"N523","","",null,null],[6,"U524","","",null,null],[6,"P524","","",null,null],[6,"N524","","",null,null],[6,"U525","","",null,null],[6,"P525","","",null,null],[6,"N525","","",null,null],[6,"U526","","",null,null],[6,"P526","","",null,null],[6,"N526","","",null,null],[6,"U527","","",null,null],[6,"P527","","",null,null],[6,"N527","","",null,null],[6,"U528","","",null,null],[6,"P528","","",null,null],[6,"N528","","",null,null],[6,"U529","","",null,null],[6,"P529","","",null,null],[6,"N529","","",null,null],[6,"U530","","",null,null],[6,"P530","","",null,null],[6,"N530","","",null,null],[6,"U531","","",null,null],[6,"P531","","",null,null],[6,"N531","","",null,null],[6,"U532","","",null,null],[6,"P532","","",null,null],[6,"N532","","",null,null],[6,"U533","","",null,null],[6,"P533","","",null,null],[6,"N533","","",null,null],[6,"U534","","",null,null],[6,"P534","","",null,null],[6,"N534","","",null,null],[6,"U535","","",null,null],[6,"P535","","",null,null],[6,"N535","","",null,null],[6,"U536","","",null,null],[6,"P536","","",null,null],[6,"N536","","",null,null],[6,"U537","","",null,null],[6,"P537","","",null,null],[6,"N537","","",null,null],[6,"U538","","",null,null],[6,"P538","","",null,null],[6,"N538","","",null,null],[6,"U539","","",null,null],[6,"P539","","",null,null],[6,"N539","","",null,null],[6,"U540","","",null,null],[6,"P540","","",null,null],[6,"N540","","",null,null],[6,"U541","","",null,null],[6,"P541","","",null,null],[6,"N541","","",null,null],[6,"U542","","",null,null],[6,"P542","","",null,null],[6,"N542","","",null,null],[6,"U543","","",null,null],[6,"P543","","",null,null],[6,"N543","","",null,null],[6,"U544","","",null,null],[6,"P544","","",null,null],[6,"N544","","",null,null],[6,"U545","","",null,null],[6,"P545","","",null,null],[6,"N545","","",null,null],[6,"U546","","",null,null],[6,"P546","","",null,null],[6,"N546","","",null,null],[6,"U547","","",null,null],[6,"P547","","",null,null],[6,"N547","","",null,null],[6,"U548","","",null,null],[6,"P548","","",null,null],[6,"N548","","",null,null],[6,"U549","","",null,null],[6,"P549","","",null,null],[6,"N549","","",null,null],[6,"U550","","",null,null],[6,"P550","","",null,null],[6,"N550","","",null,null],[6,"U551","","",null,null],[6,"P551","","",null,null],[6,"N551","","",null,null],[6,"U552","","",null,null],[6,"P552","","",null,null],[6,"N552","","",null,null],[6,"U553","","",null,null],[6,"P553","","",null,null],[6,"N553","","",null,null],[6,"U554","","",null,null],[6,"P554","","",null,null],[6,"N554","","",null,null],[6,"U555","","",null,null],[6,"P555","","",null,null],[6,"N555","","",null,null],[6,"U556","","",null,null],[6,"P556","","",null,null],[6,"N556","","",null,null],[6,"U557","","",null,null],[6,"P557","","",null,null],[6,"N557","","",null,null],[6,"U558","","",null,null],[6,"P558","","",null,null],[6,"N558","","",null,null],[6,"U559","","",null,null],[6,"P559","","",null,null],[6,"N559","","",null,null],[6,"U560","","",null,null],[6,"P560","","",null,null],[6,"N560","","",null,null],[6,"U561","","",null,null],[6,"P561","","",null,null],[6,"N561","","",null,null],[6,"U562","","",null,null],[6,"P562","","",null,null],[6,"N562","","",null,null],[6,"U563","","",null,null],[6,"P563","","",null,null],[6,"N563","","",null,null],[6,"U564","","",null,null],[6,"P564","","",null,null],[6,"N564","","",null,null],[6,"U565","","",null,null],[6,"P565","","",null,null],[6,"N565","","",null,null],[6,"U566","","",null,null],[6,"P566","","",null,null],[6,"N566","","",null,null],[6,"U567","","",null,null],[6,"P567","","",null,null],[6,"N567","","",null,null],[6,"U568","","",null,null],[6,"P568","","",null,null],[6,"N568","","",null,null],[6,"U569","","",null,null],[6,"P569","","",null,null],[6,"N569","","",null,null],[6,"U570","","",null,null],[6,"P570","","",null,null],[6,"N570","","",null,null],[6,"U571","","",null,null],[6,"P571","","",null,null],[6,"N571","","",null,null],[6,"U572","","",null,null],[6,"P572","","",null,null],[6,"N572","","",null,null],[6,"U573","","",null,null],[6,"P573","","",null,null],[6,"N573","","",null,null],[6,"U574","","",null,null],[6,"P574","","",null,null],[6,"N574","","",null,null],[6,"U575","","",null,null],[6,"P575","","",null,null],[6,"N575","","",null,null],[6,"U576","","",null,null],[6,"P576","","",null,null],[6,"N576","","",null,null],[6,"U577","","",null,null],[6,"P577","","",null,null],[6,"N577","","",null,null],[6,"U578","","",null,null],[6,"P578","","",null,null],[6,"N578","","",null,null],[6,"U579","","",null,null],[6,"P579","","",null,null],[6,"N579","","",null,null],[6,"U580","","",null,null],[6,"P580","","",null,null],[6,"N580","","",null,null],[6,"U581","","",null,null],[6,"P581","","",null,null],[6,"N581","","",null,null],[6,"U582","","",null,null],[6,"P582","","",null,null],[6,"N582","","",null,null],[6,"U583","","",null,null],[6,"P583","","",null,null],[6,"N583","","",null,null],[6,"U584","","",null,null],[6,"P584","","",null,null],[6,"N584","","",null,null],[6,"U585","","",null,null],[6,"P585","","",null,null],[6,"N585","","",null,null],[6,"U586","","",null,null],[6,"P586","","",null,null],[6,"N586","","",null,null],[6,"U587","","",null,null],[6,"P587","","",null,null],[6,"N587","","",null,null],[6,"U588","","",null,null],[6,"P588","","",null,null],[6,"N588","","",null,null],[6,"U589","","",null,null],[6,"P589","","",null,null],[6,"N589","","",null,null],[6,"U590","","",null,null],[6,"P590","","",null,null],[6,"N590","","",null,null],[6,"U591","","",null,null],[6,"P591","","",null,null],[6,"N591","","",null,null],[6,"U592","","",null,null],[6,"P592","","",null,null],[6,"N592","","",null,null],[6,"U593","","",null,null],[6,"P593","","",null,null],[6,"N593","","",null,null],[6,"U594","","",null,null],[6,"P594","","",null,null],[6,"N594","","",null,null],[6,"U595","","",null,null],[6,"P595","","",null,null],[6,"N595","","",null,null],[6,"U596","","",null,null],[6,"P596","","",null,null],[6,"N596","","",null,null],[6,"U597","","",null,null],[6,"P597","","",null,null],[6,"N597","","",null,null],[6,"U598","","",null,null],[6,"P598","","",null,null],[6,"N598","","",null,null],[6,"U599","","",null,null],[6,"P599","","",null,null],[6,"N599","","",null,null],[6,"U600","","",null,null],[6,"P600","","",null,null],[6,"N600","","",null,null],[6,"U601","","",null,null],[6,"P601","","",null,null],[6,"N601","","",null,null],[6,"U602","","",null,null],[6,"P602","","",null,null],[6,"N602","","",null,null],[6,"U603","","",null,null],[6,"P603","","",null,null],[6,"N603","","",null,null],[6,"U604","","",null,null],[6,"P604","","",null,null],[6,"N604","","",null,null],[6,"U605","","",null,null],[6,"P605","","",null,null],[6,"N605","","",null,null],[6,"U606","","",null,null],[6,"P606","","",null,null],[6,"N606","","",null,null],[6,"U607","","",null,null],[6,"P607","","",null,null],[6,"N607","","",null,null],[6,"U608","","",null,null],[6,"P608","","",null,null],[6,"N608","","",null,null],[6,"U609","","",null,null],[6,"P609","","",null,null],[6,"N609","","",null,null],[6,"U610","","",null,null],[6,"P610","","",null,null],[6,"N610","","",null,null],[6,"U611","","",null,null],[6,"P611","","",null,null],[6,"N611","","",null,null],[6,"U612","","",null,null],[6,"P612","","",null,null],[6,"N612","","",null,null],[6,"U613","","",null,null],[6,"P613","","",null,null],[6,"N613","","",null,null],[6,"U614","","",null,null],[6,"P614","","",null,null],[6,"N614","","",null,null],[6,"U615","","",null,null],[6,"P615","","",null,null],[6,"N615","","",null,null],[6,"U616","","",null,null],[6,"P616","","",null,null],[6,"N616","","",null,null],[6,"U617","","",null,null],[6,"P617","","",null,null],[6,"N617","","",null,null],[6,"U618","","",null,null],[6,"P618","","",null,null],[6,"N618","","",null,null],[6,"U619","","",null,null],[6,"P619","","",null,null],[6,"N619","","",null,null],[6,"U620","","",null,null],[6,"P620","","",null,null],[6,"N620","","",null,null],[6,"U621","","",null,null],[6,"P621","","",null,null],[6,"N621","","",null,null],[6,"U622","","",null,null],[6,"P622","","",null,null],[6,"N622","","",null,null],[6,"U623","","",null,null],[6,"P623","","",null,null],[6,"N623","","",null,null],[6,"U624","","",null,null],[6,"P624","","",null,null],[6,"N624","","",null,null],[6,"U625","","",null,null],[6,"P625","","",null,null],[6,"N625","","",null,null],[6,"U626","","",null,null],[6,"P626","","",null,null],[6,"N626","","",null,null],[6,"U627","","",null,null],[6,"P627","","",null,null],[6,"N627","","",null,null],[6,"U628","","",null,null],[6,"P628","","",null,null],[6,"N628","","",null,null],[6,"U629","","",null,null],[6,"P629","","",null,null],[6,"N629","","",null,null],[6,"U630","","",null,null],[6,"P630","","",null,null],[6,"N630","","",null,null],[6,"U631","","",null,null],[6,"P631","","",null,null],[6,"N631","","",null,null],[6,"U632","","",null,null],[6,"P632","","",null,null],[6,"N632","","",null,null],[6,"U633","","",null,null],[6,"P633","","",null,null],[6,"N633","","",null,null],[6,"U634","","",null,null],[6,"P634","","",null,null],[6,"N634","","",null,null],[6,"U635","","",null,null],[6,"P635","","",null,null],[6,"N635","","",null,null],[6,"U636","","",null,null],[6,"P636","","",null,null],[6,"N636","","",null,null],[6,"U637","","",null,null],[6,"P637","","",null,null],[6,"N637","","",null,null],[6,"U638","","",null,null],[6,"P638","","",null,null],[6,"N638","","",null,null],[6,"U639","","",null,null],[6,"P639","","",null,null],[6,"N639","","",null,null],[6,"U640","","",null,null],[6,"P640","","",null,null],[6,"N640","","",null,null],[6,"U641","","",null,null],[6,"P641","","",null,null],[6,"N641","","",null,null],[6,"U642","","",null,null],[6,"P642","","",null,null],[6,"N642","","",null,null],[6,"U643","","",null,null],[6,"P643","","",null,null],[6,"N643","","",null,null],[6,"U644","","",null,null],[6,"P644","","",null,null],[6,"N644","","",null,null],[6,"U645","","",null,null],[6,"P645","","",null,null],[6,"N645","","",null,null],[6,"U646","","",null,null],[6,"P646","","",null,null],[6,"N646","","",null,null],[6,"U647","","",null,null],[6,"P647","","",null,null],[6,"N647","","",null,null],[6,"U648","","",null,null],[6,"P648","","",null,null],[6,"N648","","",null,null],[6,"U649","","",null,null],[6,"P649","","",null,null],[6,"N649","","",null,null],[6,"U650","","",null,null],[6,"P650","","",null,null],[6,"N650","","",null,null],[6,"U651","","",null,null],[6,"P651","","",null,null],[6,"N651","","",null,null],[6,"U652","","",null,null],[6,"P652","","",null,null],[6,"N652","","",null,null],[6,"U653","","",null,null],[6,"P653","","",null,null],[6,"N653","","",null,null],[6,"U654","","",null,null],[6,"P654","","",null,null],[6,"N654","","",null,null],[6,"U655","","",null,null],[6,"P655","","",null,null],[6,"N655","","",null,null],[6,"U656","","",null,null],[6,"P656","","",null,null],[6,"N656","","",null,null],[6,"U657","","",null,null],[6,"P657","","",null,null],[6,"N657","","",null,null],[6,"U658","","",null,null],[6,"P658","","",null,null],[6,"N658","","",null,null],[6,"U659","","",null,null],[6,"P659","","",null,null],[6,"N659","","",null,null],[6,"U660","","",null,null],[6,"P660","","",null,null],[6,"N660","","",null,null],[6,"U661","","",null,null],[6,"P661","","",null,null],[6,"N661","","",null,null],[6,"U662","","",null,null],[6,"P662","","",null,null],[6,"N662","","",null,null],[6,"U663","","",null,null],[6,"P663","","",null,null],[6,"N663","","",null,null],[6,"U664","","",null,null],[6,"P664","","",null,null],[6,"N664","","",null,null],[6,"U665","","",null,null],[6,"P665","","",null,null],[6,"N665","","",null,null],[6,"U666","","",null,null],[6,"P666","","",null,null],[6,"N666","","",null,null],[6,"U667","","",null,null],[6,"P667","","",null,null],[6,"N667","","",null,null],[6,"U668","","",null,null],[6,"P668","","",null,null],[6,"N668","","",null,null],[6,"U669","","",null,null],[6,"P669","","",null,null],[6,"N669","","",null,null],[6,"U670","","",null,null],[6,"P670","","",null,null],[6,"N670","","",null,null],[6,"U671","","",null,null],[6,"P671","","",null,null],[6,"N671","","",null,null],[6,"U672","","",null,null],[6,"P672","","",null,null],[6,"N672","","",null,null],[6,"U673","","",null,null],[6,"P673","","",null,null],[6,"N673","","",null,null],[6,"U674","","",null,null],[6,"P674","","",null,null],[6,"N674","","",null,null],[6,"U675","","",null,null],[6,"P675","","",null,null],[6,"N675","","",null,null],[6,"U676","","",null,null],[6,"P676","","",null,null],[6,"N676","","",null,null],[6,"U677","","",null,null],[6,"P677","","",null,null],[6,"N677","","",null,null],[6,"U678","","",null,null],[6,"P678","","",null,null],[6,"N678","","",null,null],[6,"U679","","",null,null],[6,"P679","","",null,null],[6,"N679","","",null,null],[6,"U680","","",null,null],[6,"P680","","",null,null],[6,"N680","","",null,null],[6,"U681","","",null,null],[6,"P681","","",null,null],[6,"N681","","",null,null],[6,"U682","","",null,null],[6,"P682","","",null,null],[6,"N682","","",null,null],[6,"U683","","",null,null],[6,"P683","","",null,null],[6,"N683","","",null,null],[6,"U684","","",null,null],[6,"P684","","",null,null],[6,"N684","","",null,null],[6,"U685","","",null,null],[6,"P685","","",null,null],[6,"N685","","",null,null],[6,"U686","","",null,null],[6,"P686","","",null,null],[6,"N686","","",null,null],[6,"U687","","",null,null],[6,"P687","","",null,null],[6,"N687","","",null,null],[6,"U688","","",null,null],[6,"P688","","",null,null],[6,"N688","","",null,null],[6,"U689","","",null,null],[6,"P689","","",null,null],[6,"N689","","",null,null],[6,"U690","","",null,null],[6,"P690","","",null,null],[6,"N690","","",null,null],[6,"U691","","",null,null],[6,"P691","","",null,null],[6,"N691","","",null,null],[6,"U692","","",null,null],[6,"P692","","",null,null],[6,"N692","","",null,null],[6,"U693","","",null,null],[6,"P693","","",null,null],[6,"N693","","",null,null],[6,"U694","","",null,null],[6,"P694","","",null,null],[6,"N694","","",null,null],[6,"U695","","",null,null],[6,"P695","","",null,null],[6,"N695","","",null,null],[6,"U696","","",null,null],[6,"P696","","",null,null],[6,"N696","","",null,null],[6,"U697","","",null,null],[6,"P697","","",null,null],[6,"N697","","",null,null],[6,"U698","","",null,null],[6,"P698","","",null,null],[6,"N698","","",null,null],[6,"U699","","",null,null],[6,"P699","","",null,null],[6,"N699","","",null,null],[6,"U700","","",null,null],[6,"P700","","",null,null],[6,"N700","","",null,null],[6,"U701","","",null,null],[6,"P701","","",null,null],[6,"N701","","",null,null],[6,"U702","","",null,null],[6,"P702","","",null,null],[6,"N702","","",null,null],[6,"U703","","",null,null],[6,"P703","","",null,null],[6,"N703","","",null,null],[6,"U704","","",null,null],[6,"P704","","",null,null],[6,"N704","","",null,null],[6,"U705","","",null,null],[6,"P705","","",null,null],[6,"N705","","",null,null],[6,"U706","","",null,null],[6,"P706","","",null,null],[6,"N706","","",null,null],[6,"U707","","",null,null],[6,"P707","","",null,null],[6,"N707","","",null,null],[6,"U708","","",null,null],[6,"P708","","",null,null],[6,"N708","","",null,null],[6,"U709","","",null,null],[6,"P709","","",null,null],[6,"N709","","",null,null],[6,"U710","","",null,null],[6,"P710","","",null,null],[6,"N710","","",null,null],[6,"U711","","",null,null],[6,"P711","","",null,null],[6,"N711","","",null,null],[6,"U712","","",null,null],[6,"P712","","",null,null],[6,"N712","","",null,null],[6,"U713","","",null,null],[6,"P713","","",null,null],[6,"N713","","",null,null],[6,"U714","","",null,null],[6,"P714","","",null,null],[6,"N714","","",null,null],[6,"U715","","",null,null],[6,"P715","","",null,null],[6,"N715","","",null,null],[6,"U716","","",null,null],[6,"P716","","",null,null],[6,"N716","","",null,null],[6,"U717","","",null,null],[6,"P717","","",null,null],[6,"N717","","",null,null],[6,"U718","","",null,null],[6,"P718","","",null,null],[6,"N718","","",null,null],[6,"U719","","",null,null],[6,"P719","","",null,null],[6,"N719","","",null,null],[6,"U720","","",null,null],[6,"P720","","",null,null],[6,"N720","","",null,null],[6,"U721","","",null,null],[6,"P721","","",null,null],[6,"N721","","",null,null],[6,"U722","","",null,null],[6,"P722","","",null,null],[6,"N722","","",null,null],[6,"U723","","",null,null],[6,"P723","","",null,null],[6,"N723","","",null,null],[6,"U724","","",null,null],[6,"P724","","",null,null],[6,"N724","","",null,null],[6,"U725","","",null,null],[6,"P725","","",null,null],[6,"N725","","",null,null],[6,"U726","","",null,null],[6,"P726","","",null,null],[6,"N726","","",null,null],[6,"U727","","",null,null],[6,"P727","","",null,null],[6,"N727","","",null,null],[6,"U728","","",null,null],[6,"P728","","",null,null],[6,"N728","","",null,null],[6,"U729","","",null,null],[6,"P729","","",null,null],[6,"N729","","",null,null],[6,"U730","","",null,null],[6,"P730","","",null,null],[6,"N730","","",null,null],[6,"U731","","",null,null],[6,"P731","","",null,null],[6,"N731","","",null,null],[6,"U732","","",null,null],[6,"P732","","",null,null],[6,"N732","","",null,null],[6,"U733","","",null,null],[6,"P733","","",null,null],[6,"N733","","",null,null],[6,"U734","","",null,null],[6,"P734","","",null,null],[6,"N734","","",null,null],[6,"U735","","",null,null],[6,"P735","","",null,null],[6,"N735","","",null,null],[6,"U736","","",null,null],[6,"P736","","",null,null],[6,"N736","","",null,null],[6,"U737","","",null,null],[6,"P737","","",null,null],[6,"N737","","",null,null],[6,"U738","","",null,null],[6,"P738","","",null,null],[6,"N738","","",null,null],[6,"U739","","",null,null],[6,"P739","","",null,null],[6,"N739","","",null,null],[6,"U740","","",null,null],[6,"P740","","",null,null],[6,"N740","","",null,null],[6,"U741","","",null,null],[6,"P741","","",null,null],[6,"N741","","",null,null],[6,"U742","","",null,null],[6,"P742","","",null,null],[6,"N742","","",null,null],[6,"U743","","",null,null],[6,"P743","","",null,null],[6,"N743","","",null,null],[6,"U744","","",null,null],[6,"P744","","",null,null],[6,"N744","","",null,null],[6,"U745","","",null,null],[6,"P745","","",null,null],[6,"N745","","",null,null],[6,"U746","","",null,null],[6,"P746","","",null,null],[6,"N746","","",null,null],[6,"U747","","",null,null],[6,"P747","","",null,null],[6,"N747","","",null,null],[6,"U748","","",null,null],[6,"P748","","",null,null],[6,"N748","","",null,null],[6,"U749","","",null,null],[6,"P749","","",null,null],[6,"N749","","",null,null],[6,"U750","","",null,null],[6,"P750","","",null,null],[6,"N750","","",null,null],[6,"U751","","",null,null],[6,"P751","","",null,null],[6,"N751","","",null,null],[6,"U752","","",null,null],[6,"P752","","",null,null],[6,"N752","","",null,null],[6,"U753","","",null,null],[6,"P753","","",null,null],[6,"N753","","",null,null],[6,"U754","","",null,null],[6,"P754","","",null,null],[6,"N754","","",null,null],[6,"U755","","",null,null],[6,"P755","","",null,null],[6,"N755","","",null,null],[6,"U756","","",null,null],[6,"P756","","",null,null],[6,"N756","","",null,null],[6,"U757","","",null,null],[6,"P757","","",null,null],[6,"N757","","",null,null],[6,"U758","","",null,null],[6,"P758","","",null,null],[6,"N758","","",null,null],[6,"U759","","",null,null],[6,"P759","","",null,null],[6,"N759","","",null,null],[6,"U760","","",null,null],[6,"P760","","",null,null],[6,"N760","","",null,null],[6,"U761","","",null,null],[6,"P761","","",null,null],[6,"N761","","",null,null],[6,"U762","","",null,null],[6,"P762","","",null,null],[6,"N762","","",null,null],[6,"U763","","",null,null],[6,"P763","","",null,null],[6,"N763","","",null,null],[6,"U764","","",null,null],[6,"P764","","",null,null],[6,"N764","","",null,null],[6,"U765","","",null,null],[6,"P765","","",null,null],[6,"N765","","",null,null],[6,"U766","","",null,null],[6,"P766","","",null,null],[6,"N766","","",null,null],[6,"U767","","",null,null],[6,"P767","","",null,null],[6,"N767","","",null,null],[6,"U768","","",null,null],[6,"P768","","",null,null],[6,"N768","","",null,null],[6,"U769","","",null,null],[6,"P769","","",null,null],[6,"N769","","",null,null],[6,"U770","","",null,null],[6,"P770","","",null,null],[6,"N770","","",null,null],[6,"U771","","",null,null],[6,"P771","","",null,null],[6,"N771","","",null,null],[6,"U772","","",null,null],[6,"P772","","",null,null],[6,"N772","","",null,null],[6,"U773","","",null,null],[6,"P773","","",null,null],[6,"N773","","",null,null],[6,"U774","","",null,null],[6,"P774","","",null,null],[6,"N774","","",null,null],[6,"U775","","",null,null],[6,"P775","","",null,null],[6,"N775","","",null,null],[6,"U776","","",null,null],[6,"P776","","",null,null],[6,"N776","","",null,null],[6,"U777","","",null,null],[6,"P777","","",null,null],[6,"N777","","",null,null],[6,"U778","","",null,null],[6,"P778","","",null,null],[6,"N778","","",null,null],[6,"U779","","",null,null],[6,"P779","","",null,null],[6,"N779","","",null,null],[6,"U780","","",null,null],[6,"P780","","",null,null],[6,"N780","","",null,null],[6,"U781","","",null,null],[6,"P781","","",null,null],[6,"N781","","",null,null],[6,"U782","","",null,null],[6,"P782","","",null,null],[6,"N782","","",null,null],[6,"U783","","",null,null],[6,"P783","","",null,null],[6,"N783","","",null,null],[6,"U784","","",null,null],[6,"P784","","",null,null],[6,"N784","","",null,null],[6,"U785","","",null,null],[6,"P785","","",null,null],[6,"N785","","",null,null],[6,"U786","","",null,null],[6,"P786","","",null,null],[6,"N786","","",null,null],[6,"U787","","",null,null],[6,"P787","","",null,null],[6,"N787","","",null,null],[6,"U788","","",null,null],[6,"P788","","",null,null],[6,"N788","","",null,null],[6,"U789","","",null,null],[6,"P789","","",null,null],[6,"N789","","",null,null],[6,"U790","","",null,null],[6,"P790","","",null,null],[6,"N790","","",null,null],[6,"U791","","",null,null],[6,"P791","","",null,null],[6,"N791","","",null,null],[6,"U792","","",null,null],[6,"P792","","",null,null],[6,"N792","","",null,null],[6,"U793","","",null,null],[6,"P793","","",null,null],[6,"N793","","",null,null],[6,"U794","","",null,null],[6,"P794","","",null,null],[6,"N794","","",null,null],[6,"U795","","",null,null],[6,"P795","","",null,null],[6,"N795","","",null,null],[6,"U796","","",null,null],[6,"P796","","",null,null],[6,"N796","","",null,null],[6,"U797","","",null,null],[6,"P797","","",null,null],[6,"N797","","",null,null],[6,"U798","","",null,null],[6,"P798","","",null,null],[6,"N798","","",null,null],[6,"U799","","",null,null],[6,"P799","","",null,null],[6,"N799","","",null,null],[6,"U800","","",null,null],[6,"P800","","",null,null],[6,"N800","","",null,null],[6,"U801","","",null,null],[6,"P801","","",null,null],[6,"N801","","",null,null],[6,"U802","","",null,null],[6,"P802","","",null,null],[6,"N802","","",null,null],[6,"U803","","",null,null],[6,"P803","","",null,null],[6,"N803","","",null,null],[6,"U804","","",null,null],[6,"P804","","",null,null],[6,"N804","","",null,null],[6,"U805","","",null,null],[6,"P805","","",null,null],[6,"N805","","",null,null],[6,"U806","","",null,null],[6,"P806","","",null,null],[6,"N806","","",null,null],[6,"U807","","",null,null],[6,"P807","","",null,null],[6,"N807","","",null,null],[6,"U808","","",null,null],[6,"P808","","",null,null],[6,"N808","","",null,null],[6,"U809","","",null,null],[6,"P809","","",null,null],[6,"N809","","",null,null],[6,"U810","","",null,null],[6,"P810","","",null,null],[6,"N810","","",null,null],[6,"U811","","",null,null],[6,"P811","","",null,null],[6,"N811","","",null,null],[6,"U812","","",null,null],[6,"P812","","",null,null],[6,"N812","","",null,null],[6,"U813","","",null,null],[6,"P813","","",null,null],[6,"N813","","",null,null],[6,"U814","","",null,null],[6,"P814","","",null,null],[6,"N814","","",null,null],[6,"U815","","",null,null],[6,"P815","","",null,null],[6,"N815","","",null,null],[6,"U816","","",null,null],[6,"P816","","",null,null],[6,"N816","","",null,null],[6,"U817","","",null,null],[6,"P817","","",null,null],[6,"N817","","",null,null],[6,"U818","","",null,null],[6,"P818","","",null,null],[6,"N818","","",null,null],[6,"U819","","",null,null],[6,"P819","","",null,null],[6,"N819","","",null,null],[6,"U820","","",null,null],[6,"P820","","",null,null],[6,"N820","","",null,null],[6,"U821","","",null,null],[6,"P821","","",null,null],[6,"N821","","",null,null],[6,"U822","","",null,null],[6,"P822","","",null,null],[6,"N822","","",null,null],[6,"U823","","",null,null],[6,"P823","","",null,null],[6,"N823","","",null,null],[6,"U824","","",null,null],[6,"P824","","",null,null],[6,"N824","","",null,null],[6,"U825","","",null,null],[6,"P825","","",null,null],[6,"N825","","",null,null],[6,"U826","","",null,null],[6,"P826","","",null,null],[6,"N826","","",null,null],[6,"U827","","",null,null],[6,"P827","","",null,null],[6,"N827","","",null,null],[6,"U828","","",null,null],[6,"P828","","",null,null],[6,"N828","","",null,null],[6,"U829","","",null,null],[6,"P829","","",null,null],[6,"N829","","",null,null],[6,"U830","","",null,null],[6,"P830","","",null,null],[6,"N830","","",null,null],[6,"U831","","",null,null],[6,"P831","","",null,null],[6,"N831","","",null,null],[6,"U832","","",null,null],[6,"P832","","",null,null],[6,"N832","","",null,null],[6,"U833","","",null,null],[6,"P833","","",null,null],[6,"N833","","",null,null],[6,"U834","","",null,null],[6,"P834","","",null,null],[6,"N834","","",null,null],[6,"U835","","",null,null],[6,"P835","","",null,null],[6,"N835","","",null,null],[6,"U836","","",null,null],[6,"P836","","",null,null],[6,"N836","","",null,null],[6,"U837","","",null,null],[6,"P837","","",null,null],[6,"N837","","",null,null],[6,"U838","","",null,null],[6,"P838","","",null,null],[6,"N838","","",null,null],[6,"U839","","",null,null],[6,"P839","","",null,null],[6,"N839","","",null,null],[6,"U840","","",null,null],[6,"P840","","",null,null],[6,"N840","","",null,null],[6,"U841","","",null,null],[6,"P841","","",null,null],[6,"N841","","",null,null],[6,"U842","","",null,null],[6,"P842","","",null,null],[6,"N842","","",null,null],[6,"U843","","",null,null],[6,"P843","","",null,null],[6,"N843","","",null,null],[6,"U844","","",null,null],[6,"P844","","",null,null],[6,"N844","","",null,null],[6,"U845","","",null,null],[6,"P845","","",null,null],[6,"N845","","",null,null],[6,"U846","","",null,null],[6,"P846","","",null,null],[6,"N846","","",null,null],[6,"U847","","",null,null],[6,"P847","","",null,null],[6,"N847","","",null,null],[6,"U848","","",null,null],[6,"P848","","",null,null],[6,"N848","","",null,null],[6,"U849","","",null,null],[6,"P849","","",null,null],[6,"N849","","",null,null],[6,"U850","","",null,null],[6,"P850","","",null,null],[6,"N850","","",null,null],[6,"U851","","",null,null],[6,"P851","","",null,null],[6,"N851","","",null,null],[6,"U852","","",null,null],[6,"P852","","",null,null],[6,"N852","","",null,null],[6,"U853","","",null,null],[6,"P853","","",null,null],[6,"N853","","",null,null],[6,"U854","","",null,null],[6,"P854","","",null,null],[6,"N854","","",null,null],[6,"U855","","",null,null],[6,"P855","","",null,null],[6,"N855","","",null,null],[6,"U856","","",null,null],[6,"P856","","",null,null],[6,"N856","","",null,null],[6,"U857","","",null,null],[6,"P857","","",null,null],[6,"N857","","",null,null],[6,"U858","","",null,null],[6,"P858","","",null,null],[6,"N858","","",null,null],[6,"U859","","",null,null],[6,"P859","","",null,null],[6,"N859","","",null,null],[6,"U860","","",null,null],[6,"P860","","",null,null],[6,"N860","","",null,null],[6,"U861","","",null,null],[6,"P861","","",null,null],[6,"N861","","",null,null],[6,"U862","","",null,null],[6,"P862","","",null,null],[6,"N862","","",null,null],[6,"U863","","",null,null],[6,"P863","","",null,null],[6,"N863","","",null,null],[6,"U864","","",null,null],[6,"P864","","",null,null],[6,"N864","","",null,null],[6,"U865","","",null,null],[6,"P865","","",null,null],[6,"N865","","",null,null],[6,"U866","","",null,null],[6,"P866","","",null,null],[6,"N866","","",null,null],[6,"U867","","",null,null],[6,"P867","","",null,null],[6,"N867","","",null,null],[6,"U868","","",null,null],[6,"P868","","",null,null],[6,"N868","","",null,null],[6,"U869","","",null,null],[6,"P869","","",null,null],[6,"N869","","",null,null],[6,"U870","","",null,null],[6,"P870","","",null,null],[6,"N870","","",null,null],[6,"U871","","",null,null],[6,"P871","","",null,null],[6,"N871","","",null,null],[6,"U872","","",null,null],[6,"P872","","",null,null],[6,"N872","","",null,null],[6,"U873","","",null,null],[6,"P873","","",null,null],[6,"N873","","",null,null],[6,"U874","","",null,null],[6,"P874","","",null,null],[6,"N874","","",null,null],[6,"U875","","",null,null],[6,"P875","","",null,null],[6,"N875","","",null,null],[6,"U876","","",null,null],[6,"P876","","",null,null],[6,"N876","","",null,null],[6,"U877","","",null,null],[6,"P877","","",null,null],[6,"N877","","",null,null],[6,"U878","","",null,null],[6,"P878","","",null,null],[6,"N878","","",null,null],[6,"U879","","",null,null],[6,"P879","","",null,null],[6,"N879","","",null,null],[6,"U880","","",null,null],[6,"P880","","",null,null],[6,"N880","","",null,null],[6,"U881","","",null,null],[6,"P881","","",null,null],[6,"N881","","",null,null],[6,"U882","","",null,null],[6,"P882","","",null,null],[6,"N882","","",null,null],[6,"U883","","",null,null],[6,"P883","","",null,null],[6,"N883","","",null,null],[6,"U884","","",null,null],[6,"P884","","",null,null],[6,"N884","","",null,null],[6,"U885","","",null,null],[6,"P885","","",null,null],[6,"N885","","",null,null],[6,"U886","","",null,null],[6,"P886","","",null,null],[6,"N886","","",null,null],[6,"U887","","",null,null],[6,"P887","","",null,null],[6,"N887","","",null,null],[6,"U888","","",null,null],[6,"P888","","",null,null],[6,"N888","","",null,null],[6,"U889","","",null,null],[6,"P889","","",null,null],[6,"N889","","",null,null],[6,"U890","","",null,null],[6,"P890","","",null,null],[6,"N890","","",null,null],[6,"U891","","",null,null],[6,"P891","","",null,null],[6,"N891","","",null,null],[6,"U892","","",null,null],[6,"P892","","",null,null],[6,"N892","","",null,null],[6,"U893","","",null,null],[6,"P893","","",null,null],[6,"N893","","",null,null],[6,"U894","","",null,null],[6,"P894","","",null,null],[6,"N894","","",null,null],[6,"U895","","",null,null],[6,"P895","","",null,null],[6,"N895","","",null,null],[6,"U896","","",null,null],[6,"P896","","",null,null],[6,"N896","","",null,null],[6,"U897","","",null,null],[6,"P897","","",null,null],[6,"N897","","",null,null],[6,"U898","","",null,null],[6,"P898","","",null,null],[6,"N898","","",null,null],[6,"U899","","",null,null],[6,"P899","","",null,null],[6,"N899","","",null,null],[6,"U900","","",null,null],[6,"P900","","",null,null],[6,"N900","","",null,null],[6,"U901","","",null,null],[6,"P901","","",null,null],[6,"N901","","",null,null],[6,"U902","","",null,null],[6,"P902","","",null,null],[6,"N902","","",null,null],[6,"U903","","",null,null],[6,"P903","","",null,null],[6,"N903","","",null,null],[6,"U904","","",null,null],[6,"P904","","",null,null],[6,"N904","","",null,null],[6,"U905","","",null,null],[6,"P905","","",null,null],[6,"N905","","",null,null],[6,"U906","","",null,null],[6,"P906","","",null,null],[6,"N906","","",null,null],[6,"U907","","",null,null],[6,"P907","","",null,null],[6,"N907","","",null,null],[6,"U908","","",null,null],[6,"P908","","",null,null],[6,"N908","","",null,null],[6,"U909","","",null,null],[6,"P909","","",null,null],[6,"N909","","",null,null],[6,"U910","","",null,null],[6,"P910","","",null,null],[6,"N910","","",null,null],[6,"U911","","",null,null],[6,"P911","","",null,null],[6,"N911","","",null,null],[6,"U912","","",null,null],[6,"P912","","",null,null],[6,"N912","","",null,null],[6,"U913","","",null,null],[6,"P913","","",null,null],[6,"N913","","",null,null],[6,"U914","","",null,null],[6,"P914","","",null,null],[6,"N914","","",null,null],[6,"U915","","",null,null],[6,"P915","","",null,null],[6,"N915","","",null,null],[6,"U916","","",null,null],[6,"P916","","",null,null],[6,"N916","","",null,null],[6,"U917","","",null,null],[6,"P917","","",null,null],[6,"N917","","",null,null],[6,"U918","","",null,null],[6,"P918","","",null,null],[6,"N918","","",null,null],[6,"U919","","",null,null],[6,"P919","","",null,null],[6,"N919","","",null,null],[6,"U920","","",null,null],[6,"P920","","",null,null],[6,"N920","","",null,null],[6,"U921","","",null,null],[6,"P921","","",null,null],[6,"N921","","",null,null],[6,"U922","","",null,null],[6,"P922","","",null,null],[6,"N922","","",null,null],[6,"U923","","",null,null],[6,"P923","","",null,null],[6,"N923","","",null,null],[6,"U924","","",null,null],[6,"P924","","",null,null],[6,"N924","","",null,null],[6,"U925","","",null,null],[6,"P925","","",null,null],[6,"N925","","",null,null],[6,"U926","","",null,null],[6,"P926","","",null,null],[6,"N926","","",null,null],[6,"U927","","",null,null],[6,"P927","","",null,null],[6,"N927","","",null,null],[6,"U928","","",null,null],[6,"P928","","",null,null],[6,"N928","","",null,null],[6,"U929","","",null,null],[6,"P929","","",null,null],[6,"N929","","",null,null],[6,"U930","","",null,null],[6,"P930","","",null,null],[6,"N930","","",null,null],[6,"U931","","",null,null],[6,"P931","","",null,null],[6,"N931","","",null,null],[6,"U932","","",null,null],[6,"P932","","",null,null],[6,"N932","","",null,null],[6,"U933","","",null,null],[6,"P933","","",null,null],[6,"N933","","",null,null],[6,"U934","","",null,null],[6,"P934","","",null,null],[6,"N934","","",null,null],[6,"U935","","",null,null],[6,"P935","","",null,null],[6,"N935","","",null,null],[6,"U936","","",null,null],[6,"P936","","",null,null],[6,"N936","","",null,null],[6,"U937","","",null,null],[6,"P937","","",null,null],[6,"N937","","",null,null],[6,"U938","","",null,null],[6,"P938","","",null,null],[6,"N938","","",null,null],[6,"U939","","",null,null],[6,"P939","","",null,null],[6,"N939","","",null,null],[6,"U940","","",null,null],[6,"P940","","",null,null],[6,"N940","","",null,null],[6,"U941","","",null,null],[6,"P941","","",null,null],[6,"N941","","",null,null],[6,"U942","","",null,null],[6,"P942","","",null,null],[6,"N942","","",null,null],[6,"U943","","",null,null],[6,"P943","","",null,null],[6,"N943","","",null,null],[6,"U944","","",null,null],[6,"P944","","",null,null],[6,"N944","","",null,null],[6,"U945","","",null,null],[6,"P945","","",null,null],[6,"N945","","",null,null],[6,"U946","","",null,null],[6,"P946","","",null,null],[6,"N946","","",null,null],[6,"U947","","",null,null],[6,"P947","","",null,null],[6,"N947","","",null,null],[6,"U948","","",null,null],[6,"P948","","",null,null],[6,"N948","","",null,null],[6,"U949","","",null,null],[6,"P949","","",null,null],[6,"N949","","",null,null],[6,"U950","","",null,null],[6,"P950","","",null,null],[6,"N950","","",null,null],[6,"U951","","",null,null],[6,"P951","","",null,null],[6,"N951","","",null,null],[6,"U952","","",null,null],[6,"P952","","",null,null],[6,"N952","","",null,null],[6,"U953","","",null,null],[6,"P953","","",null,null],[6,"N953","","",null,null],[6,"U954","","",null,null],[6,"P954","","",null,null],[6,"N954","","",null,null],[6,"U955","","",null,null],[6,"P955","","",null,null],[6,"N955","","",null,null],[6,"U956","","",null,null],[6,"P956","","",null,null],[6,"N956","","",null,null],[6,"U957","","",null,null],[6,"P957","","",null,null],[6,"N957","","",null,null],[6,"U958","","",null,null],[6,"P958","","",null,null],[6,"N958","","",null,null],[6,"U959","","",null,null],[6,"P959","","",null,null],[6,"N959","","",null,null],[6,"U960","","",null,null],[6,"P960","","",null,null],[6,"N960","","",null,null],[6,"U961","","",null,null],[6,"P961","","",null,null],[6,"N961","","",null,null],[6,"U962","","",null,null],[6,"P962","","",null,null],[6,"N962","","",null,null],[6,"U963","","",null,null],[6,"P963","","",null,null],[6,"N963","","",null,null],[6,"U964","","",null,null],[6,"P964","","",null,null],[6,"N964","","",null,null],[6,"U965","","",null,null],[6,"P965","","",null,null],[6,"N965","","",null,null],[6,"U966","","",null,null],[6,"P966","","",null,null],[6,"N966","","",null,null],[6,"U967","","",null,null],[6,"P967","","",null,null],[6,"N967","","",null,null],[6,"U968","","",null,null],[6,"P968","","",null,null],[6,"N968","","",null,null],[6,"U969","","",null,null],[6,"P969","","",null,null],[6,"N969","","",null,null],[6,"U970","","",null,null],[6,"P970","","",null,null],[6,"N970","","",null,null],[6,"U971","","",null,null],[6,"P971","","",null,null],[6,"N971","","",null,null],[6,"U972","","",null,null],[6,"P972","","",null,null],[6,"N972","","",null,null],[6,"U973","","",null,null],[6,"P973","","",null,null],[6,"N973","","",null,null],[6,"U974","","",null,null],[6,"P974","","",null,null],[6,"N974","","",null,null],[6,"U975","","",null,null],[6,"P975","","",null,null],[6,"N975","","",null,null],[6,"U976","","",null,null],[6,"P976","","",null,null],[6,"N976","","",null,null],[6,"U977","","",null,null],[6,"P977","","",null,null],[6,"N977","","",null,null],[6,"U978","","",null,null],[6,"P978","","",null,null],[6,"N978","","",null,null],[6,"U979","","",null,null],[6,"P979","","",null,null],[6,"N979","","",null,null],[6,"U980","","",null,null],[6,"P980","","",null,null],[6,"N980","","",null,null],[6,"U981","","",null,null],[6,"P981","","",null,null],[6,"N981","","",null,null],[6,"U982","","",null,null],[6,"P982","","",null,null],[6,"N982","","",null,null],[6,"U983","","",null,null],[6,"P983","","",null,null],[6,"N983","","",null,null],[6,"U984","","",null,null],[6,"P984","","",null,null],[6,"N984","","",null,null],[6,"U985","","",null,null],[6,"P985","","",null,null],[6,"N985","","",null,null],[6,"U986","","",null,null],[6,"P986","","",null,null],[6,"N986","","",null,null],[6,"U987","","",null,null],[6,"P987","","",null,null],[6,"N987","","",null,null],[6,"U988","","",null,null],[6,"P988","","",null,null],[6,"N988","","",null,null],[6,"U989","","",null,null],[6,"P989","","",null,null],[6,"N989","","",null,null],[6,"U990","","",null,null],[6,"P990","","",null,null],[6,"N990","","",null,null],[6,"U991","","",null,null],[6,"P991","","",null,null],[6,"N991","","",null,null],[6,"U992","","",null,null],[6,"P992","","",null,null],[6,"N992","","",null,null],[6,"U993","","",null,null],[6,"P993","","",null,null],[6,"N993","","",null,null],[6,"U994","","",null,null],[6,"P994","","",null,null],[6,"N994","","",null,null],[6,"U995","","",null,null],[6,"P995","","",null,null],[6,"N995","","",null,null],[6,"U996","","",null,null],[6,"P996","","",null,null],[6,"N996","","",null,null],[6,"U997","","",null,null],[6,"P997","","",null,null],[6,"N997","","",null,null],[6,"U998","","",null,null],[6,"P998","","",null,null],[6,"N998","","",null,null],[6,"U999","","",null,null],[6,"P999","","",null,null],[6,"N999","","",null,null],[6,"U1000","","",null,null],[6,"P1000","","",null,null],[6,"N1000","","",null,null],[6,"U1001","","",null,null],[6,"P1001","","",null,null],[6,"N1001","","",null,null],[6,"U1002","","",null,null],[6,"P1002","","",null,null],[6,"N1002","","",null,null],[6,"U1003","","",null,null],[6,"P1003","","",null,null],[6,"N1003","","",null,null],[6,"U1004","","",null,null],[6,"P1004","","",null,null],[6,"N1004","","",null,null],[6,"U1005","","",null,null],[6,"P1005","","",null,null],[6,"N1005","","",null,null],[6,"U1006","","",null,null],[6,"P1006","","",null,null],[6,"N1006","","",null,null],[6,"U1007","","",null,null],[6,"P1007","","",null,null],[6,"N1007","","",null,null],[6,"U1008","","",null,null],[6,"P1008","","",null,null],[6,"N1008","","",null,null],[6,"U1009","","",null,null],[6,"P1009","","",null,null],[6,"N1009","","",null,null],[6,"U1010","","",null,null],[6,"P1010","","",null,null],[6,"N1010","","",null,null],[6,"U1011","","",null,null],[6,"P1011","","",null,null],[6,"N1011","","",null,null],[6,"U1012","","",null,null],[6,"P1012","","",null,null],[6,"N1012","","",null,null],[6,"U1013","","",null,null],[6,"P1013","","",null,null],[6,"N1013","","",null,null],[6,"U1014","","",null,null],[6,"P1014","","",null,null],[6,"N1014","","",null,null],[6,"U1015","","",null,null],[6,"P1015","","",null,null],[6,"N1015","","",null,null],[6,"U1016","","",null,null],[6,"P1016","","",null,null],[6,"N1016","","",null,null],[6,"U1017","","",null,null],[6,"P1017","","",null,null],[6,"N1017","","",null,null],[6,"U1018","","",null,null],[6,"P1018","","",null,null],[6,"N1018","","",null,null],[6,"U1019","","",null,null],[6,"P1019","","",null,null],[6,"N1019","","",null,null],[6,"U1020","","",null,null],[6,"P1020","","",null,null],[6,"N1020","","",null,null],[6,"U1021","","",null,null],[6,"P1021","","",null,null],[6,"N1021","","",null,null],[6,"U1022","","",null,null],[6,"P1022","","",null,null],[6,"N1022","","",null,null],[6,"U1023","","",null,null],[6,"P1023","","",null,null],[6,"N1023","","",null,null],[6,"U1024","","",null,null],[6,"P1024","","",null,null],[6,"N1024","","",null,null],[6,"U2048","","",null,null],[6,"P2048","","",null,null],[6,"N2048","","",null,null],[6,"U4096","","",null,null],[6,"P4096","","",null,null],[6,"N4096","","",null,null],[6,"U8192","","",null,null],[6,"P8192","","",null,null],[6,"N8192","","",null,null],[6,"U16384","","",null,null],[6,"P16384","","",null,null],[6,"N16384","","",null,null],[6,"U32768","","",null,null],[6,"P32768","","",null,null],[6,"N32768","","",null,null],[6,"U65536","","",null,null],[6,"P65536","","",null,null],[6,"N65536","","",null,null],[6,"U131072","","",null,null],[6,"P131072","","",null,null],[6,"N131072","","",null,null],[6,"U262144","","",null,null],[6,"P262144","","",null,null],[6,"N262144","","",null,null],[6,"U524288","","",null,null],[6,"P524288","","",null,null],[6,"N524288","","",null,null],[6,"U1048576","","",null,null],[6,"P1048576","","",null,null],[6,"N1048576","","",null,null],[6,"U2097152","","",null,null],[6,"P2097152","","",null,null],[6,"N2097152","","",null,null],[6,"U4194304","","",null,null],[6,"P4194304","","",null,null],[6,"N4194304","","",null,null],[6,"U8388608","","",null,null],[6,"P8388608","","",null,null],[6,"N8388608","","",null,null],[6,"U16777216","","",null,null],[6,"P16777216","","",null,null],[6,"N16777216","","",null,null],[6,"U33554432","","",null,null],[6,"P33554432","","",null,null],[6,"N33554432","","",null,null],[6,"U67108864","","",null,null],[6,"P67108864","","",null,null],[6,"N67108864","","",null,null],[6,"U134217728","","",null,null],[6,"P134217728","","",null,null],[6,"N134217728","","",null,null],[6,"U268435456","","",null,null],[6,"P268435456","","",null,null],[6,"N268435456","","",null,null],[6,"U536870912","","",null,null],[6,"P536870912","","",null,null],[6,"N536870912","","",null,null],[6,"U1073741824","","",null,null],[6,"P1073741824","","",null,null],[6,"N1073741824","","",null,null],[6,"U2147483648","","",null,null],[6,"P2147483648","","",null,null],[6,"N2147483648","","",null,null],[6,"U4294967296","","",null,null],[6,"P4294967296","","",null,null],[6,"N4294967296","","",null,null],[6,"U8589934592","","",null,null],[6,"P8589934592","","",null,null],[6,"N8589934592","","",null,null],[6,"U17179869184","","",null,null],[6,"P17179869184","","",null,null],[6,"N17179869184","","",null,null],[6,"U34359738368","","",null,null],[6,"P34359738368","","",null,null],[6,"N34359738368","","",null,null],[6,"U68719476736","","",null,null],[6,"P68719476736","","",null,null],[6,"N68719476736","","",null,null],[6,"U137438953472","","",null,null],[6,"P137438953472","","",null,null],[6,"N137438953472","","",null,null],[6,"U274877906944","","",null,null],[6,"P274877906944","","",null,null],[6,"N274877906944","","",null,null],[6,"U549755813888","","",null,null],[6,"P549755813888","","",null,null],[6,"N549755813888","","",null,null],[6,"U1099511627776","","",null,null],[6,"P1099511627776","","",null,null],[6,"N1099511627776","","",null,null],[6,"U2199023255552","","",null,null],[6,"P2199023255552","","",null,null],[6,"N2199023255552","","",null,null],[6,"U4398046511104","","",null,null],[6,"P4398046511104","","",null,null],[6,"N4398046511104","","",null,null],[6,"U8796093022208","","",null,null],[6,"P8796093022208","","",null,null],[6,"N8796093022208","","",null,null],[6,"U17592186044416","","",null,null],[6,"P17592186044416","","",null,null],[6,"N17592186044416","","",null,null],[6,"U35184372088832","","",null,null],[6,"P35184372088832","","",null,null],[6,"N35184372088832","","",null,null],[6,"U70368744177664","","",null,null],[6,"P70368744177664","","",null,null],[6,"N70368744177664","","",null,null],[6,"U140737488355328","","",null,null],[6,"P140737488355328","","",null,null],[6,"N140737488355328","","",null,null],[6,"U281474976710656","","",null,null],[6,"P281474976710656","","",null,null],[6,"N281474976710656","","",null,null],[6,"U562949953421312","","",null,null],[6,"P562949953421312","","",null,null],[6,"N562949953421312","","",null,null],[6,"U1125899906842624","","",null,null],[6,"P1125899906842624","","",null,null],[6,"N1125899906842624","","",null,null],[6,"U2251799813685248","","",null,null],[6,"P2251799813685248","","",null,null],[6,"N2251799813685248","","",null,null],[6,"U4503599627370496","","",null,null],[6,"P4503599627370496","","",null,null],[6,"N4503599627370496","","",null,null],[6,"U9007199254740992","","",null,null],[6,"P9007199254740992","","",null,null],[6,"N9007199254740992","","",null,null],[6,"U18014398509481984","","",null,null],[6,"P18014398509481984","","",null,null],[6,"N18014398509481984","","",null,null],[6,"U36028797018963968","","",null,null],[6,"P36028797018963968","","",null,null],[6,"N36028797018963968","","",null,null],[6,"U72057594037927936","","",null,null],[6,"P72057594037927936","","",null,null],[6,"N72057594037927936","","",null,null],[6,"U144115188075855872","","",null,null],[6,"P144115188075855872","","",null,null],[6,"N144115188075855872","","",null,null],[6,"U288230376151711744","","",null,null],[6,"P288230376151711744","","",null,null],[6,"N288230376151711744","","",null,null],[6,"U576460752303423488","","",null,null],[6,"P576460752303423488","","",null,null],[6,"N576460752303423488","","",null,null],[6,"U1152921504606846976","","",null,null],[6,"P1152921504606846976","","",null,null],[6,"N1152921504606846976","","",null,null],[6,"U2305843009213693952","","",null,null],[6,"P2305843009213693952","","",null,null],[6,"N2305843009213693952","","",null,null],[6,"U4611686018427387904","","",null,null],[6,"P4611686018427387904","","",null,null],[6,"N4611686018427387904","","",null,null],[6,"U9223372036854775808","","",null,null],[6,"U10000","","",null,null],[6,"P10000","","",null,null],[6,"N10000","","",null,null],[6,"U100000","","",null,null],[6,"P100000","","",null,null],[6,"N100000","","",null,null],[6,"U1000000","","",null,null],[6,"P1000000","","",null,null],[6,"N1000000","","",null,null],[6,"U10000000","","",null,null],[6,"P10000000","","",null,null],[6,"N10000000","","",null,null],[6,"U100000000","","",null,null],[6,"P100000000","","",null,null],[6,"N100000000","","",null,null],[6,"U1000000000","","",null,null],[6,"P1000000000","","",null,null],[6,"N1000000000","","",null,null],[6,"U10000000000","","",null,null],[6,"P10000000000","","",null,null],[6,"N10000000000","","",null,null],[6,"U100000000000","","",null,null],[6,"P100000000000","","",null,null],[6,"N100000000000","","",null,null],[6,"U1000000000000","","",null,null],[6,"P1000000000000","","",null,null],[6,"N1000000000000","","",null,null],[6,"U10000000000000","","",null,null],[6,"P10000000000000","","",null,null],[6,"N10000000000000","","",null,null],[6,"U100000000000000","","",null,null],[6,"P100000000000000","","",null,null],[6,"N100000000000000","","",null,null],[6,"U1000000000000000","","",null,null],[6,"P1000000000000000","","",null,null],[6,"N1000000000000000","","",null,null],[6,"U10000000000000000","","",null,null],[6,"P10000000000000000","","",null,null],[6,"N10000000000000000","","",null,null],[6,"U100000000000000000","","",null,null],[6,"P100000000000000000","","",null,null],[6,"N100000000000000000","","",null,null],[6,"U1000000000000000000","","",null,null],[6,"P1000000000000000000","","",null,null],[6,"N1000000000000000000","","",null,null],[6,"U10000000000000000000","","",null,null],[0,"bit","typenum","Type-level bits. These are rather simple and are used as the building blocks of the other number types in this crate.",null,null],[3,"B0","typenum::bit","The type-level bit 0.",null,null],[3,"B1","","The type-level bit 1.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b0"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"b0"}}],[11,"new","","Instantiates a singleton representing this bit.",0,{"inputs":[],"output":{"name":"b0"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"b1"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"b1"}}],[11,"new","","Instantiates a singleton representing this bit.",1,{"inputs":[],"output":{"name":"b1"}}],[11,"to_u8","","",0,{"inputs":[],"output":{"name":"u8"}}],[11,"to_bool","","",0,{"inputs":[],"output":{"name":"bool"}}],[11,"to_u8","","",1,{"inputs":[],"output":{"name":"u8"}}],[11,"to_bool","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"not","","",0,null],[11,"not","","",1,null],[11,"bitand","","",0,null],[11,"bitand","","",1,null],[11,"bitand","","",1,null],[11,"bitor","","",0,null],[11,"bitor","","",0,null],[11,"bitor","","",1,null],[11,"bitxor","","",0,null],[11,"bitxor","","",1,null],[11,"bitxor","","",0,null],[11,"bitxor","","",1,null],[11,"min","","",0,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"b0"}}],[11,"min","","",0,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"b0"}}],[11,"min","","",1,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"b0"}}],[11,"min","","",1,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"b1"}}],[11,"max","","",0,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"b0"}}],[11,"max","","",0,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"b1"}}],[11,"max","","",1,{"inputs":[{"name":"self"},{"name":"b0"}],"output":{"name":"b1"}}],[11,"max","","",1,{"inputs":[{"name":"self"},{"name":"b1"}],"output":{"name":"b1"}}],[0,"uint","typenum","Type-level unsigned integers.",null,null],[3,"UTerm","typenum::uint","The terminating type for `UInt`; it always comes after the most significant bit. `UTerm` by itself represents zero, which is aliased to `U0`.",null,null],[3,"UInt","","`UInt` is defined recursively, where `B` is the least significant bit and `U` is the rest of the number. Conceptually, `U` should be bound by the trait `Unsigned` and `B` should be bound by the trait `Bit`, but enforcing these bounds causes linear instead of logrithmic scaling in some places, so they are left off for now. They may be enforced in future.",null,null],[6,"GetBitOut","","",null,null],[6,"SetBitOut","","Alias for the result of calling `SetBit`: `SetBitOut<N, I, B> = <N as SetBit<I, B>>::Output`.",null,null],[8,"GetBit","","",null,null],[16,"Output","","",2,null],[8,"SetBit","","A **type operator** that, when implemented for unsigned integer `N`, sets the bit at position `I` to `B`.",null,null],[16,"Output","","",3,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"uterm"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"uterm"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"uterm"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"uterm"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"uterm"}}],[11,"new","","Instantiates a singleton representing this unsigned integer.",4,{"inputs":[],"output":{"name":"uterm"}}],[11,"to_u8","","",4,{"inputs":[],"output":{"name":"u8"}}],[11,"to_u16","","",4,{"inputs":[],"output":{"name":"u16"}}],[11,"to_u32","","",4,{"inputs":[],"output":{"name":"u32"}}],[11,"to_u64","","",4,{"inputs":[],"output":{"name":"u64"}}],[11,"to_usize","","",4,{"inputs":[],"output":{"name":"usize"}}],[11,"to_i8","","",4,{"inputs":[],"output":{"name":"i8"}}],[11,"to_i16","","",4,{"inputs":[],"output":{"name":"i16"}}],[11,"to_i32","","",4,{"inputs":[],"output":{"name":"i32"}}],[11,"to_i64","","",4,{"inputs":[],"output":{"name":"i64"}}],[11,"to_isize","","",4,{"inputs":[],"output":{"name":"isize"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"uint"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"uint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"uint"}}],[11,"new","","Instantiates a singleton representing this unsigned integer.",5,{"inputs":[],"output":{"name":"uint"}}],[11,"to_u8","","",5,{"inputs":[],"output":{"name":"u8"}}],[11,"to_u16","","",5,{"inputs":[],"output":{"name":"u16"}}],[11,"to_u32","","",5,{"inputs":[],"output":{"name":"u32"}}],[11,"to_u64","","",5,{"inputs":[],"output":{"name":"u64"}}],[11,"to_usize","","",5,{"inputs":[],"output":{"name":"usize"}}],[11,"to_i8","","",5,{"inputs":[],"output":{"name":"i8"}}],[11,"to_i16","","",5,{"inputs":[],"output":{"name":"i16"}}],[11,"to_i32","","",5,{"inputs":[],"output":{"name":"i32"}}],[11,"to_i64","","",5,{"inputs":[],"output":{"name":"i64"}}],[11,"to_isize","","",5,{"inputs":[],"output":{"name":"isize"}}],[11,"len","","",4,null],[11,"len","","",5,null],[11,"add","","",4,null],[11,"add","","",5,null],[11,"add","","",4,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"add","","",4,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"add","","",5,null],[11,"sub","","",4,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"sub","","",4,null],[11,"sub","","",5,null],[11,"bitand","","",4,null],[11,"bitand","","",5,null],[11,"bitor","","",4,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitxor","","",4,null],[11,"bitxor","","",5,null],[11,"shl","","",4,null],[11,"shl","","",4,null],[11,"shl","","",5,null],[11,"shl","","",5,null],[11,"shl","","",5,null],[11,"shl","","",4,null],[11,"shl","","",5,null],[11,"shr","","",4,null],[11,"shr","","",5,null],[11,"shr","","",4,null],[11,"shr","","",4,null],[11,"shr","","",5,null],[11,"shr","","",5,null],[11,"shr","","",5,null],[11,"mul","","",5,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"mul","","",5,null],[11,"mul","","",5,null],[11,"mul","","",4,null],[11,"mul","","",5,null],[11,"mul","","",5,null],[11,"div","","",4,null],[11,"div","","",5,null],[11,"rem","","",4,null],[11,"rem","","",5,null],[11,"partial_div","","",4,null],[11,"partial_div","","",5,null],[11,"min","","",4,null],[11,"min","","",5,null],[11,"max","","",4,null],[11,"max","","",5,null],[0,"int","typenum","Type-level signed integers.",null,null],[3,"PInt","typenum::int","Type-level signed integers with positive sign.",null,null],[3,"NInt","","Type-level signed integers with negative sign.",null,null],[3,"Z0","","The type-level signed integer 0.",null,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"pint"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"pint"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"pint"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"nint"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"nint"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"nint"}}],[11,"new","","Instantiates a singleton representing this strictly positive integer.",6,{"inputs":[],"output":{"name":"pint"}}],[11,"new","","Instantiates a singleton representing this strictly negative integer.",7,{"inputs":[],"output":{"name":"nint"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"z0"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"z0"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"z0"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"z0"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"z0"}}],[11,"new","","Instantiates a singleton representing the integer 0.",8,{"inputs":[],"output":{"name":"z0"}}],[11,"to_i8","","",8,{"inputs":[],"output":{"name":"i8"}}],[11,"to_i16","","",8,{"inputs":[],"output":{"name":"i16"}}],[11,"to_i32","","",8,{"inputs":[],"output":{"name":"i32"}}],[11,"to_i64","","",8,{"inputs":[],"output":{"name":"i64"}}],[11,"to_isize","","",8,{"inputs":[],"output":{"name":"isize"}}],[11,"to_i8","","",6,{"inputs":[],"output":{"name":"i8"}}],[11,"to_i16","","",6,{"inputs":[],"output":{"name":"i16"}}],[11,"to_i32","","",6,{"inputs":[],"output":{"name":"i32"}}],[11,"to_i64","","",6,{"inputs":[],"output":{"name":"i64"}}],[11,"to_isize","","",6,{"inputs":[],"output":{"name":"isize"}}],[11,"to_i8","","",7,{"inputs":[],"output":{"name":"i8"}}],[11,"to_i16","","",7,{"inputs":[],"output":{"name":"i16"}}],[11,"to_i32","","",7,{"inputs":[],"output":{"name":"i32"}}],[11,"to_i64","","",7,{"inputs":[],"output":{"name":"i64"}}],[11,"to_isize","","",7,{"inputs":[],"output":{"name":"isize"}}],[11,"neg","","",8,null],[11,"neg","","",6,null],[11,"neg","","",7,null],[11,"add","","",8,null],[11,"add","","",6,null],[11,"add","","",7,null],[11,"add","","",6,null],[11,"add","","",7,null],[11,"add","","",6,null],[11,"add","","",7,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",8,null],[11,"sub","","",6,null],[11,"sub","","",7,null],[11,"sub","","",6,null],[11,"sub","","",7,null],[11,"sub","","",6,null],[11,"sub","","",7,null],[11,"mul","","",8,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"div","","",8,null],[11,"div","","",6,null],[11,"div","","",6,null],[11,"div","","",7,null],[11,"div","","",7,null],[11,"rem","","",8,null],[11,"rem","","",6,null],[11,"rem","","",6,null],[11,"rem","","",7,null],[11,"rem","","",7,null],[11,"powi","","",8,null],[11,"powi","","",8,null],[11,"powi","","",8,null],[11,"powi","","",9,null],[11,"powi","","",10,null],[11,"powi","","",10,null],[11,"powi","","",6,null],[11,"powi","","",7,null],[11,"powi","","",6,null],[11,"powi","","",7,null],[11,"powi","","",7,null],[11,"min","","",8,null],[11,"min","","",8,null],[11,"min","","",8,null],[11,"min","","",6,null],[11,"min","","",7,null],[11,"min","","",6,null],[11,"min","","",7,null],[11,"min","","",6,null],[11,"min","","",7,null],[11,"max","","",8,null],[11,"max","","",8,null],[11,"max","","",8,null],[11,"max","","",6,null],[11,"max","","",7,null],[11,"max","","",6,null],[11,"max","","",7,null],[11,"max","","",6,null],[11,"max","","",7,null],[0,"marker_traits","typenum","These are all of the **marker traits** used in typenum. Note that the definition here for marker traits is slightly different than the conventional one --- we include traits with functions that convert a type to the corresponding value.",null,null],[8,"NonZero","typenum::marker_traits","A **marker trait** to designate that a type is not zero. All number types in this crate implement `NonZero` except `B0`, `U0`, and `Z0`.",null,null],[8,"Ord","","A **Marker trait** for the types `Greater`, `Equal`, and `Less`.",null,null],[10,"to_ordering","","",11,{"inputs":[],"output":{"name":"ordering"}}],[8,"Bit","","The **marker trait** for compile time bits.",null,null],[10,"to_u8","","",12,{"inputs":[],"output":{"name":"u8"}}],[10,"to_bool","","",12,{"inputs":[],"output":{"name":"bool"}}],[8,"Unsigned","","The **marker trait** for compile time unsigned integers.",null,null],[10,"to_u8","","",13,{"inputs":[],"output":{"name":"u8"}}],[10,"to_u16","","",13,{"inputs":[],"output":{"name":"u16"}}],[10,"to_u32","","",13,{"inputs":[],"output":{"name":"u32"}}],[10,"to_u64","","",13,{"inputs":[],"output":{"name":"u64"}}],[10,"to_usize","","",13,{"inputs":[],"output":{"name":"usize"}}],[10,"to_i8","","",13,{"inputs":[],"output":{"name":"i8"}}],[10,"to_i16","","",13,{"inputs":[],"output":{"name":"i16"}}],[10,"to_i32","","",13,{"inputs":[],"output":{"name":"i32"}}],[10,"to_i64","","",13,{"inputs":[],"output":{"name":"i64"}}],[10,"to_isize","","",13,{"inputs":[],"output":{"name":"isize"}}],[8,"Integer","","The **marker trait** for compile time signed integers.",null,null],[10,"to_i8","","",14,{"inputs":[],"output":{"name":"i8"}}],[10,"to_i16","","",14,{"inputs":[],"output":{"name":"i16"}}],[10,"to_i32","","",14,{"inputs":[],"output":{"name":"i32"}}],[10,"to_i64","","",14,{"inputs":[],"output":{"name":"i64"}}],[10,"to_isize","","",14,{"inputs":[],"output":{"name":"isize"}}],[8,"TypeArray","","The **marker trait** for type-level arrays of type-level numbers.",null,null],[0,"type_operators","typenum","This module provides useful **type operators** that are not defined in `core`.",null,null],[8,"Same","typenum::type_operators","A **type operator** that ensures that `Rhs` is the same as `Self`, it is mainly useful for writing macros that can take arbitrary binary or unary operators.",null,null],[16,"Output","","Should always be `Self`",15,null],[8,"Pow","","A **type operator** that provides exponentiation by repeated squaring.",null,null],[16,"Output","","The result of the exponentiation.",16,null],[10,"powi","","This function isn't used in this crate, but may be useful for others. It is implemented for primitives.",16,null],[8,"Cmp","","A **type operator** for comparing `Self` and `Rhs`. It provides a similar functionality to the function `core::cmp::Ord::cmp` but for types.",null,null],[16,"Output","","The result of the comparison. It should only ever be one of `Greater`, `Less`, or `Equal`.",17,null],[8,"Len","","A **type operator** that gives the length of an `Array` or the number of bits in a `UInt`.",null,null],[16,"Output","","The length as a type-level unsigned integer.",18,null],[10,"len","","This function isn't used in this crate, but may be useful for others.",18,null],[8,"PartialDiv","","Division as a partial function. This **type operator** performs division just as `Div`, but is only defined when the result is an integer (i.e. there is no remainder).",null,null],[16,"Output","","The type of the result of the division",19,null],[10,"partial_div","","Method for performing the division",19,null],[8,"Min","","A **type operator** that returns the minimum of `Self` and `Rhs`.",null,null],[16,"Output","","The type of the minimum of `Self` and `Rhs`",20,null],[10,"min","","Method returning the minimum",20,null],[8,"Max","","A **type operator** that returns the maximum of `Self` and `Rhs`.",null,null],[16,"Output","","The type of the maximum of `Self` and `Rhs`",21,null],[10,"max","","Method returning the maximum",21,null],[0,"operator_aliases","typenum","This module provides aliases for the type operators used in this crate. Their purpose is to increase the ergonomics of performing operations on the types defined here.",null,null],[6,"And","typenum::operator_aliases","Alias for the associated type of `BitAnd`: `And<A, B> = <A as BitAnd<B>>::Output`",null,null],[6,"Or","","Alias for the associated type of `BitOr`: `Or<A, B> = <A as BitOr<B>>::Output`",null,null],[6,"Xor","","Alias for the associated type of `BitXor`: `Xor<A, B> = <A as BitXor<B>>::Output`",null,null],[6,"Shleft","","Alias for the associated type of `Shl`: `Shleft<A, B> = <A as Shl<B>>::Output`",null,null],[6,"Shright","","Alias for the associated type of `Shr`: `Shright<A, B> = <A as Shr<B>>::Output`",null,null],[6,"Sum","","Alias for the associated type of `Add`: `Sum<A, B> = <A as Add<B>>::Output`",null,null],[6,"Diff","","Alias for the associated type of `Sub`: `Diff<A, B> = <A as Sub<B>>::Output`",null,null],[6,"Prod","","Alias for the associated type of `Mul`: `Prod<A, B> = <A as Mul<B>>::Output`",null,null],[6,"Quot","","Alias for the associated type of `Div`: `Quot<A, B> = <A as Div<B>>::Output`",null,null],[6,"Mod","","Alias for the associated type of `Rem`: `Mod<A, B> = <A as Rem<B>>::Output`",null,null],[6,"PartialQuot","","Alias for the associated type of `PartialDiv`: `PartialQuot<A, B> = <A as PartialDiv<B>>::Output`",null,null],[6,"Negate","","Alias for the associated type of `Neg`: `Negate<A> = <A as Neg>::Output`",null,null],[6,"Exp","","Alias for the associated type of `Pow`: `Exp<A, B> = <A as Pow<B>>::Output`",null,null],[6,"Add1","","Alias to make it easy to add 1: `Add1<A> = <A as Add<B1>>::Output`",null,null],[6,"Sub1","","Alias to make it easy to subtract 1: `Sub1<A> = <A as Sub<B1>>::Output`",null,null],[6,"Square","","Alias to make it easy to square. `Square<A> = <A as Mul<A>>::Output`",null,null],[6,"Cube","","Alias to make it easy to square. `Cube<A> = <Square<A> as Mul<A>>::Output`",null,null],[6,"Compare","","Alias for the associated type of `Cmp`: `Compare<A, B> = <A as Cmp<B>>::Output`",null,null],[6,"Length","","Alias for the associated type of `Len`: `Length<A> = <A as Len>::Output`",null,null],[6,"Minimum","","Alias for the associated type of `Min`: `Minimum<A, B> = <A as Min<B>>::Output`",null,null],[6,"Maximum","","Alias for the associated type of `Max`: `Maximum<A, B> = <A as Max<B>>::Output`",null,null],[0,"array","typenum","This module provides a type-level array of type-level numbers.",null,null],[3,"ATerm","typenum::array","The terminating type for type arrays.",null,null],[3,"TArr","","`TArr` is a type that acts as an array of types. It is defined similarly to `UInt`, only its values can be more than bits, and it is designed to act as an array. So you can only add two if they have the same number of elements, for example.",null,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"aterm"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"aterm"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"aterm"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"aterm"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"self"},{"name":"tarr"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"tarr"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",22,null],[11,"len","","",23,null],[11,"add","","",22,null],[11,"add","","",23,null],[11,"sub","","",22,null],[11,"sub","","",23,null],[11,"mul","","",22,null],[11,"mul","","",23,null],[11,"mul","typenum::int","",8,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"mul","","",8,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"div","typenum::array","",22,null],[11,"div","","",23,null],[11,"partial_div","","",22,null],[11,"partial_div","","",23,null],[11,"rem","","",22,null],[11,"rem","","",23,null],[11,"neg","","",22,null],[11,"neg","","",23,null],[11,"eq","typenum","",24,{"inputs":[{"name":"self"},{"name":"greater"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"greater"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"greater"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"greater"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"greater"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"less"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"less"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"less"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"less"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"less"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"equal"}],"output":{"name":"bool"}}],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"equal"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"equal"}],"output":{"name":"option"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"equal"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"equal"}}],[11,"to_ordering","","",24,{"inputs":[],"output":{"name":"ordering"}}],[11,"to_ordering","","",25,{"inputs":[],"output":{"name":"ordering"}}],[11,"to_ordering","","",26,{"inputs":[],"output":{"name":"ordering"}}],[14,"tarr","","Create a new type-level arrray. Only usable on Rust 1.13.0 or newer.",null,null]],"paths":[[3,"B0"],[3,"B1"],[8,"GetBit"],[8,"SetBit"],[3,"UTerm"],[3,"UInt"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[6,"P1"],[6,"N1"],[8,"Ord"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Same"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[3,"ATerm"],[3,"TArr"],[3,"Greater"],[3,"Less"],[3,"Equal"]]};
searchIndex["unborrow"] = {"doc":"","items":[[14,"unborrow","unborrow","Explicitly precompute a method's arguments before the call so that borrowck sees them the same way that trans does.",null,null]],"paths":[]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
