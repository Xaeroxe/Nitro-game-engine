initSidebarItems({"fn":[["bfgs","Minimizes a function using the quasi-newton BFGS method."],["binom","Computes the binomial coefficient C^k_n (\"k among n\")."],["center","Computes the center of a set of point."],["center_reduce","Centers and reduces a set of data."],["circumcircle","Computes the circumcircle of a triangle."],["cov","Computes the convariance matrix of a set of points."],["cov_and_center","Computes the covariance matrix and center of a set of points."],["cross3","A 3d cross product that do not require the `Cross<Self, Self>` trait impl."],["dcos","Computes the n-th derivative of the cosinus function."],["dsin","Computes the n-th derivative of the sinus function."],["is_affinely_dependent_triangle","Tests if three points are exactly aligned."],["is_affinely_dependent_triangle3","Tests if three 3D points are exactly aligned without the need of the `Cross` trait."],["is_point_in_triangle","Tests if a point is inside of a triangle."],["maximize_with_newton","Maximizes a real function using the Newton method."],["median","Computes the median of a set of values."],["minimize_with_bfgs","Minimizes a function using the bfgs method."],["newton","Finds the root of a function using the Newton method."],["point_cloud_support_point","Computes the support point of a cloud of points."],["project_homogeneous","Project n-d point to a (n-1)-d space, dividing each vector by its `w` component."],["project_homogeneous_to","Project n-d point to a (n-1)-d space, dividing each vector by its `w` component."],["remove_unused_points","Given an index buffer, remove from `points` every point that is not indexed."],["sort3","Sorts a set of three values in increasing order."],["tetrahedron_center","Computes the center of a tetrahedron."],["tetrahedron_signed_volume","Computes the signed volume of a tetrahedron."],["tetrahedron_volume","Computes the volume of a tetrahedron."],["triangle_area","Computes the area of a triangle."],["triangle_center","Computes the center of a triangle."],["triangle_perimeter","Computes the perimeter of a triangle."]],"mod":[["data","Data structure utilities."]],"struct":[["BacktrackingLineSearch","The backtracking line search method."],["HashablePartialEq","A structure that implements `Eq` and is hashable even if the wrapped data implements only `PartialEq`."]],"trait":[["AsBytes","Trait that transforms thing to a slice of u8."],["LineSearch","Trait for line search methods."]]});